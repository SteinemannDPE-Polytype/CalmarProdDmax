<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_ProdManager_DMAX" Id="{6b328657-811b-4dd9-b1f4-d06c9d97af12}" SpecialFunc="None">
    <Declaration><![CDATA[(*
  Managing a production on a DigiRound machine.
*)
FUNCTION_BLOCK FB_ProdManager_DMAX EXTENDS FB_BasePrint IMPLEMENTS I_PrintStatusClient, I_ProdManager
VAR
 //references
  _pPU                : POINTER TO FB_PU;               (*PU reference*)
  
  //settings
  _defaultPrintData   : ST_PRINT_SETTING;               (*default PDI data if no CT present*)
  _isVarData          : BOOL; 

  //status
  bPmActive           : BOOL;                           (*a production is active*)
  rfTrig_PmActive     : RF_TRIG;
  lastCreatedCT       : I_CT;                           (*last created container*)
  sActiveJobInfo      : T_MaxString;                    (*current job information string*)
  nScrap              : UDINT;
  nProduced           : UDINT;
  nToProduce          : UDINT;

  (*lists*)
  (*--job trace list*)
  _currJobId          : STRING;                         (*id of current started job*)

  (*internals*)
  _pEcSrc : POINTER TO T_ErrSrc;                                    (*error source definition*)

END_VAR
VAR CONSTANT
  lNUM_LIST_SIZE        : DINT := iCPr_MAX_CONTAINER;   (*number of max. list elements*)
  // other logs
  aC_Dbg_NotReject      : STRING := 'could not rejectNext CT';
  aC_Dbg_InvPtrCT       : STRING := 'invalid pO_ContainerHead';
  aC_Dbg_InvPtrJob      : STRING := 'invalid Job pointer';
  aC_Ddb_GetNext        : STRING := 'getNext from: ';  
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitialized THEN RETURN; END_IF  // ignore

rfTrig_PmActive(CLK:=bPmActive);]]></ST>
    </Implementation>
    <Folder Name="I_PrintStatusClient" Id="{01602ff5-4961-4770-a9e0-df788cccf137}" />
    <Folder Name="I_ProdManager" Id="{098fb917-a473-45be-aa26-2a7289011cb1}" />
    <Method Name="abortJob" Id="{0b86ce5b-6645-4e9f-88e0-e4df53c97f50}">
      <Declaration><![CDATA[(*
  Job was stopped. 
  :return: TRUE if some elements were aborted in machine.
*)
METHOD PRIVATE abortJob : BOOL
VAR
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// a job stopped.

// NOTE: not implemented

]]></ST>
      </Implementation>
    </Method>
    <Property Name="bReady" Id="{33904276-4cf8-4fbb-8168-623dee2f352a}">
      <Declaration><![CDATA[PROPERTY bReady : BOOL]]></Declaration>
      <Get Name="Get" Id="{af74f0be-4916-4823-851b-eec52ffc9c35}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bReady := bPmActive;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bStarted" Id="{003fc039-2ae1-47e7-939b-8b964c2b0215}">
      <Declaration><![CDATA[PROPERTY bStarted : BOOL]]></Declaration>
      <Get Name="Get" Id="{77fefb97-cf9a-4c80-ad83-797fc7c7e415}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bStarted := rfTrig_PmActive.RT;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bStopped" Id="{c4f65a10-a22d-442c-b452-0ef8920e8a23}">
      <Declaration><![CDATA[PROPERTY bStopped : BOOL]]></Declaration>
      <Get Name="Get" Id="{4ab745ce-3e15-428d-bfcf-e8babe4e4e7a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bStopped := rfTrig_PmActive.FT;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CT_Create" Id="{db8229d9-012f-45ec-9895-5d9df89c144e}">
      <Declaration><![CDATA[(*
Create/Build a new container (CT) with next page to be printed.
*)
METHOD CT_Create : BOOL
VAR_INPUT
  sCT            : I_CT;                  // container to produce
END_VAR
VAR 
  _created       : BOOL := FALSE;
  sPage          : ST_PrintPageDef;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// prepare & checks
lastCreatedCT := 0;                      // invalidate last created
IF NOT bInitialized THEN RETURN; END_IF
IF sCT = 0 THEN LogError(aC_Dbg_InvPtrCT); RETURN; END_IF

(* getNext CT *)
IF getNext(sCT := sCT) THEN
  
  // define printer output
  sPage := sCT.sPageDef;
  IF    sPage.lType = EN_PrintPageType.maintenance THEN // - maintenance
    sCT.pCT^.lPrOutput := EN_PrinterOutput.trash;     // -> eject trash
  ELSIF sPage.lType = EN_PrintPageType.production OR   // - production
        sPage.lSrc = EN_PrintPageSrc.overprod OR       // - over-production
        sPage.lType = EN_PrintPageType.separator THEN  // - separator 
    sCT.pCT^.lPrOutput := EN_PrinterOutput.prod;      // -> production output
  ELSE                                                // - rest
    sCT.pCT^.lPrOutput := EN_PrinterOutput.trash;     // -> eject trash
  END_IF

  lastCreatedCT := sCT;                // successfully produced a CT, store last created CT (necessary for async access within this cycle)
  sCT.pCT^.bCreated := TRUE;
  _created := TRUE;
ELSE
  sCT.setError(EC_Print.ecPMInvGetNext, Src:=_pEcSrc^);   // getNext error
END_IF

(* logging *)
LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=CONCAT('create CT: ', sCT.print(0)));

(*return value*)
CT_Create := _created;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CT_Finish" Id="{7fbbcc1d-cc92-478b-8cc6-a0a3756f5d60}">
      <Declaration><![CDATA[METHOD CT_Finish : BOOL
VAR_INPUT
  sCT            : I_CT;               // container to produce
  bSuccess       : BOOL;               // printed OK?
END_VAR
VAR
  bErr           : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* checks *)
IF NOT bInitialized THEN RETURN; END_IF                             // exit if no production is active
IF sCT = 0 THEN LogError(aC_Dbg_InvPtrCT); RETURN; END_IF  // log invalid pointer 

// tag machine errors on CT
IF sCT.pCT^.bValid AND NOT bSuccess THEN  
    sCT.setError(EC_Print.ecPMCTMachineErr, Src:=_pEcSrc^);            // tag CT with: error from machine 
END_IF

// report page done to PU
IF NOT sCT.pCT^.bReported AND sCT.pJob <> 0 THEN
  IF _pPU^.endPage(sCT:=sCT, bSuccess:=bSuccess) THEN
    ;
  ELSE
    sCT.setError(EC_Print.ecPMInvSet, Src:=_pEcSrc^);
  END_IF
END_IF

(* logging *)
IF bSuccess THEN
  LogLvl(Lvl:=E_LogSeverity.Detail, Msg:=CONCAT('successCT: ', sCT.print(0)));
ELSE
  LogLvl(Lvl:=E_LogSeverity.Detail, Msg:=CONCAT('eject  CT: ', sCT.print(0)));  
END_IF

(* return value *)
CT_Finish := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CT_Produce" Id="{9e3a46dc-7f8e-4f60-8028-450ec410f1c3}">
      <Declaration><![CDATA[(*
  Finalize/Produce a CT. Now we shouldhave all necessary information for configuring the CT.
*)
METHOD CT_Produce : BOOL
VAR_INPUT
  sCT                 : I_CT;               // container to produce
END_VAR
VAR
  _produced           : BOOL := FALSE;
  sPage               : ST_PrintPageDef;
  bPresent            : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* parameter checks *)
IF NOT bInitialized THEN RETURN; END_IF
IF sCT = 0 THEN LogError(aC_Dbg_InvPtrCT); RETURN; END_IF

sCT.pCT^.bValid           := TRUE;                (* we have all data - CT is valid configured*)

// reject page if no container present or overproduction
sPage := sCT.sPageDef;
bPresent := sCT.pCT^.bProductPresent;
IF NOT bPresent AND sPage.lSrc <> EN_PrintPageSrc.overprod  THEN
  (*   add it to rejected queue (high prio reproduction), we will try to produce this CT in next cycle*)
  IF NOT _pPU^.rejPage(sCT:=sCT) THEN
    LogLvl(Lvl:=E_LogSeverity.Info, aC_Dbg_NotReject);
  END_IF
END_IF

(* logging *)
IF bPresent THEN LogLvl(Lvl:=E_LogSeverity.Detail,  Msg:=CONCAT('produceCT: ', sCT.print(0)));
            ELSE LogLvl(Lvl:=E_LogSeverity.Debug,   Msg:=CONCAT('produceCT: ', sCT.print(0))); END_IF

(* return value*)
CT_Produce := _produced; ]]></ST>
      </Implementation>
    </Method>
    <Property Name="defaultPrData" Id="{0f30a3d3-bbde-49dd-b640-35e97b7021cb}">
      <Declaration><![CDATA[PROPERTY defaultPrData : ST_PRINT_SETTING]]></Declaration>
      <Get Name="Get" Id="{6d19f315-df2f-4d12-8181-34118b946600}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[defaultPrData := _defaultPrintData;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="dynAddPage" Id="{4e3f409c-045d-46ae-bef1-54a6c3ec3f52}">
      <Declaration><![CDATA[METHOD PRIVATE dynAddPage : BOOL
VAR_INPUT
  lType     : EN_PrintPageType; 
  lPageNr   : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _pPU = 0 THEN F_Report_Error(ErrType:=EN_REPORT_ERROR_TYPE.Report_Error_0Pointer); RETURN; END_IF
IF lType <> EN_PrintPageType.maintenance THEN
  LogError('dynAddPage: only supports maintenance pages'); 
END_IF

_pPU^.addPage(
  lPageType:=EN_PrintPageType.maintenance,
  lPageSrc:=EN_PrintPageSrc.Sample,
  lPageNr:=1
);]]></ST>
      </Implementation>
    </Method>
    <Method Name="getNext" Id="{5d75c39d-9fb1-4ff9-a5b0-edf19030c563}">
      <Declaration><![CDATA[(*
  get next page to be printed.
  :return:    TRUE if success.
*)
METHOD PRIVATE getNext : BOOL               (*get next image to be printed*)
VAR_INPUT
  sCT               : I_CT;                 (*container handle*)
END_VAR
VAR
  bErr              : BOOL;
  lRemainingPages   : UDINT;
END_VAR
VAR_INST
  rTrig_PreStop     : R_TRIG;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitialized THEN RETURN; END_IF                    (* Exit if no production is active*)

// ask pu for a next page
bErr := NOT _pPU^.getPage(sCT:=sCT, lPagesLeft=>lRemainingPages);

getNext := NOT bErr;]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{d77ef565-b96f-4032-8974-a22386a23d45}">
      <Declaration><![CDATA[METHOD init : BOOL
VAR_INPUT
  pPU     : POINTER TO FB_PU;
  // machine specific
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// parameter checks
IF pPU = 0 THEN
  F_Report_Error(ErrType:=EN_REPORT_ERROR_TYPE.Report_Error_0Pointer);
  RETURN;
END_IF

// register external references
_pPU := pPU;

// init error source
_pEcSrc := ErrorCodes.fbErrCodeMngr.registerErrSource(
  nLocId:=0, 
  aInstPath:=InstanceName, 
  aLocDescr:='PrintManager DMAX'
);
IF _pEcSrc = 0 THEN LogError('could not register error source'); END_IF

//reset setates
bPmActive := FALSE;
lastCreatedCT := 0;

bInitialized := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="JobFinished" Id="{f266638a-b068-4c56-b67c-8fc6bd6c2d2b}">
      <Declaration><![CDATA[METHOD JobFinished : BOOL
VAR_INPUT
  aSeparatorId   : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Job Handling -----------------------

// NOTE: nothing implemented for now]]></ST>
      </Implementation>
    </Method>
    <Property Name="lastCreated" Id="{0d8dadff-1b2d-4f94-a1be-d8278fcd8c5e}">
      <Declaration><![CDATA[PROPERTY lastCreated : I_CT]]></Declaration>
      <Get Name="Get" Id="{3da8089e-1cda-4562-8078-aa66d5961270}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[lastCreated := lastCreatedCT;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="mJobPause" Id="{6a44bd3a-ab99-45aa-ab8c-fcd698bd816f}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mJobPause
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStart" Id="{c9bb6b9d-7a22-4528-839b-20c5010c2a55}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mJobStart
VAR_INPUT
	sJobDef	: I_JobDefinition;
END_VAR
VAR
  n1,n2,n3 : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitialized THEN RETURN; END_IF
IF sJobDef = 0 THEN RETURN; END_IF

// start job 
LogLvl(lvl:=E_LogSeverity.Detail, Msg:=F_Concat5('PM start job: ', sJobDef.aJobId, ' (', sJobDef.aJobName, ')'));

// setup PrintManager with new job
_currJobId := sJobDef.aJobId;
_isVarData := sJobDef.isVarData();

// -- init last created
lastCreatedCT := 0;

// -- init defaultPrintData (TODO: not sure why we really need this)
MEMSET(ADR(_defaultPrintData), 0, SIZEOF(_defaultPrintData));   // reset default data

// -- add pre-production pages (product specific) -> maintenance pages
(*FOR lCt := 1 TO lStartEject DO 
  dynAddPage(lType:=EN_PrintPageType.maintenance, 1);
END_FOR*)

bPmActive := TRUE;
sActiveJobInfo := F_Concat7(
  F_Concat3('Name:      ', sjobdef.aJobName, '$n'),
  F_Concat3('JobId:     ', sjobdef.aJobId, '$n'),
  F_Concat3('FlowId:    ', sjobdef.aFlowId, '$n'),
  F_Concat3('Substrate: ', sjobdef.aSubstrateName, '$n'),
  F_Concat3('Descr:     ', sjobdef.aJobDescription, '$n'),
  F_Concat3('Width:     ', TO_STRING(sjobdef.fImageWidth), '$n'),
  F_Concat3('Depth:     ', TO_STRING(sjobdef.fImageDepth), '$n')
);

sJobDef.getJobPageNbrs(nProdPages=>n1, nMaintPages=>n2, nPrePrPages=>n3);
nToProduce := n1+n2;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStop" Id="{21a0faba-df46-4fc9-95e9-89fdc44492f2}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mJobStop
VAR_INPUT
	sStatus	: I_JobStatus;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitialized THEN RETURN; END_IF

(*Stop job*)
LogLvl(lvl:=E_LogSeverity.Detail, Msg:=
  F_Concat7(
    'PM stop job P(',
    TO_STRING(sStatus.iJobProgress.lProductionCount), ') M(',
    TO_STRING(sStatus.iJobProgress.lMaintenanceCount), ') S(',
    TO_STRING(sStatus.iJobProgress.lScrapCount), ')'
  )
);

abortJob();

bPmActive := FALSE;
sActiveJobInfo := 'No job active';
nProduced := nScrap := 0;
lastCreatedCT := 0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mProduced" Id="{db99b749-d6ca-4154-97fa-adccf70dbc59}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mProduced
VAR_INPUT
	(* current progress*)
	sProgress	: I_JobProgress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitialized THEN RETURN; END_IF

nProduced  := sProgress.lProductionCount + sProgress.lMaintenanceCount;
nScrap     := sProgress.lScrapCount;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ProdManager_DMAX">
      <LineId Id="3" Count="2" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.abortJob">
      <LineId Id="3" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.bReady.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.bStarted.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.bStopped.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.CT_Create">
      <LineId Id="3" Count="10" />
      <LineId Id="15" Count="1" />
      <LineId Id="45" Count="0" />
      <LineId Id="17" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.CT_Finish">
      <LineId Id="3" Count="2" />
      <LineId Id="11" Count="22" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.CT_Produce">
      <LineId Id="3" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.defaultPrData.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.dynAddPage">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.getNext">
      <LineId Id="3" Count="3" />
      <LineId Id="36" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.init">
      <LineId Id="3" Count="7" />
      <LineId Id="37" Count="5" />
      <LineId Id="36" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="28" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.JobFinished">
      <LineId Id="3" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.lastCreated.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.mJobPause">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.mJobStart">
      <LineId Id="3" Count="8" />
      <LineId Id="16" Count="5" />
      <LineId Id="49" Count="4" />
      <LineId Id="36" Count="2" />
      <LineId Id="58" Count="2" />
      <LineId Id="62" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="1" />
      <LineId Id="57" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="66" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="65" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.mJobStop">
      <LineId Id="3" Count="12" />
      <LineId Id="28" Count="1" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="34" Count="0" />
    </LineIds>
    <LineIds Name="FB_ProdManager_DMAX.mProduced">
      <LineId Id="3" Count="0" />
      <LineId Id="12" Count="2" />
    </LineIds>
  </POU>
</TcPlcObject>