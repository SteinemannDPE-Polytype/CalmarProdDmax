<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_MarkCamera" Id="{f402e88b-9648-4173-b602-808ed11a92b0}" SpecialFunc="None">
    <Declaration><![CDATA[(*
  Mark camera system
  2 mark sensors detect sheet marks.   
*)
FUNCTION_BLOCK FB_MarkCamera EXTENDS FB_CameraBase 

VAR_INPUT
  IbSensorState       AT%I* : ARRAY [1..cNbSensors] OF BOOL;        (*Mark sensor state*)
  ItTimeStampPos      AT%I* : ARRAY [1..cNbSensors] OF T_DCTIME64;  (*TimeStamp Pos_Edge @EL1252*)
  ItTimeStampNeg      AT%I* : ARRAY [1..cNbSensors] OF T_DCTIME64;  (*TimeStamp Neg_Edge @EL1252*)

  IfConveyorSpeed           : LREAL;      (*Actual speed of conveyor [m/s]*)
  IfMasterPosition          : LREAL;      (*Master position [µm]*)
END_VAR

VAR
  nCounter                  : UDINT;

  _fSensorDistance          : REAL := 1.0;    (*Distance between the two sensors [m]*)
  _fMarkPositionX           : REAL := 0.010;  (*Distance sheet edge to mark position [m]*)
  _fMarkSizeX               : REAL;           (*Mark size X [mm]*)
  _fMarkSizeY               : REAL;           (*Mark size Y [mm]*)

  tSensorRisingEdge         : ARRAY [1..cNbSensors] OF T_DCTIME64;
  tSensorFallingEdge        : ARRAY [1..cNbSensors] OF T_DCTIME64;
  bMemSensorState           : ARRAY [1..cNbSensors] OF BOOL;       (*Mem mark sensor state*)
  bInhibSensor              : ARRAY [1..cNbSensors] OF BOOL;       (*Inhibit sensor signals, TRUE=inhibit*)
  bSensorStateOK            : ARRAY [1..cNbSensors] OF BOOL;       (*Mark sensor state ok*)
  fSensorDuration           : ARRAY [1..cNbSensors] OF REAL;       (*Sensor signal duration [ns]*)
  fSensorLength             : ARRAY [1..cNbSensors] OF REAL;       (*Sensor signal length [mm]*)
  fS1S2EdgeDistance         : REAL;       (*Edge distance between sensors [mm]*)
  fLateralOffset            : REAL;       (*Lateral offset [mm]*)
  fMemMasterPosition        : LREAL;      (*Mem master position [µm]*)
  bStopCondition            : BOOL;       (*Condition for stop trigger*)
END_VAR

VAR CONSTANT                
  cNbSensors                : UDINT := 2; (*Number of mark sensors*)
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT _bInitialized THEN RETURN; END_IF

(*check parameter*)
IF _fSensorDistance = 0 THEN
	_fSensorDistance := 1.0;
END_IF;

FOR nCounter := 1 TO cNbSensors DO
  (* -------- Detection of rising edge on sensor --------*)
  IF IbSensorState[nCounter] AND NOT bMemSensorState[nCounter] AND NOT bInhibSensor[nCounter] THEN
    tSensorRisingEdge[nCounter] := ItTimeStampPos[nCounter];
    fMemMasterPosition          := IfMasterPosition;
  END_IF;
  
  (* -------- Detection of falling edge --------*)
  IF NOT IbSensorState[nCounter] AND bMemSensorState[nCounter] AND NOT bInhibSensor[nCounter] THEN
    tSensorFallingEdge[nCounter] := ItTimeStampNeg[nCounter];
    fSensorDuration   [nCounter] := LREAL_TO_REAL(ULINT_TO_LREAL(tSensorFallingEdge[nCounter]) - ULINT_TO_LREAL(tSensorRisingEdge[nCounter]));		(* Calculate how long the signal was ON *)
    fSensorLength     [nCounter] := LREAL_TO_REAL(fSensorDuration[nCounter] * IfConveyorSpeed / 1_000_000_000);			(* Calculate the equivalence in mm *)
    bSensorStateOK    [nCounter] := TRUE;   (* now the function can continue to Angle & Offset calculation *)
    bInhibSensor      [nCounter] := TRUE;
  END_IF;
  
  bMemSensorState[nCounter] := IbSensorState[nCounter];			(* Memorization of the sensor1 state for next cycle *)
END_FOR

(* ------------ ANGLE & OFFSET CALCULATION ----------------- *)
IF bSensorStateOK[1] AND bSensorStateOK[2] THEN
  fS1S2EdgeDistance := LREAL_TO_REAL(ULINT_TO_LREAL(tSensorRisingEdge[1] - tSensorRisingEdge[2]) / 1_000_000 * IfConveyorSpeed);	(* Calculate the difference in mm between S1 and S2 trigger *)

  fLateralOffset := (_fMarkSizeY / _fMarkSizeX) * (fSensorLength[1] - fSensorLength[2]) / 2;  (* Evaluation of the offset for each mark *)

  IF _iCameraSink <> 0 THEN
    (*Mark1*)
    stCamPoint.x_ref := F_MeterToSubPixelReal( _fMarkPositionX                                      (*[m]*)
                                              , UDINT_TO_LREAL(_nPrintUnitResolution));             (*Result should be in pixels*)
    stCamPoint.y_ref := F_MeterToSubPixelReal( (_fSubstrateWidth / 2) - (_fSensorDistance / 2)       (*[m]*)
                                              , UDINT_TO_LREAL(_nPrintUnitResolution));             (*Result should be in pixels*)
    stCamPoint.dx    := 0;
    stCamPoint.dy    := F_MeterToSubPixelReal( fLateralOffset * 0.001                              (*[mm] => [m]*)
                                              , UDINT_TO_LREAL(_nPrintUnitResolution));             (*Result should be in pixels*)
    stCamPoint.valid := TRUE;
    
    _iCameraSink.AddCamPoint(stCamPoint);
    _nRxCamPoints := _nRxCamPoints + 1 ;
  
    (*Mark2*)
    stCamPoint.x_ref := F_MeterToSubPixelReal( _fMarkPositionX                                      (*[m]*)
                                             , UDINT_TO_LREAL(_nPrintUnitResolution));             (*Result should be in pixels*)
    stCamPoint.y_ref := F_MeterToSubPixelReal( (_fSubstrateWidth / 2) - (_fSensorDistance / 2) + _fSensorDistance  (*[m]*)
                                             , UDINT_TO_LREAL(_nPrintUnitResolution));             (*Result should be in pixels*)
    stCamPoint.dx    := F_MeterToSubPixelReal( fS1S2EdgeDistance * 0.001                           (*[mm] => [m]*)
                                             , UDINT_TO_LREAL(_nPrintUnitResolution));             (*Result should be in pixels*)
    stCamPoint.dy    := F_MeterToSubPixelReal( fLateralOffset * 0.001                              (*[mm] => [m]*)
                                             , UDINT_TO_LREAL(_nPrintUnitResolution));             (*Result should be in pixels*)
    stCamPoint.valid := TRUE;
    
    _iCameraSink.AddCamPoint(stCamPoint);
    _nRxCamPoints := _nRxCamPoints + 1;
  END_IF;

	bSensorStateOK[1]  := FALSE;
	bSensorStateOK[2]  := FALSE;
END_IF;


(*------------ start and stop signal treatment ------------*)
(*generate stop trigger*)
bStopCondition := (IfMasterPosition >= (fMemMasterPosition + (_fSubstrateLength * 1_000_000)));

IF bStopCondition AND (bInhibSensor[1] OR bInhibSensor[2]) THEN
  bInhibSensor[1] := FALSE;
  bInhibSensor[2] := FALSE;
END_IF;

// TODO: 'implement PUC messages eCPr_PrintMarkError1&2'

]]></ST>
    </Implementation>
    <Property Name="eCameraMode" Id="{5c8ad228-bbd9-4fdb-8c5f-de324e48a90c}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY eCameraMode : E_CameraMode
]]></Declaration>
      <Get Name="Get" Id="{d97a22ca-6628-413e-97bc-2b10c7279784}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eCameraMode := _eCameraMode;
IF _eCameraMode = E_CameraMode.Auto THEN
  eCameraMode := E_CameraMode.XYR;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="eDeviceType" Id="{c63aebd0-81b4-47a9-91bf-0f8f8ab1d94e}">
      <Declaration><![CDATA[PROPERTY eDeviceType : E_CameraDevice]]></Declaration>
      <Get Name="Get" Id="{f6008c51-e886-4e07-9bbe-8fd6574ff426}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eDeviceType := E_CameraDevice.PrintMark;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="fMarkPositionX" Id="{45168e72-de60-48f1-a9a3-3a9d9136172d}">
      <Declaration><![CDATA[PROPERTY fMarkPositionX : REAL]]></Declaration>
      <Set Name="Set" Id="{d6191000-2a84-4bc9-bce6-0b5db6c5e06e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fMarkPositionX := fMarkPositionX;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="fMarkSizeX" Id="{fe0e748b-e398-45c3-9d79-b04fb35dbb00}">
      <Declaration><![CDATA[PROPERTY fMarkSizeX : REAL]]></Declaration>
      <Set Name="Set" Id="{a82154b4-3ee0-4c75-a8cc-50711ea1275f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fMarkSizeX := fMarkSizeX;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="fMarkSizeY" Id="{19317f94-2997-4187-83ad-b5c529caa75e}">
      <Declaration><![CDATA[PROPERTY fMarkSizeY : REAL]]></Declaration>
      <Set Name="Set" Id="{9f7cea76-1026-44af-b85a-f448c2990ff5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fMarkSizeY := fMarkSizeY;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="fSensorDistance" Id="{fe1e8a82-abc8-4f77-93e3-d4c2d80faf52}">
      <Declaration><![CDATA[PROPERTY fSensorDistance : REAL]]></Declaration>
      <Set Name="Set" Id="{1abcb0bd-5ba5-4fef-b522-9a46ec1e3cfe}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fSensorDistance := fSensorDistance;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="GetCamStatus" Id="{aafbb77b-98d3-4d57-b74a-94b5aba4d69a}">
      <Declaration><![CDATA[METHOD GetCamStatus : BOOL
VAR_OUTPUT
  bConnectionOK  : BOOL;    // Camera connected
  bTeachOk       : BOOL;    // Teach successful
  nTeachedPoints : UDINT;   // Teached points for this job
  nScannedPoints : UDINT;   // Scanned points on current sheet
  bCamStarted    : BOOL;    // Camera trigger is active, cam started
  bCamDone       : BOOL;    // Camera finished on last CT
  bErrors        : ARRAY[1..GVL_Camera.nC_NbCamErrors] OF BOOL;  // generic error flag list
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bConnectionOK  := TRUE;
bTeachOk       := TRUE; // NO teach availabe
nTeachedPoints := 2;    // 2 marks only
nScannedPoints := _nRxCamPoints;
bCamStarted    := _bCamTriggerStarted;
bCamDone       := _bCamTriggerDone;

GetCamStatus := bConnectionOK AND bTeachOk;   // camera ready]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitMarkCamera" Id="{016c89d6-4690-40de-8045-8e8d8571bb75}">
      <Declaration><![CDATA[METHOD InitMarkCamera
VAR_INPUT
  nPrintUnitResolution         : UDINT;    (*printhead pixel resolution [dpi]*)
  nPrintUnitSubPx              : UDINT;    (*print unit subPixel resolution [SubPx]*)
  iCameraTrigger               : I_CameraTrigger;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Init( nPrintUnitResolution      := nPrintUnitResolution
           , nPrintUnitSubPx           := nPrintUnitSubPx
           , iCameraTrigger            := iCameraTrigger
           , bUseCameraTrigger         := FALSE
           , bUseCameraTriggerFeedback := FALSE);

_bInitialized := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="setCameraMode" Id="{9e1ff458-7c8e-44d4-98cb-efd64899bdc4}">
      <Declaration><![CDATA[(*
  Set mode to camera.
  :return: TRUE if success
*)
METHOD setCameraMode : BOOL
VAR_INPUT
  eCameraMode : E_CameraMode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eCameraMode = E_CameraMode.NoCorrection OR  // supported modi
   eCameraMode = E_CameraMode.XYR THEN
   
  _eCameraMode := eCameraMode;  // set desired mode
  setCameraMode := TRUE;
ELSE
  LogError(F_Concat3('Camera mode=', TO_STRING(eCameraMode), ' not supported by camera'));
  _eCameraMode := E_CameraMode.NoCorrection;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Property Name="sName" Id="{91284250-ba5c-4d0f-8aaa-c653299156c9}">
      <Declaration><![CDATA[{attribute 'monitoring':='variable'}
PROPERTY sName : STRING
]]></Declaration>
      <Get Name="Get" Id="{50ff418b-9173-4e6c-9fa2-ed5c7f8ae417}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sName := 'Printmarks';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_MarkCamera">
      <LineId Id="617" Count="41" />
      <LineId Id="732" Count="0" />
      <LineId Id="659" Count="12" />
      <LineId Id="731" Count="0" />
      <LineId Id="672" Count="19" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera.eCameraMode.Get">
      <LineId Id="13" Count="2" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera.eDeviceType.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera.fMarkPositionX.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera.fMarkSizeX.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera.fMarkSizeY.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera.fSensorDistance.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera.GetCamStatus">
      <LineId Id="19" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="4" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera.InitMarkCamera">
      <LineId Id="5" Count="0" />
      <LineId Id="65" Count="0" />
      <LineId Id="53" Count="2" />
      <LineId Id="39" Count="0" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera.setCameraMode">
      <LineId Id="24" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera.sName.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>