<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_CleaningMotorAxisCH" Id="{de1f3ccb-7d72-4654-b2bd-d7d9623e36f9}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CleaningMotorAxisCH EXTENDS FB_CleanDevice
VAR_INPUT
  bI_SafeToMove                        : BOOL;
  bI_Emergency                         : BOOL;
  bI_WatchdogError                     : BOOL;
  bI_SafetyOk                          : BOOL;
  bI_UsrAutoMode                       : BOOL;
  bI_UsrService                        : BOOL;
  bI_DevOpActive                       : BOOL;
  bI_CUinPosCappingClean               : BOOL;
  
  //Limit switches
  bI_Sensor_pA                  AT %I* : BOOL;  (*Physical sensor feedback for pA position*)
  bI_Sensor_pB                  AT %I* : BOOL;  (*Physical sensor feedback for pB position*)
  
  //Inputs from EL7201 Terminal
  wI_StatusWord                 AT %I* : UINT; (*Status word: 6041:0*)
  lI_EncoderValue               AT %I* : DINT; (*Encoder value*)
  bI_DeviceOnline               AT %I* : BOOL; (*Check link to device*)
  
  fB_Axis                              : FB_EL7201;    //Axis controller
  
END_VAR

VAR_OUTPUT
  //Outputs to EL7201 Terminal
  wO_ControlWord                AT %Q* : UINT;                         (*Control word:  6040:0*)
  iO_TargetVelocity             AT %Q* : DINT;                         (*Target velocity:  60FF:0*)
END_VAR

VAR
  sADS_CleanAxis                       : FB_ADS_CleanAxis;     //ST_ADS_CLEAN_AXIS;

  //Limit switches
  bL_Sensor_pA                         : BOOL;  (*Negated sensor feedback for pA position*)
  bL_Sensor_pB                         : BOOL;  (*Negated sensor feedback for pB position*)

  fb_TonDeviceOnline                   : TON;
	bIDp_DeviceReset                     : BOOL := FALSE;
	fb_RTrigDeviceReset                  : R_TRIG;

  bL_SafeRunningCondition              : BOOL;
  bL_SafeMoveNeg                       : BOOL;
  bL_SafeMovePos                       : BOOL;
  bL_memRefSensor                      : BOOL;
  bL_FirstRun                          : BOOL := TRUE;

  bL_InPosA                            : BOOL;
  bL_InPosB                            : BOOL;
  
  fb_RFTrigManualMove                  : RF_TRIG;
  sL_CleanDevStatus                    : ST_CLEANING_DEV_STATUS;

  wL_ErrorCode                         : WORD;
  
  (*Messaging*)
  fB_MsgQueue                          : FB_MSG_QUEUE;
  fB_MsgHandler                        : FB_MSG_HANDLER;
  sL_MsgConfig                         : ST_MSG_CONFIG;
  fB_Msg                               : ARRAY [1..iC_NUM_MSG] OF FB_MESSAGE;
END_VAR

VAR PERSISTENT
  fI_Position_p1                       : REAL;           (*[mm]*)
  fI_Position_p2                       : REAL;           (*[mm]*)
  fI_Position_A                        : REAL;           (*[mm]*)
  fI_Position_B                        : REAL;           (*[mm]*)
  fI_PositionTolerance                 : REAL := 0.001;  (*[m]*)
  sI_SpeedDef                          : ST_SPEEDS;  (*Speed defs [mm/s]*)
END_VAR

VAR CONSTANT
  iC_NUM_MSG                           : INT  := 1;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[//Limit switches for internal use
bL_Sensor_pA := NOT bI_Sensor_pA;
bL_Sensor_pB := FALSE; (*not existing:  NOT bI_Sensor_pB;*)

(*----------------------------------------------------------------------------------------------------------------------------------------------- *)
(*Running Conditions for Cleaning Head  *)
(*----------------------------------------------------------------------------------------------------------------------------------------------- *)
IF bI_SafeToMove AND I_MachineStatus.pSafetyOk AND I_MachineStatus.pMachineReady AND (wL_ErrorCode = 0 OR wL_ErrorCode.5)THEN  (*Dont check limit switch here*)
  bL_SafeRunningCondition := TRUE;
ELSE
  bL_SafeRunningCondition := FALSE;
END_IF;

bL_SafeMoveNeg := bL_SafeRunningCondition AND NOT bL_Sensor_pA;
bL_SafeMovePos := bL_SafeRunningCondition AND NOT bL_Sensor_pB;

(*Because the WcState sets an error for on cycle, we use this timer to check if the bus is down.*)
fb_TonDeviceOnline(IN := bI_DeviceOnline, PT := T#20MS);
fb_RTrigDeviceReset(CLK := bIDp_DeviceReset);
IF fb_TonDeviceOnline.Q OR fb_RTrigDeviceReset.Q THEN
  bL_RefKnown    := FALSE;        (*Reset Reference when link to device is lost, e.g. when machine power off*)
	wL_ErrorCode.9 := TRUE;
END_IF;

(*----------------------------------------------------------------------------------------------------------------------------------------------- *)
(*Position detection*)
(*----------------------------------------------------------------------------------------------------------------------------------------------- *)
IF     (fB_Axis.fO_ActualPosition >= ((fI_Position_A / 1000) - fI_PositionTolerance)
   AND  fB_Axis.fO_ActualPosition <= ((fI_Position_A / 1000) + fI_PositionTolerance)) OR bL_Sensor_pA
THEN
  bL_InPosA := TRUE;
  bL_InPosB := FALSE;
ELSIF  fB_Axis.fO_ActualPosition >= ((fI_Position_B / 1000) - fI_PositionTolerance)
   AND fB_Axis.fO_ActualPosition <= ((fI_Position_B / 1000) + fI_PositionTolerance)
THEN
  bL_InPosA := FALSE;
  bL_InPosB := TRUE;
ELSE
  bL_InPosA := FALSE;
  bL_InPosB := FALSE;
END_IF;


(*----------------------------------------------------------------------------------------------------------------------------------------------- *)
(* Axis control  *)
(*----------------------------------------------------------------------------------------------------------------------------------------------- *)
fB_Axis.bI_RegActive := bL_SafeRunningCondition AND NOT bL_Error; //Activate controller
fB_Axis.bI_EStop     := I_MachineStatus.pSafetyOk;                //negative logic for bI_EStop

fB_Axis(wI_StatusWord := wI_StatusWord ,lI_EncoderValue := lI_EncoderValue);

fB_Axis.bI_FaultReset := FALSE;

wO_ControlWord    := fB_Axis.wO_ControlWord;
iO_TargetVelocity := fB_Axis.iO_TargetVelocity;


(*----------------------------------------------------------------------------------------------------------------------------------------------- *)
(*Manuell move in hand mode (NOT bI_UsrAutoMode)*)
(*----------------------------------------------------------------------------------------------------------------------------------------------- *)
fb_RFTrigManualMove(CLK := sADS_CleanAxis.bI_ManualMove);
IF     NOT bI_UsrAutoMode 
   AND bI_UsrService
   AND bI_SafetyOk
   AND NOT bI_WatchdogError
   AND bI_CUinPosCappingClean
THEN
  sADS_CleanAxis.setFeedback( bManualMoveCanEx := TRUE
                            , bManualMovekExec := sADS_CleanAxis.bO_ManualMovekExec        // do not change
                            , fAxisPositionVal := sADS_CleanAxis.sO_AxisPosition.fO_Val    // do not change
                            , wErrorCode       := sADS_CleanAxis.wO_ErrorCode              // do not change
                            , bBusy            := sADS_CleanAxis.bO_Busy                   // do not change
                            , bReady           := sADS_CleanAxis.bO_Ready                  // do not change
                            , bError           := sADS_CleanAxis.bO_Error                  // do not change
                            );

  IF sADS_CleanAxis.bI_ManualMove OR fb_RFTrigManualMove.FT THEN
    mManuellMove( bI_Do                  := sADS_CleanAxis.bI_ManualMove
                , fI_TargetPosition      := SEL( sADS_CleanAxis.bI_ManualMove
                                               , (fB_Axis.fO_ActualPosition * 1000)
                                               , sADS_CleanAxis.fI_ManualTargetPos)
                , fL_ManualMoveTolerance := fB_Axis.fI_Tolerance);
  END_IF
ELSE
  sADS_CleanAxis.setFeedback( bManualMoveCanEx := FALSE
                            , bManualMovekExec := sADS_CleanAxis.bO_ManualMovekExec        // do not change
                            , fAxisPositionVal := sADS_CleanAxis.sO_AxisPosition.fO_Val    // do not change
                            , wErrorCode       := sADS_CleanAxis.wO_ErrorCode              // do not change
                            , bBusy            := sADS_CleanAxis.bO_Busy                   // do not change
                            , bReady           := sADS_CleanAxis.bO_Ready                  // do not change
                            , bError           := sADS_CleanAxis.bO_Error                  // do not change
                            );
  sADS_CleanAxis.ResetCommands();

  IF fb_RFTrigManualMove.FT THEN
    mManuellMove( bI_Do                  := FALSE
                , fI_TargetPosition      := (fB_Axis.fO_ActualPosition * 1000)
                , fL_ManualMoveTolerance := fB_Axis.fI_Tolerance);
  END_IF
END_IF
(*Rest command if move is done*)
IF bL_Ready OR bL_Error THEN
  sADS_CleanAxis.ResetCommands();
END_IF

sL_CleanDevStatus := sStatus;

(*ADS Feedback*)
sADS_CleanAxis.setFeedback( bManualMoveCanEx := sADS_CleanAxis.bO_ManualMoveCanEx        // do not change
                          , bManualMovekExec := sADS_CleanAxis.bO_ManualMovekExec        // do not change
                          , fAxisPositionVal := fB_Axis.fO_ActualPosition * 1000
                          , wErrorCode       := wL_ErrorCode
                          , bBusy            := sL_CleanDevStatus.bBusy
                          , bReady           := sL_CleanDevStatus.bReady
                          , bError           := sL_CleanDevStatus.bError
                          );


(*----------------------------------------------------------------------------------------------------------------------------------------------- *)
(* Supervision  *)
(*----------------------------------------------------------------------------------------------------------------------------------------------- *)
(*
TODO: Supervisor
tL_TimerSurv.PT := T#3S;
tL_TimerSurv();
tL_TimerSensor.PT := T#105s  ;  (* 1meter at 10mm*)
tL_TimerSensor();*)

IF bL_FirstRun THEN
  bL_FirstRun     := FALSE;
  bL_memRefSensor := bL_Sensor_pA;
END_IF;

(*----------------------------------------------------------------------------------------------------------------------- *)
(*--------------------------------- Fault Diagnosis and Management  ----------------------------------------------------- *)
(*----------------------------------------------------------------------------------------------------------------------- *)
mErrorHandling();

(*----------------------------------------------------------------------------------------------------------------------- *)
(* Messaging                                                                                                              *)
(*----------------------------------------------------------------------------------------------------------------------- *)
fB_MsgHandler();
fB_Msg[1](bI_Status := bL_Error);
fB_MsgQueue();
]]></ST>
    </Implementation>
    <Method Name="mAckError" Id="{32ac1173-068d-4db5-8d22-380233982c69}">
      <Declaration><![CDATA[METHOD mAckError 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[wL_ErrorCode := 0;
mErrorHandling();
fB_Axis.bI_FaultReset := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mCapping" Id="{408bc520-855f-4eff-89a1-7a1f08f7d094}">
      <Declaration><![CDATA[METHOD mCapping : BOOL
VAR_INPUT
  iI_Step    : INT;
  bI_ExitCap : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Abort: Stop whereever axis is and return
IF bL_AbortReq THEN
  fB_Axis.bI_MoveEnable := FALSE;
  bL_Busy  := FALSE;
  bL_Ready := TRUE;

  RETURN;
END_IF

//Normal operation
bL_Ready := FALSE;
CASE iI_Step OF
	0: //Init - Check if axis is not activated, restore safety
    fB_Axis.bI_MoveEnable := FALSE;
		bL_Busy := FALSE;

  1: //Wait for PU axis to lift
    fB_Axis.bI_MoveEnable   := FALSE;
    bL_Busy                 := FALSE;
    
  2: //Wait for CU axis to move in
    fB_Axis.bI_MoveEnable   := FALSE;
    bL_Busy                 := FALSE;
    
  3: //Move CH to park positiom 
    fB_Axis.fI_TargetPosition := (fI_Position_A / 1000);
    fB_Axis.fI_SpeedLimit     := sI_SpeedDef.fP_PlaceSpeed / 1000;
    
    IF bL_InPosA THEN //Target reached
      fB_Axis.bI_MoveEnable := FALSE;
      bL_Busy               := FALSE;
      bL_Ready              := TRUE;  //Operation complete
    ELSE
      fB_Axis.bI_MoveEnable := bL_SafeMoveNeg;
      bL_Busy               := TRUE;
    END_IF

  4: //Wait for PU axis to lower
    fB_Axis.bI_MoveEnable   := FALSE;
    bL_Busy                 := FALSE;
    
	5: //End - Do nothing, capping process active
    mAckError();
		bL_Busy  := FALSE;
    bL_Ready := TRUE;  //Operation complete

	ELSE
		bL_Busy  := FALSE;		
    bL_Ready := TRUE;  //Operation complete
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="mCleaning" Id="{b198aa74-3f50-4f58-ae1a-3e1e43f8148a}">
      <Declaration><![CDATA[METHOD mCleaning : BOOL
VAR_INPUT
  iI_Step : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Abort: Stop whereever axis is and return
IF bL_AbortReq THEN
  bL_Busy:=FALSE;
  fB_Axis.bI_MoveEnable:=FALSE;
  bL_Ready := TRUE;
  RETURN;
END_IF

//Normal operation
bL_Ready := FALSE;
CASE iI_Step OF
  0: //Init - Check if axis is not activated, restore safety
    bL_Busy := FALSE;

  1: //Wait for PU axis to lift
    fB_Axis.bI_MoveEnable   := FALSE;
    bL_Busy                 := FALSE;
    
  2: //Wait for CU axis to move in
    fB_Axis.bI_MoveEnable   := FALSE;
    bL_Busy                 := FALSE;
    
  3: //Wait for PU axis to lower
    fB_Axis.bI_MoveEnable   := FALSE;
    bL_Busy                 := FALSE;
    
  4: //Ensure CH axis is at starting position
    mAckError();
    fB_Axis.fI_TargetPosition := (fI_Position_A / 1000);
    fB_Axis.fI_SpeedLimit     := sI_SpeedDef.fP_PlaceSpeed / 1000;
    
    IF bL_InPosA THEN
      fB_Axis.bI_MoveEnable := FALSE;
      bL_Busy               := FALSE;
      bL_Ready              := TRUE;  //Operation complete
    ELSE
      fB_Axis.bI_MoveEnable := TRUE;
      bL_Busy               := TRUE;
    END_IF
    
  5: //Move CH to clean start position
    fB_Axis.fI_TargetPosition := (fI_Position_p1 / 1000);
    fB_Axis.fI_SpeedLimit     := sI_SpeedDef.fP_PlaceSpeed / 1000;
    
    IF bL_Sensor_pB OR bL_InPosB THEN //Error
      ; //TODO
    ELSIF fB_Axis.fO_ActualPosition >= (fI_Position_p1 / 1000) THEN //Target reached
      fB_Axis.bI_MoveEnable := FALSE;
      bL_Busy               := FALSE;
      bL_Ready              := TRUE;  //Operation complete
    ELSE
      fB_Axis.bI_MoveEnable := bL_SafeMovePos;
      bL_Busy               := TRUE;
    END_IF

  6: //Wait until cleaning equipment ready
    fB_Axis.bI_MoveEnable   := FALSE;
    bL_Busy                 := FALSE;
    
  7: //Cleaning
    fB_Axis.fI_TargetPosition := (fI_Position_p2 / 1000);
    fB_Axis.fI_SpeedLimit     := sI_SpeedDef.fP_WorkSpeed / 1000;
    
    IF bL_Sensor_pB OR bL_InPosB THEN //Error
      ; //TODO
    ELSIF fB_Axis.fO_ActualPosition >= (fI_Position_p2 / 1000) THEN //Target reached
      fB_Axis.bI_MoveEnable := FALSE;
      bL_Busy               := FALSE;
      bL_Ready              := TRUE;  //Operation complete
    ELSE
      fB_Axis.bI_MoveEnable := bL_SafeMovePos;
      bL_Busy               := TRUE;
    END_IF
    
  8: //Wait until cleaning equipment ready
    fB_Axis.bI_MoveEnable   := FALSE;
    bL_Busy                 := FALSE;
    
  9: //Move CH to end position
    fB_Axis.fI_TargetPosition := (fI_Position_B / 1000);
    fB_Axis.fI_SpeedLimit     := sI_SpeedDef.fP_PlaceSpeed / 1000;
    
    IF bL_InPosB THEN //Target reached
      fB_Axis.bI_MoveEnable := FALSE;
      bL_Busy               := FALSE;
      bL_Ready              := TRUE;  //Operation complete
    ELSE
      fB_Axis.bI_MoveEnable := bL_SafeMovePos;
      bL_Busy               := TRUE;
    END_IF
    
  10: //Wait for PU axis to lift
    fB_Axis.bI_MoveEnable := FALSE;
    bL_Busy               := FALSE;  
  
  11: //Move CH back to start 
    fB_Axis.fI_TargetPosition := (fI_Position_A / 1000);
    fB_Axis.fI_SpeedLimit     := sI_SpeedDef.fP_PlaceSpeed / 1000;
    
    IF bL_InPosA THEN //Target reached
      fB_Axis.bI_MoveEnable := FALSE;
      bL_Busy               := FALSE;
      bL_Ready              := TRUE;  //Operation complete
    ELSE
      fB_Axis.bI_MoveEnable := bL_SafeMoveNeg;
      bL_Busy               := TRUE;
    END_IF

  12: //Wait for PU axis to lower
    fB_Axis.bI_MoveEnable   := FALSE;
    bL_Busy                 := FALSE;
    
  13: //End
    fB_Axis.bI_MoveEnable := FALSE;
    bL_Busy               := FALSE;  
    bL_Ready              := TRUE;  //Operation complete

  ELSE
    bL_Busy  := FALSE;    
    bL_Ready := TRUE;  //Operation complete
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="mErrorHandling" Id="{2d440b4b-bf97-41cc-811e-680446c1054d}">
      <Declaration><![CDATA[METHOD PRIVATE mErrorHandling
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fB_Msg[1].bI_Status := FALSE;

IF (bL_Sensor_pB AND bL_Sensor_pA) THEN			(* Sensor Fault : pB and pA can't be active at the same time *)
	wL_ErrorCode.2 := TRUE ;
END_IF;

IF (sI_SpeedDef.fP_PlaceSpeed=0) OR  (sI_SpeedDef.fP_WorkSpeed=0) OR (sI_SpeedDef.fP_ServiceSpeed=0) THEN	(* Speed Configuration not done *)
	wL_Errorcode.6 := TRUE;
END_IF;

IF (fI_Position_p1=0) OR (fI_Position_p2=0) THEN		(* Position Configuration not done *)
	wL_ErrorCode.7 := TRUE;
END_IF;

IF fB_Axis.eO_EL7201Status = eFault  THEN
	wL_ErrorCode.8 := TRUE;						(* EL7342 module fault *)
	fB_Msg[1].bI_Status := TRUE;
END_IF;


IF wl_ErrorCode = 0 THEN
	bL_Error := FALSE;
ELSE
	bL_Error := TRUE;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mErrorRecovery" Id="{e82d9302-93a9-4c1b-92c4-534a4eeaf7f6}">
      <Declaration><![CDATA[METHOD mErrorRecovery : BOOL
VAR_INPUT
    iI_Step : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Do nothing
bL_Busy := FALSE;
bL_Ready := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mInit" Id="{46622d50-a355-4f4a-bc37-d1c5cb71fe37}">
      <Declaration><![CDATA[METHOD mInit
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[	(*Messages*)
	sL_MsgConfig.bI_Enable       := TRUE;
	sL_MsgConfig.pI_FbMsgHandler := ADR(fB_MsgHandler);
	fB_MsgHandler.pI_MsgQueue    := ADR(fB_MsgQueue);
	fB_MsgQueue.pI_MsgInterface  := ADR(sADS_CleanAxis.sO_Message);
	fB_MsgQueue.cI_MaxElement    := 5;

	fB_Msg[1].iI_MsgLocation     := TO_INT(eMa_BLK_CLEANAXIS);
	fB_Msg[1].pI_MsgConfig       := ADR(sL_MsgConfig);
	fB_Msg[1].iI_MsgNumber       := eCMa_AxisErrorY;



]]></ST>
      </Implementation>
    </Method>
    <Method Name="mManuellMove" Id="{7606c520-2aa2-45a6-96f2-fd32dd905eee}">
      <Declaration><![CDATA[METHOD mManuellMove : BOOL
VAR_INPUT
  bI_Do                  : BOOL;
  fI_TargetPosition      : REAL;
  fL_ManualMoveTolerance : REAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[fB_Axis.fI_SpeedLimit     := sI_SpeedDef.fP_ServiceSpeed / 1000;
fB_Axis.fI_TargetPosition := fI_TargetPosition / 1000;
IF fB_Axis.fI_TargetPosition > fB_Axis.fO_ActualPosition THEN
  fB_Axis.bI_MoveEnable   := bI_Do AND bL_SafeMovePos;
ELSIF fB_Axis.fI_TargetPosition < fB_Axis.fO_ActualPosition THEN
  fB_Axis.bI_MoveEnable   := bI_Do AND bL_SafeMoveNeg;
ELSE
  fB_Axis.bI_MoveEnable   := bI_Do;
END_IF

bL_Busy  := ABS(fB_Axis.fI_TargetPosition - fB_Axis.fO_ActualPosition) > fL_ManualMoveTolerance;
bL_Ready := NOT (ABS(fB_Axis.fI_TargetPosition - fB_Axis.fO_ActualPosition) > fL_ManualMoveTolerance);  //Operation complete
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mProduction" Id="{1471920a-a6a8-44db-8d3e-3855297e492b}">
      <Declaration><![CDATA[METHOD mProduction : BOOL
VAR_INPUT
  iI_Step : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Nothing to do
fB_Axis.bI_MoveEnable := FALSE;
bL_Busy  := FALSE;
bL_Ready := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mService" Id="{858134fb-0568-4086-9b8c-b92ded33ab4e}">
      <Declaration><![CDATA[METHOD mService : BOOL
VAR_INPUT
  iI_Step : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Nothing to do
fB_Axis.bI_MoveEnable := FALSE;
bL_Busy  := FALSE;
bL_Ready := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStartup" Id="{d70b92fa-d688-4d12-a39f-aa1ef01ed1e1}">
      <Declaration><![CDATA[METHOD mStartup : BOOL
VAR_INPUT
  iI_Step : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE iI_Step OF
	0: //Init - Check if axis is not activated, restore safety
		bL_Busy := FALSE;

	1,2: //Wait until other axes in place
		bL_Busy := FALSE;

	3: //Begin - Init CH axis if NOT bL_RefKnown
    bL_Busy  := NOT bL_RefKnown;
    bL_Ready := bL_RefKnown;
    
    fB_Axis.bI_SetPosition := bL_RefKnown;
    
    IF NOT bL_RefKnown THEN  (* if the Y axis hasn't been initialized with Ref Sensor*)
      IF bL_Sensor_pA AND NOT bL_memRefSensor AND NOT bL_RefKnown THEN
        bL_RefKnown             := TRUE;                      (* When the sensor is activated, Save the correction value*)
        fB_Axis.bI_SetPosition  := TRUE;                      (*Initialize position to preset value*)
        fB_Axis.bI_MoveEnable   := FALSE;
        bL_Ready                := TRUE;
      ELSE
        IF bL_Sensor_pA AND bL_memRefSensor THEN
          fB_Axis.fI_TargetPosition := fB_Axis.fO_ActualPosition + 0.01;  (*@@@@CONST, change to JOG_NEGATIVE*)
          fB_Axis.fI_SpeedLimit     := sI_SpeedDef.fP_ServiceSpeed / 1000;     (* Start backward motion, the motor will run until Ref Sensor is ON*)
          fB_Axis.bI_MoveEnable     := bL_SafeMovePos;
        ELSIF bL_Sensor_pB THEN (*Security check if sensor malfunction:*)
          ; //Error
        ELSE
          fB_Axis.fI_TargetPosition := -100.0;                               (*@@@@CONST, change to JOG_NEGATIVE*)
          fB_Axis.fI_SpeedLimit     := (sI_SpeedDef.fP_ServiceSpeed * 0.1) / 1000;  (* Start backward motion, the motor will run until Ref Sensor is ON*)
          fB_Axis.bI_MoveEnable     := bL_SafeMoveNeg;
        END_IF;
      END_IF;
    END_IF;

    bL_memRefSensor := bL_Sensor_pA;				(* Memorization of the Ref sensor state for edge detection*)

	4: //End
		bL_Busy  := FALSE;		
    bL_Ready := TRUE;  //Operation complete

	ELSE
		bL_Busy  := FALSE;		
    bL_Ready := TRUE;  //Operation complete
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Property Name="pInPosA" Id="{0f790981-9536-4bfb-a3a1-222ce78a3870}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY pInPosA : bool]]></Declaration>
      <Get Name="Get" Id="{fb1ce827-9fe6-4561-a279-7600f74296b6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[pInPosA := bL_InPosA;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="pInPosB" Id="{9b24e5c7-2e62-4892-9694-cbcc5b545e26}">
      <Declaration><![CDATA[{attribute 'monitoring' := 'call'}
PROPERTY pInPosB : bool]]></Declaration>
      <Get Name="Get" Id="{c3c6c129-83b4-4904-a7c8-0612ea6f8c7d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[pInPosB := bL_InPosB;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_CleaningMotorAxisCH">
      <LineId Id="637" Count="56" />
      <LineId Id="791" Count="7" />
      <LineId Id="854" Count="0" />
      <LineId Id="799" Count="51" />
      <LineId Id="694" Count="25" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleaningMotorAxisCH.mAckError">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleaningMotorAxisCH.mCapping">
      <LineId Id="140" Count="9" />
      <LineId Id="133" Count="0" />
      <LineId Id="81" Count="9" />
      <LineId Id="113" Count="1" />
      <LineId Id="102" Count="0" />
      <LineId Id="115" Count="12" />
      <LineId Id="103" Count="6" />
      <LineId Id="134" Count="0" />
      <LineId Id="110" Count="2" />
      <LineId Id="155" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleaningMotorAxisCH.mCleaning">
      <LineId Id="138" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="136" Count="1" />
      <LineId Id="139" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="131" Count="1" />
      <LineId Id="154" Count="0" />
      <LineId Id="3" Count="2" />
      <LineId Id="92" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="100" Count="2" />
      <LineId Id="145" Count="0" />
      <LineId Id="104" Count="2" />
      <LineId Id="146" Count="3" />
      <LineId Id="6" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="7" Count="3" />
      <LineId Id="156" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="22" Count="8" />
      <LineId Id="158" Count="0" />
      <LineId Id="31" Count="3" />
      <LineId Id="91" Count="0" />
      <LineId Id="35" Count="12" />
      <LineId Id="159" Count="0" />
      <LineId Id="48" Count="15" />
      <LineId Id="160" Count="0" />
      <LineId Id="64" Count="4" />
      <LineId Id="116" Count="2" />
      <LineId Id="120" Count="0" />
      <LineId Id="73" Count="6" />
      <LineId Id="121" Count="0" />
      <LineId Id="81" Count="3" />
      <LineId Id="93" Count="0" />
      <LineId Id="166" Count="3" />
      <LineId Id="122" Count="3" />
      <LineId Id="161" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="170" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleaningMotorAxisCH.mErrorHandling">
      <LineId Id="3" Count="17" />
      <LineId Id="37" Count="0" />
      <LineId Id="22" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleaningMotorAxisCH.mErrorRecovery">
      <LineId Id="6" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleaningMotorAxisCH.mInit">
      <LineId Id="3" Count="12" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleaningMotorAxisCH.mManuellMove">
      <LineId Id="21" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="22" Count="6" />
      <LineId Id="15" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleaningMotorAxisCH.mProduction">
      <LineId Id="138" Count="0" />
      <LineId Id="216" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleaningMotorAxisCH.mService">
      <LineId Id="220" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleaningMotorAxisCH.mStartup">
      <LineId Id="32" Count="6" />
      <LineId Id="47" Count="0" />
      <LineId Id="57" Count="8" />
      <LineId Id="91" Count="0" />
      <LineId Id="66" Count="14" />
      <LineId Id="86" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="52" Count="2" />
      <LineId Id="96" Count="1" />
      <LineId Id="55" Count="1" />
      <LineId Id="98" Count="0" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleaningMotorAxisCH.pInPosA.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleaningMotorAxisCH.pInPosB.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>