<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_StartPositionDummy" Id="{8c44436b-fdf6-4982-bb45-487571d5b646}" SpecialFunc="None">
    <Declaration><![CDATA[(*
  A start position detection function block dummy.
  A dummy implementation to simulate start triggers at desired positions.
*)
FUNCTION_BLOCK FB_StartPositionDummy EXTENDS FB_BasePrint IMPLEMENTS I_StartPosDetect, I_PrintStatusClient, I_Sim
VAR_INPUT
  bTrigger                    : BOOL;       // manual trigger
  lPosition                   : DINT;       // current position [SubPx]
  fSpeed                      : LREAL;      // current speed [m/s]
  fResolution                 : LREAL;      // current print resolution [dpi*SubPx]
END_VAR

VAR
  // properties
  _bSim               : BOOL;       // simulatio mode active (PROPERTY)
  _bCreateTrigger     : BOOL;       // create new CT trigger (PROPERTY)
  _nStartPosX0        : DINT;       // create position for CT (absolut) [SubPx] (PROPERTY)
  _bAutoTrigger       : BOOL;       // automatic sheet triggers
  
  // config
  iJobDefinition      : CalmarCompPrint.I_JobDefinition;
  
  // local helper
  rfNewCT             : RF_TRIG;    // trigger new ct
  nSheetLength        : DINT;       // sheet length in [SubPx]
  nSheetGap           : DINT;       // sheet gap in [SubPx]
  nSheetEndPosition   : DINT;       // sheet end position [SubPx]
  nNextSheetPosition  : DINT;       // next trigger location
  fSheetPerHour       : LREAL;      // sheets per hour
  fSheetSpeed         : LREAL;      // [m/min] speed meter per minute
  tCheckTrigger       : TON;
  
  tCurrentTimeStamp   : T_DCTIME64; // get current timestamp
  fCurrentTimeStamp   : LREAL;      // current timestamp
  fSensorTimeStamp    : LREAL;      // sensor timestamp
  fDeltaDistance      : LREAL;      // distance that the substrate moved between the detection and the treatment of the information [m]
  
  rfTrig_Sim          : RF_TRIG;
END_VAR

VAR PERSISTENT
  // simulation configuration
  fSheetLength   : LREAL := 0.5;    // [m] sheet length (local or per job given)
  fSheetGap      : LREAL := 0.12;   // [m] gap between two sheets
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// checks and fixes
IF iJobDefinition = 0 THEN RETURN; END_IF
IF fSpeed = 0 THEN RETURN; END_IF
IF fSheetLength = 0 THEN fSheetLength := 1; END_IF
IF fResolution = 0 THEN fResolution := 600*32; END_IF
rfTrig_Sim(CLK:=_bSim);
IF    rfTrig_Sim.RT THEN SimEnter(); 
ELSIF rfTrig_Sim.FT THEN SimExit(); END_IF

IF NOT _bSim THEN RETURN; END_IF

// calculations
fSheetSpeed := fSpeed * 60;  // [m/s] -> [m/min]
nSheetGap := F_MeterToSubPixel(fPosMeter := fSheetGap, fResoSubPx := fResolution);  // [m] -> [SubPx]
fSheetPerHour := (60*60)/((fSheetLength+fSheetGap)/fSpeed);
nSheetLength := F_MeterToSubPixel(fPosMeter := fSheetLength, fResoSubPx := fResolution);  // [mm] -> [SubPx]
nNextSheetPosition := _nStartPosX0 + nSheetLength + nSheetGap; 
tCheckTrigger(PT:=TO_TIME(((fSheetLength+fSheetGap)/fSpeed)*1000));

// internal trigger creation
IF (lPosition - nNextSheetPosition) > 0 AND _bAutoTrigger THEN
  bTrigger := TRUE;
  tCheckTrigger(IN:=FALSE);
  tCheckTrigger(IN:=TRUE);
END_IF

// on trigger
rfNewCT(CLK := bTrigger, RT => _bCreateTrigger);
IF _bCreateTrigger THEN   // new ct created
  bTrigger := FALSE;  // reset trigger
  
  (* Calculate the current and sensor time stamp (keep old code not really necessary because we use current timestamp)*)
  tCurrentTimeStamp := F_GetCurDcTaskTime64();
  fCurrentTimeStamp := (ULINT_TO_LREAL(tCurrentTimeStamp )) / 1_000_000.0; (*in ms*)
  fSensorTimeStamp  := fCurrentTimeStamp;
  fDeltaDistance := (fCurrentTimeStamp - fSensorTimeStamp) * 0.001 * fSpeed;  (*Distance that the substrate moved between the detection and the treatment of the information [m]*)
  
  // sheet start and sheet end pos in [SubPx]
  _nStartPosX0     := lPosition - F_MeterToSubPixel(fPosMeter := fDeltaDistance, fResoSubPx := fResolution);
  nSheetEndPosition := _nStartPosX0 + nSheetLength;
END_IF



]]></ST>
    </Implementation>
    <Folder Name="I_PrintStatusClient" Id="{0f059572-48fa-432b-b785-512422fd1dfe}" />
    <Folder Name="I_Sim" Id="{7d61ad54-78ed-4583-824e-3b28cb4bdfce}" />
    <Folder Name="I_StartPosDetect" Id="{42dcb401-5898-4788-a131-7c35bf2d9f5b}" />
    <Property Name="bSimEnable" Id="{9ad55ae0-9c7f-42e0-b227-356775d240a7}" FolderPath="I_Sim\">
      <Declaration><![CDATA[PROPERTY bSimEnable : BOOL
]]></Declaration>
      <Get Name="Get" Id="{9bd88754-a865-4550-9123-bca0f19be00e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bSimEnable := _bSim;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b66c4a74-41e4-4373-95c4-8e6dd06c2d09}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_bSim := bSimEnable;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="bStartTrig" Id="{3a919c9a-ce16-49c6-b57e-75dcd07db7d1}" FolderPath="I_StartPosDetect\">
      <Declaration><![CDATA[(*
  A new container detected.
  NOTE: a pulse only
*)
PROPERTY bStartTrig : BOOL
]]></Declaration>
      <Get Name="Get" Id="{0a392f0b-d23a-4374-a637-12c72e002d9f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bStartTrig := _bCreateTrigger;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bValid" Id="{dd397979-b437-4cd6-bdee-6dad5733a67f}" FolderPath="I_StartPosDetect\">
      <Declaration><![CDATA[(*
  A valid container detected.
*)
PROPERTY bValid : BOOL
]]></Declaration>
      <Get Name="Get" Id="{7761d967-0a1f-4e88-ad34-4ad5ce416735}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bValid := TRUE;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="mJobPause" Id="{7eb46286-2488-433d-8cdd-400aef51086a}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mJobPause
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStart" Id="{e393908f-23a1-4595-a465-2cf3c9f6001e}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mJobStart
VAR_INPUT
	sJobDef	: CalmarCompPrint.I_JobDefinition;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF sJobDef = 0 THEN LogError('JobStart: no sJobDef given'); RETURN; END_IF

iJobDefinition := sJobDef;    // current job definition
fSheetLength := iJobDefinition.fSubstrateDepth;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStop" Id="{d8356075-2335-4b08-acc5-155ab282c68f}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mJobStop
VAR_INPUT
	sStatus	: CalmarCompPrint.I_JobStatus;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[iJobDefinition := 0;    // delete job definition]]></ST>
      </Implementation>
    </Method>
    <Method Name="mProduced" Id="{fe7716e6-798e-41d7-838b-f7b407401b42}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD mProduced
VAR_INPUT
	(* current progress*)
	sProgress	: CalmarCompPrint.I_JobProgress;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[; // nothing to do]]></ST>
      </Implementation>
    </Method>
    <Property Name="nStartPositionX0" Id="{6b27a535-635b-4868-a381-d2f4a2a26ba0}" FolderPath="I_StartPosDetect\">
      <Declaration><![CDATA[(*
  Detected start position X0 (absolute) in [SubPx].
*)
PROPERTY nStartPositionX0 : DINT
]]></Declaration>
      <Get Name="Get" Id="{1b86c0b7-703e-4025-917d-2f98f1c0050d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nStartPositionX0 := _nStartPosX0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="SimEnter" Id="{5f3afcf0-45e7-43f3-b7fa-173569233158}" FolderPath="I_Sim\">
      <Declaration><![CDATA[METHOD SimEnter : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogInfo('Enter start position creator simulation');
_bSim := TRUE;

_nStartPosX0 := lPosition;
nSheetEndPosition := lPosition;
nNextSheetPosition := lPosition;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SimExit" Id="{48b25644-8173-4c12-af95-8aee36151a4f}" FolderPath="I_Sim\">
      <Declaration><![CDATA[METHOD SimExit : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogInfo('Exit start position creator simulation');
_bSim := FALSE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_StartPositionDummy">
      <LineId Id="709" Count="1" />
      <LineId Id="818" Count="0" />
      <LineId Id="711" Count="0" />
      <LineId Id="783" Count="0" />
      <LineId Id="869" Count="0" />
      <LineId Id="871" Count="0" />
      <LineId Id="874" Count="0" />
      <LineId Id="872" Count="1" />
      <LineId Id="809" Count="0" />
      <LineId Id="756" Count="0" />
      <LineId Id="716" Count="0" />
      <LineId Id="807" Count="0" />
      <LineId Id="817" Count="0" />
      <LineId Id="762" Count="0" />
      <LineId Id="758" Count="0" />
      <LineId Id="812" Count="0" />
      <LineId Id="810" Count="0" />
      <LineId Id="764" Count="0" />
      <LineId Id="757" Count="0" />
      <LineId Id="766" Count="0" />
      <LineId Id="820" Count="1" />
      <LineId Id="765" Count="0" />
      <LineId Id="730" Count="3" />
      <LineId Id="808" Count="0" />
      <LineId Id="806" Count="0" />
      <LineId Id="734" Count="8" />
      <LineId Id="745" Count="2" />
      <LineId Id="751" Count="0" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.bSimEnable.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.bSimEnable.Set">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.bStartTrig.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.bValid.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.mJobPause">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.mJobStart">
      <LineId Id="8" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.mJobStop">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.mProduced">
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.nStartPositionX0.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.SimEnter">
      <LineId Id="4" Count="1" />
      <LineId Id="10" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_StartPositionDummy.SimExit">
      <LineId Id="4" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>