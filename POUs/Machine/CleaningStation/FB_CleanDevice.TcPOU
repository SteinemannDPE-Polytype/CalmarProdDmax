<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_CleanDevice" Id="{c2d943b8-8d2b-4d04-828a-f3c87137daad}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CleanDevice EXTENDS FB_MachineBase IMPLEMENTS I_CleanDevice
(*************************************************************************************************)
(*  FILENAME:    FB_CleanDevice                                                                  *)
(*  PROJECT:     CALMAR PUPLC                                                                    *)
(*  COPYRIGHT:   All rights reserved (c) Polytype AG, Fribourg/Switzerland (2020)                *)
(*  ENVIRONMENT: TwinCAT PLC                                                                     *)
(*  VERSION:     <version>                                                                       *)
(*************************************************************************************************)
(*  DESCRIPTION:                                                                   <description> *)
(*    add description                                                                            *)
(*                                                                                </description> *)
(*************************************************************************************************)

VAR_INPUT
END_VAR

VAR_OUTPUT
END_VAR

VAR
  bL_Busy      : BOOL;  (*The axis is executing the step of a command*)
  bL_AbortReq  : BOOL;  (*Abort requested*)
  bL_Ready     : BOOL;  (*The axis is ready for a new command*)
  bL_Error     : BOOL;  (*The axis has an error*)
  bL_RefKnown  : BOOL;  (*The axis is initialized*)
  sL_CleanMode : EN_Cleaning_OP;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="mAbort" Id="{dc1e3a83-7211-4ed9-b2df-e8f12a191e29}">
      <Declaration><![CDATA[METHOD mAbort : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Reset abort only when not in NOP
IF NOT (sL_CleanMode = eNOP) THEN
  bL_AbortReq := TRUE;
END_IF;

mAbort := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mAckError" Id="{0446b15c-cbcd-4611-9bb9-d9ccccc08fee}">
      <Declaration><![CDATA[METHOD mAckError 
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bL_Error := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mCapping" Id="{f0cc4b21-be62-44bd-88d7-23438c4c789c}">
      <Declaration><![CDATA[METHOD mCapping : BOOL
VAR_INPUT
  iI_Step    : INT;
  bI_ExitCap : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[; //Implement in subclass

//Required feedback:
//busy => Set when step active, reset when step done
//ready => Set when operation done, reset when operation in progress

(*
CASE iI_Step OF
  0: //Init - Check if axis is not activated, restore safety
    bL_Busy := FALSE;

  1: //Move X axis to outside position
    bL_Busy := FALSE;

  2: //Move Z axis to lift position
    bL_Busy := FALSE;

  3: //End - Do nothing, capping process active
    bL_Busy := FALSE;

  ELSE
    bL_Busy := FALSE;		
END_CASE
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="mCleaning" Id="{a721104d-8500-4be9-ae14-27b866eb5f15}">
      <Declaration><![CDATA[METHOD mCleaning : BOOL
VAR_INPUT
  iI_Step : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[; //Implement in subclass

//Required feedback:
//busy => Set when step active, reset when step done
//ready => Set when operation done, reset when operation in progress

(*
CASE iI_Step OF
  0: //Init - Check if axis is not activated, restore safety
    bL_Busy := FALSE;

  1: //Move X axis to outside position
    bL_Busy := FALSE;
    
  2: //Move Z axis to lift position
    bL_Busy := FALSE;
    
  3: //Ensure Y axis is at starting position
    bL_Busy := FALSE;
    
  4: //Move Y axis to clean start position
    bL_Busy := FALSE;

  5: //Wait until cleaning equipment ready
    bL_Busy := FALSE;
    
  6: //Cleaning, Y axis move
    bL_Busy := FALSE;
    
  7: //Wait until cleaning equipment ready
    bL_Busy := FALSE;
    
  8: //Move Y axis to end position
    bL_Busy := FALSE;
    
  9: //Move Z axis to lower position
    bL_Busy := FALSE;
  
  10: //Move Y axis back to start 
    bL_Busy := FALSE;

  11: //End
    bL_Busy := FALSE;
  
  ELSE
    bL_Busy := FALSE;    
END_CASE
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="mErrorRecovery" Id="{3d52db04-6f39-4ae1-b4c7-ecc24ca677c7}">
      <Declaration><![CDATA[METHOD mErrorRecovery : BOOL
VAR_INPUT
    iI_Step : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Do nothing
bL_Busy := FALSE;
bL_Ready := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mInit" Id="{c01fcb1d-5386-4e9a-8583-0f9ff59ca620}">
      <Declaration><![CDATA[METHOD mInit
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bL_RefKnown := FALSE;
bL_AbortReq := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mOperation" Id="{7edd8ae7-41ce-4bcd-a62c-b49c691d3a66}">
      <Declaration><![CDATA[METHOD mOperation : BOOL
VAR_INPUT
  iI_Step : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[bL_Ready := FALSE;
CASE sL_CleanMode OF
	eOPSTARTUP:
		mStartup(iI_Step);

	eOPCAPENTER:
		mCapping(iI_Step, bI_ExitCap := FALSE);
		
	eOPCAPEXIT:
		mCapping(iI_Step, bI_ExitCap := TRUE);
		
	eOPCLEAN:
		mCleaning(iI_Step);
		
	eOPPREPSERVICE:
		mService(iI_Step);
		
	eOPGOTOPROD:
		mProduction(iI_Step);
    
  eOPEXITERROR:
    mErrorRecovery(iI_Step);
		
	//Add more	
		
	ELSE
		bL_Ready := TRUE;
END_CASE

]]></ST>
      </Implementation>
    </Method>
    <Method Name="mProduction" Id="{87e20b9d-631a-421d-83e0-bedae5b1ac00}">
      <Declaration><![CDATA[METHOD mProduction : BOOL
VAR_INPUT
  iI_Step : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[; //Implement in subclass

//Required feedback:
//busy => Set when step active, reset when step done
//ready => Set when operation done, reset when operation in progress

(*
CASE iI_Step OF
  0: //Init - Check if axis is not activated, restore safety
    bL_Busy := FALSE;

  1: //Move Z axis to lower position
    bL_Busy := FALSE;

  2: //Move X axis to inside position
    bL_Busy := FALSE;

  3: //Begin - Do nothing, production active
    bL_Busy := FALSE;

  ELSE
    bL_Busy := FALSE;		
END_CASE
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="mService" Id="{821eecdf-c31e-4095-bedf-d22c2210f035}">
      <Declaration><![CDATA[METHOD mService : BOOL
VAR_INPUT
  iI_Step : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[; //Implement in subclass

//Required feedback:
//busy => Set when step active, reset when step done
//ready => Set when operation done, reset when operation in progress

(*
CASE iI_Step OF
  0: //Init - Check if axis is not activated, restore safety
    bL_Busy := FALSE;

  1: //Move X axis to ouside position
    bL_Busy := FALSE;

  2: //Move Z axis to lower position
    bL_Busy := FALSE;

  3: //Begin - Do nothing, service active
    bL_Busy := FALSE;

  4: //End
    bL_Busy := FALSE;

  ELSE
    bL_Busy := FALSE;		
END_CASE
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="mSetMode" Id="{41a26320-8097-4533-bf1f-e59f19c46c99}">
      <Declaration><![CDATA[METHOD mSetMode : BOOL
VAR_INPUT
  sI_CleanMode : EN_CLEANING_OP;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[sL_CleanMode := sI_CleanMode;

//Reset abort request as soon as NOP
IF sL_CleanMode = eNOP THEN
  bL_AbortReq := FALSE;
END_IF;


mSetMode := TRUE; //By default all modes supported]]></ST>
      </Implementation>
    </Method>
    <Method Name="mStartup" Id="{4b2b468a-7df7-4c1e-86ab-5f53984bccce}">
      <Declaration><![CDATA[METHOD mStartup : BOOL
VAR_INPUT
  iI_Step : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Default startup action - do nothing
bL_RefKnown := TRUE;
bL_Busy     := NOT bL_RefKnown;
bL_Ready    := bL_RefKnown;
bL_AbortReq := FALSE;

(*
CASE iI_Step OF
  0: //Init - Check if axis is not activated, restore safety
    bL_Busy := FALSE;

  1: //Move X axis to outside position
    bL_Busy := FALSE;

  2: //Move Z axis to lift position
    bL_Busy := FALSE;

  3: //Begin - Init axis if NOT bL_RefKnown
    bL_Busy := FALSE;

  4: //End
    bL_Busy := FALSE;		

  ELSE
    bL_Busy := FALSE;		
END_CASE
*)]]></ST>
      </Implementation>
    </Method>
    <Property Name="sStatus" Id="{848ff9c4-d3f8-46db-9f18-2e55f5a3d38d}">
      <Declaration><![CDATA[PROPERTY sStatus : ST_CLEANING_DEV_STATUS
]]></Declaration>
      <Get Name="Get" Id="{faddea57-8961-4373-92cb-18e5105fe5ef}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[sStatus.bBusy     := bL_Busy;
sStatus.bReady    := bL_Ready; 
sStatus.bError    := bL_Error;
sStatus.bRefKnown := bL_RefKnown;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_CleanDevice">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleanDevice.mAbort">
      <LineId Id="3" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleanDevice.mAckError">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleanDevice.mCapping">
      <LineId Id="18" Count="22" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleanDevice.mCleaning">
      <LineId Id="18" Count="46" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleanDevice.mErrorRecovery">
      <LineId Id="3" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleanDevice.mInit">
      <LineId Id="9" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleanDevice.mOperation">
      <LineId Id="53" Count="7" />
      <LineId Id="83" Count="2" />
      <LineId Id="61" Count="17" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleanDevice.mProduction">
      <LineId Id="18" Count="22" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleanDevice.mService">
      <LineId Id="18" Count="25" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleanDevice.mSetMode">
      <LineId Id="14" Count="7" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleanDevice.mStartup">
      <LineId Id="14" Count="25" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CleanDevice.sStatus.Get">
      <LineId Id="5" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>