<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_MarkCamera_WEU" Id="{afee498a-a574-4419-ba71-cf35979d8699}" SpecialFunc="None">
    <Declaration><![CDATA[(*
  Mark camera system on WEU machine
  1 mark sensor (optional: reverse mode - roll printed in reversed direction, sensor moved to other side)
*)
FUNCTION_BLOCK FB_MarkCamera_WEU EXTENDS FB_CameraBase
VAR_INPUT
  bReadyForPrinting             : BOOL;     // 
  nCurrentPosition              : DINT;     // current print postion
  fCurrentSpeed                 : LREAL;    // current print speed
  bPrintMarkExist               : BOOL;     // [from machine] print mark existing
  bPrintDirReverse              : BOOL;     // [from machine] print substrate in reverse direction
  nUsePerRepeatInLine           : UDINT;    // [from machine] use per repeat
  fMarkSizeDefault              : LREAL;    // mark size "a" [m]
  fMarkDistRepeatToStartMark    : LREAL;    // mark distance from repeat to start mark [m]
  fMarkDistFromCenter           : LREAL;    // mark distance from center [m]
END_VAR
VAR
  fbMarkDefinition   : FB_MarkDefinition;   // mark definition instance (used by MarkDetection)
  fbMarkDetection    : FB_MarkDetection;    // StartPosTrigger, CameraTrigger and MarkDetection (Mark handler for MarkCamera)
  
  // teach info
  _bTeachOk                     : BOOL;
  _nTeachedPoints               : UDINT;
  _nDetectedMarks               : UDINT;
  
  // status
  _bTeachError                  : BOOL;     // teach was not successful
  _bImageLengthError            : BOOL;     // invalid image/repeat length
  _bMarkDefinitionError         : BOOL;     // invalid mark definition
END_VAR
VAR CONSTANT
  fC_MinImageLength : LREAL := 0.05;  // minimal "repeat" length
END_VAR
VAR PERSISTENT
  eMarkMode     : E_MarkMode := E_MarkMode.AutoDefault;   // mark generation/detection mode
  bMarkInverted : BOOL;             // mark triangle are flipped on x axis
  nUsePerRepeat : UDINT := 4;       // number of "use" per repeat
  fMarkSpec_a   : LREAL := 0.005;   // mark spec a [m] - mark width
  fMarkSpec_b   : LREAL := 0.005;   // mark spec b [m] - (optional) triangle length
  fMarkSpec_c   : LREAL := 0.005;   // mark spec c [m] - start mark distance to 0
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT _bInitialized THEN RETURN; END_IF

// The detection work is done in FB_MarkDetection
// This FB just uses(receives) the marks from the external implementation
// - Receives events CamTrigger & CamTriggerDone from MarkDetection
// - Get current marks and send them to the iCameraSink
fbMarkDetection.bSimEnable := _bSimulate;
IF _bSimulate THEN sim_update(); END_IF

fbMarkDetection(
  bEnable:=bReadyForPrinting,
  bAutomaticMode:=TRUE,
  nCurrentPos:=nCurrentPosition,
  fCurrentSpeed:=fCurrentSpeed
);

_bTeachOk := (fbMarkDefinition.nMarks > 0);
_nTeachedPoints := fbMarkDefinition.nMarks;
_nDetectedMarks := fbMarkDefinition.nMarksDetected;

IF nUsePerRepeatInLine <> nUsePerRepeat THEN nUsePerRepeat := nUsePerRepeatInLine; END_IF

IF _bCamTriggerStarted THEN sendCamPoints(); END_IF

fbMarkDefinition.update_view();]]></ST>
    </Implementation>
    <Folder Name="Errors" Id="{a01e90ed-adf1-4c3e-a3f6-2cabd0d609d0}" />
    <Folder Name="I_CameraTriggerDevice" Id="{4773bc35-df63-4cfd-9fcd-8027e8678bf9}" />
    <Method Name="ackErrors" Id="{6d381463-10c6-4dda-a89c-e8be47d736f9}" FolderPath="Errors\">
      <Declaration><![CDATA[METHOD ackErrors
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_bTeachError := FALSE;
_bImageLengthError := FALSE;
_bMarkDefinitionError := FALSE;

fbMarkDetection.ackErrors();]]></ST>
      </Implementation>
    </Method>
    <Property Name="bImageLengthInvalid" Id="{8ce60234-4f56-4d8f-b2aa-0e2e0adae3b0}" FolderPath="Errors\">
      <Declaration><![CDATA[PROPERTY bImageLengthInvalid : BOOL]]></Declaration>
      <Get Name="Get" Id="{ca2b44a6-2f71-42bc-8246-d8f9916a6bd7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bImageLengthInvalid := _bImageLengthError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bMarkDetectionErrors" Id="{7a1a4e25-3606-442c-80f7-39054a32690e}" FolderPath="Errors\">
      <Declaration><![CDATA[PROPERTY bMarkDetectionErrors : BOOL]]></Declaration>
      <Get Name="Get" Id="{bf74de13-e67d-409d-a425-e80bf20f310d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bMarkDetectionErrors := fbMarkDetection._bMarkDetectionErrors;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bMissingMarks" Id="{16c4d983-afb9-47fc-b3a0-43e8b8f856f1}" FolderPath="Errors\">
      <Declaration><![CDATA[PROPERTY bMissingMarks : BOOL]]></Declaration>
      <Get Name="Get" Id="{bfdb3c45-61da-45e4-90ca-803c164e5fdf}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bMissingMarks := fbMarkDetection._bMissingMarks;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bTeachError" Id="{d32145c6-71bd-404c-9468-3a12da2d9f73}" FolderPath="Errors\">
      <Declaration><![CDATA[PROPERTY bTeachError : BOOL]]></Declaration>
      <Get Name="Get" Id="{b090c8ba-d759-47b7-a0ca-23e6705d2988}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bTeachError := _bTeachError;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CamTriggerDone" Id="{d41794c6-1f76-436d-8466-03ff8773ac59}" FolderPath="I_CameraTriggerDevice\">
      <Declaration><![CDATA[METHOD CamTriggerDone
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _bInitialized THEN RETURN; END_IF

// stream lasting points to Worker Camera
IF _bCamTriggerStarted THEN
  sendCamPoints();
END_IF

SUPER^.CamTriggerDone();]]></ST>
      </Implementation>
    </Method>
    <Property Name="eCameraMode" Id="{b022aee1-cf4c-4fcc-81a5-0dbe1bef2090}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY eCameraMode : E_CameraMode
]]></Declaration>
      <Get Name="Get" Id="{bf30cebf-f837-493d-a842-a0d56f30c0ad}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eCameraMode := _eCameraMode;
IF _eCameraMode = E_CameraMode.Auto THEN
  eCameraMode := E_CameraMode.Live;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="eDeviceType" Id="{84e5cd81-ce1f-4baf-9ea0-b8044b8893cd}">
      <Declaration><![CDATA[PROPERTY eDeviceType : E_CameraDevice]]></Declaration>
      <Get Name="Get" Id="{63d06dd5-4d22-4f3f-a574-84fddd78ad77}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eDeviceType := E_CameraDevice.PrintMark;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="GetCamStatus" Id="{38e7ce1d-c905-4dcd-bcee-13c392fb6b4e}">
      <Declaration><![CDATA[METHOD GetCamStatus : BOOL
VAR_OUTPUT
  bConnectionOK  : BOOL;    // Camera connected
  bTeachOk       : BOOL;    // Teach successful
  nTeachedPoints : UDINT;   // Teached points for this job
  nScannedPoints : UDINT;   // Scanned points on current sheet
  bCamStarted    : BOOL;    // Camera trigger is active, cam started
  bCamDone       : BOOL;    // Camera finished on last CT
  bErrors        : ARRAY[1..GVL_Camera.nC_NbCamErrors] OF BOOL;  // generic error flag list
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bConnectionOK  := TRUE;
bTeachOk       := _bTeachOk;
nTeachedPoints := _nTeachedPoints;
nScannedPoints := _nRxCamPoints;
bCamStarted    := _bCamTriggerStarted;
bCamDone       := _bCamTriggerDone;

GetCamStatus := bConnectionOK AND bTeachOk;   // camera ready]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitMarkCamera" Id="{51f51649-6984-44e8-9e66-86e2adb32565}">
      <Declaration><![CDATA[METHOD InitMarkCamera
VAR_INPUT
  fPrintUnitResolution         : LREAL;    (*printhead pixel resolution [dpi]*)
  fPrintUnitSubPx              : LREAL;    (*print unit subPixel resolution [SubPx]*)
END_VAR
VAR
  bOK : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Init( 
  nPrintUnitResolution      := TO_UDINT(fPrintUnitResolution),
  nPrintUnitSubPx           := TO_UDINT(fPrintUnitSubPx), 
  iCameraTrigger            := fbMarkDetection, 
  bUseCameraTrigger         := FALSE, 
  bUseCameraTriggerFeedback := FALSE
);


IF NOT _bInitialized THEN LogError('Init: invalid parameter'); RETURN; END_IF

// -- Mark definition handler
fbMarkDefinition.Init();

// -- Mark detection handler
fbMarkDetection.Init(
  fPrintResolution:=fPrintUnitResolution, 
  fSubPxResolution:=fPrintUnitSubPx, 
  pFbMarkDefinition:=ADR(fbMarkDefinition)
);

_bInitialized := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStart" Id="{eb0884e6-0b51-420a-ab81-2fa58f38387d}">
      <Declaration><![CDATA[METHOD mJobStart : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[// parameter checks
IF fImageLength < fC_MinImageLength THEN _bImageLengthError:=TRUE; LogError('JobStart: Repeat length (ImageLength) too small'); END_IF

// mark mode selection based on machine configuration
// No marks => None
// With marks => use AutoDefault or the special mark selected prior in ui
IF NOT bPrintMarkExist THEN 
  LogLvl(Lvl:=E_LogSeverity.Detail, Msg:='JobStart: No Marks exist, use None/Sim mode');
  eMarkMode := E_MarkMode.None;
ELSE
  IF eMarkMode = E_MarkMode.None THEN 
    eMarkMode := E_MarkMode.AutoDefault; 
  END_IF
END_IF

// get mark definition
fMarkSpec_a := fMarkSizeDefault;
fMarkSpec_c := fMarkDistRepeatToStartMark;
//fMarkSpec_b := ;

IF fMarkSpec_a = 0 THEN _bMarkDefinitionError := TRUE; LogError(F_Concat2('JobStart: MarkLength invalid "a"=', TO_STRING(fMarkSpec_a))); END_IF
IF eMarkMode = E_MarkMode.OneTriangle AND fMarkSpec_b = 0 THEN _bMarkDefinitionError := TRUE; LogError(F_Concat2('JobStart: MarkLength invalid "c"=', TO_STRING(fMarkSpec_c))); END_IF

// Teach marks based on job and configuration
IF eCameraMode <> E_CameraMode.NoCorrection THEN
  _bTeachError := NOT fbMarkDefinition.TeachMarks(
    fImageLength:=fImageLength, 
    fImageWidth:=fImageWidth, 
    eMarkMode:=eMarkMode,
    a:=fMarkSpec_a,
    b:=fMarkSpec_b,
    c:=fMarkSpec_c,
    nUses:=nUsePerRepeat,
    bMarkInverted:=bMarkInverted
  );
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="pFbMarkDefinition" Id="{7c064055-0d1a-4195-ad1f-3f4c34609c08}">
      <Declaration><![CDATA[PROPERTY pFbMarkDefinition : POINTER TO FB_MarkDefinition]]></Declaration>
      <Get Name="Get" Id="{6e9035d1-f48d-4704-82b2-6002f7c8f9a3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[pFbMarkDefinition := ADR(fbMarkDefinition);]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="sendCamPoints" Id="{79d0c237-9754-4336-866d-7de126f506b7}">
      <Declaration><![CDATA[// stream already detected cam points to sink.
METHOD PRIVATE sendCamPoints
VAR
  i : UDINT;
  pMark : POINTER TO ST_MarkDefinition;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[WHILE _nRxCamPoints < fbMarkDefinition.nMarksDetected DO
  
  pMark := fbMarkDefinition.getMark(nIdx:=TO_DINT(_nRxCamPoints+1));
  IF pMark <> 0 THEN
    // Send Mark (CamPoint) to CameraSink
    stCamPoint.x_ref := F_MeterToSubPixelReal(  fPosMeter:=pMark^.fPosX                                 (*[m]*)
                                              , fResoSubPx:=UDINT_TO_LREAL(_nPrintUnitResolution));     (*Result should be in pixels*)
    stCamPoint.y_ref := F_MeterToSubPixelReal( fPosMeter:=pMark^.fPosY                                  (*[m]*)
                                              , fResoSubPx:=UDINT_TO_LREAL(_nPrintUnitResolution));     (*Result should be in pixels*)
    stCamPoint.dx    := F_MeterToSubPixelReal( fPosMeter:=pMark^.sState.dx                              (*[m]*)
                                              , fResoSubPx:=UDINT_TO_LREAL(_nPrintUnitResolution));     (*Result should be in pixels*)
    stCamPoint.dy    := F_MeterToSubPixelReal( fPosMeter:=pMark^.sState.dy                              (*[m]*)
                                              , fResoSubPx:=UDINT_TO_LREAL(_nPrintUnitResolution));     (*Result should be in pixels*)
    stCamPoint.valid := pMark^.sState.bSet;
  
    IF _iCameraSink <> 0 THEN
      _iCameraSink.AddCamPoint(sDeformationPoint:=stCamPoint);
    END_IF
  ELSE
    LogWarning(F_Concat2('Requested mark not found, mark Idx=', TO_STRING(_nRxCamPoints+1)));
  END_IF
  
  _nRxCamPoints := _nRxCamPoints + 1;   // next mark
END_WHILE]]></ST>
      </Implementation>
    </Method>
    <Method Name="setCameraMode" Id="{54a34304-23e4-4c00-9f45-c8cea9937ff8}">
      <Declaration><![CDATA[(*
  Set mode to camera.
  :return: TRUE if success
*)
METHOD setCameraMode : BOOL
VAR_INPUT
  eCameraMode : E_CameraMode;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eCameraMode = E_CameraMode.Auto OR
   eCameraMode = E_CameraMode.NoCorrection OR
   eCameraMode = E_CameraMode.Live
   //eCameraMode = E_CameraMode.Trend 
THEN
   
  _eCameraMode := eCameraMode;  // set desired mode
  setCameraMode := TRUE;
ELSE
  LogError(F_Concat3('Camera mode=', TO_STRING(eCameraMode), ' not supported by camera'));
  _eCameraMode := E_CameraMode.NoCorrection;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="sim_update" Id="{63e89f21-21b3-46ae-aa39-a62ec4b9499b}">
      <Declaration><![CDATA[METHOD PRIVATE sim_update]]></Declaration>
      <Implementation>
        <ST><![CDATA[// nothing]]></ST>
      </Implementation>
    </Method>
    <Property Name="sName" Id="{26af1a37-4820-4145-8569-298bb52be617}">
      <Declaration><![CDATA[{attribute 'monitoring':='variable'}
PROPERTY sName : STRING
]]></Declaration>
      <Get Name="Get" Id="{7cd4e3ff-8058-40ee-b02a-2b43197c6b96}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sName := 'Printmarks';]]></ST>
        </Implementation>
      </Get>
    </Property>
    <LineIds Name="FB_MarkCamera_WEU">
      <LineId Id="885" Count="5" />
      <LineId Id="948" Count="1" />
      <LineId Id="1118" Count="5" />
      <LineId Id="1116" Count="0" />
      <LineId Id="940" Count="0" />
      <LineId Id="1040" Count="1" />
      <LineId Id="1080" Count="0" />
      <LineId Id="1082" Count="0" />
      <LineId Id="1078" Count="0" />
      <LineId Id="927" Count="0" />
      <LineId Id="926" Count="0" />
      <LineId Id="1006" Count="0" />
      <LineId Id="974" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.ackErrors">
      <LineId Id="9" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.bImageLengthInvalid.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.bMarkDetectionErrors.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.bMissingMarks.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.bTeachError.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.CamTriggerDone">
      <LineId Id="22" Count="0" />
      <LineId Id="39" Count="3" />
      <LineId Id="38" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.eCameraMode.Get">
      <LineId Id="13" Count="2" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.eDeviceType.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.GetCamStatus">
      <LineId Id="19" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="4" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="28" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.InitMarkCamera">
      <LineId Id="79" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="127" Count="4" />
      <LineId Id="78" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="106" Count="1" />
      <LineId Id="96" Count="0" />
      <LineId Id="116" Count="1" />
      <LineId Id="121" Count="4" />
      <LineId Id="85" Count="0" />
      <LineId Id="38" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.mJobStart">
      <LineId Id="60" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="54" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="61" Count="3" />
      <LineId Id="57" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="42" Count="6" />
      <LineId Id="53" Count="0" />
      <LineId Id="49" Count="3" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.pFbMarkDefinition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.sendCamPoints">
      <LineId Id="47" Count="0" />
      <LineId Id="7" Count="16" />
      <LineId Id="41" Count="1" />
      <LineId Id="26" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.setCameraMode">
      <LineId Id="53" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.sim_update">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_MarkCamera_WEU.sName.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>