<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_WorkerDefGrid" Id="{ec3f04b6-f22a-4a73-9fd6-d551c3304c16}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ABSTRACT FB_WorkerDefGrid EXTENDS FB_Worker
VAR_OUTPUT
  bError        : BOOL;       // an error is active
  nError        : UDINT;      // error code if error active, =0 else
END_VAR
VAR
  // config
  _iWorkerParams    : I_WorkerParams;
  _pMsgConfigExt    : POINTER TO ST_MSG_CONFIG;        // external message config (puc message interface)
  _nTrackPosDomain  : E_PosDomain;    // Tracking position domain 
  _fPrintResolution : LREAL := 1;     // print(head) resolution in [dpi]
  _fSubPxResolution : LREAL := 1;     // SubPixel resolution [SubPx], resolution factor (fI_PrintResolution*fI_SubPxResolution=>Output resolution
  _name             : STRING;         // Worker name
  _sVisuName        : STRING := 'VISU_WorkerDefGrid'; // Worker visu instance name
  _pEcSrc           : POINTER TO T_ErrSrc;       // Error source definition

  // job
  _bJobActive       : BOOL;           // a job is active
  // ct
  _bAttached        : BOOL;           // one ct is attached
  _pAttachedCt      : POINTER TO FB_ContainerDefGrid;  // currently attached container (Head)
  _bSupportParallelCT : BOOL := FALSE;  // support for parallel CTs (else avoid attach while one connected).
  _nAttachedCTs     : UDINT;          // Number of currently attached CTs
  _pAttachedCTList  : ARRAY[nLowerIndexCTList..nUpperIndexCTList] OF POINTER TO FB_ContainerDefGrid;

  fCtPosition       : LREAL;          // Container position relative to worker position in [SubPx (E_PosDomain.master_pos)]
  _bForceRelease    : BOOL;

END_VAR
VAR_STAT
  // static variables, same for all Workers
  _fCtSecurityReleasePos : LREAL := 0;// [SubPx] position where to release current ct at last (security release)
END_VAR
VAR PERSISTENT
  _fWorkerPosition  : LREAL;          // worker position relative to X0 in [m]
END_VAR
VAR CONSTANT
  fC_MaxSheetLengthExtension : LREAL := 0.20;  // Max. distance after given ImageLength to do security release of CT
  // list size
  nLowerIndexCTList : UDINT := 1;
  nUpperIndexCTList : UDINT := 4; 
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="CTList" Id="{8b3e6e49-2ffc-4cad-96ea-0e5e1e9c12fb}" />
    <Folder Name="I_PrintStatusClient" Id="{522437a3-298d-4e2e-9ebe-709d3e172129}" />
    <Method Name="Abort" Id="{f8718905-c76d-49a9-949e-6da2bac3e031}">
      <Declaration><![CDATA[(*
  Generic abort implementation of DefGrid CT.
*)
METHOD Abort
VAR_INPUT
  iCT       : I_CT;
  sReason   : STRING;
END_VAR
VAR
  _pCt   : POINTER TO FB_ContainerDefGrid;
  eStep     : E_DeformationStep;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF getCtInst(iCT:=iCT, pCT=>_pCt) <> 0 THEN  // get specific container
  
  // Do generic known aborts on CT
  // - Deformation
  _pCt^.getDeformationStatus(eDStep=>eStep);
  IF eStep >= E_DeformationStep.nothing THEN
    _pCt^.AbortDeformation(sReason:=sReason, Src:=_pEcSrc^);
	END_IF
  
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Attach" Id="{6e998c00-d198-4ad0-b5d5-92dbb9b30114}">
      <Declaration><![CDATA[METHOD PROTECTED  Attach : BOOL
VAR_INPUT
  iCT       : I_CT;            (*container at triggered event position*)
END_VAR
VAR
  i : UDINT;
  pNewCt   : POINTER TO FB_ContainerDefGrid;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Attach := FALSE;

IF iCT = 0 THEN
  LogError(Msg:='attach failed -> not ct given');
  
ELSIF bWorkerEnable THEN  // worker enabled
  
  IF getCtInst(iCT:=iCT, pCT=>pNewCt) <> 0 THEN    // get specific container
    // add to list ()
    IF push(pNewCT:=pNewCt) THEN 
      LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=F_Concat4('Attach CT[', TO_STRING(_nAttachedCTs), ']: ', pNewCt^.print(0)));
      Attach:=TRUE;                                 // attach new
    END_IF
  ELSE
    LogError(Msg:='attach failed: could not get CT instance');
  END_IF

ELSIF NOT bWorkerEnable AND _nAttachedCTs > 0 THEN // disabled and already a CT attached
  // force release all attached CT, and ignore attach
  LogLvl(Lvl:=E_LogSeverity.Debug, Msg:='Worker disabled flush list of all attached CT');
  WHILE _nAttachedCTs > 0 DO
    Release(iCT:=_pAttachedCt^);
	END_WHILE

ELSIF NOT bWorkerEnable AND _pAttachedCt = 0 THEN  
  ;   // nothing to do, ignore attach

ELSE      // unspecified (error)case just log it
  LogError(Msg:='not tracked case');
END_IF


// ok to attach
]]></ST>
      </Implementation>
    </Method>
    <Property Name="bAttached" Id="{2e8c8130-f685-40b1-adbf-abe31d58117b}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY bAttached : BOOL]]></Declaration>
      <Get Name="Get" Id="{02ef1e0c-6e3d-4b78-a33e-9b7da2b704a6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bAttached := _bAttached;
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="fPosition" Id="{9e6d5cd4-bcef-45e7-9eee-8ae16a558520}">
      <Declaration><![CDATA[{attribute 'monitoring':='call'}
PROPERTY fPosition : LREAL]]></Declaration>
      <Get Name="Get" Id="{1b62f39a-72fb-46df-8d2d-82b64e6e95db}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fPosition := _fWorkerPosition;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c5124a02-dd31-4a8c-a934-986e277cf211}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fWorkerPosition := fPosition;
setupPosition();]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="getCtInst" Id="{97cf106b-4be9-4376-a613-0f240f49b306}">
      <Declaration><![CDATA[(*
  Get specific container from interface.
  Returns specific container in return value and output parameter.
*)
METHOD INTERNAL getCtInst : POINTER TO FB_ContainerDefGrid
VAR_INPUT
  iCT              : I_CT;                         (*container at triggered event position*)
END_VAR
VAR_OUTPUT
  pCT              : POINTER TO FB_ContainerDefGrid;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitialized THEN RETURN; END_IF

pCT := 0;
IF _iWorkerParams.pCTManager <> 0 THEN
  getCtInst := _iWorkerParams.pCTManager^.GetContainerInstance(iCT);   // get real ct fb inst
  IF getCtInst <> 0 THEN
    pCT := getCtInst;   // OK all good
  ELSE
    LogError(Msg:='specific container not found');
	END_IF
ELSE
  LogError(Msg:='no container manager');
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{9892d34e-806e-432a-b876-226a7f31ec11}">
      <Declaration><![CDATA[METHOD Init
VAR_INPUT
  iWorkerParams : I_WorkerParams;
  pMsgConfig : POINTER TO ST_MSG_CONFIG;         // message config
  fPrintResolution : LREAL := 1;                 // print(head) resolution in [dpi]
  fSubPxResolution : LREAL := 1;                 // SubPixel resolution [SubPx], resolution factor (fI_PrintResolution*fI_SubPxResolution=>Output resolution)
  bParallelCT : BOOL;                            // Support parallel processing of CTs
END_VAR
VAR
  pCTM : POINTER TO FB_CTManagerDefGrid;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_bAttached := 0;
_pAttachedCt := 0;

IF iWorkerParams = 0 OR_ELSE iWorkerParams.pCTManager = 0 THEN
  LogError(Msg:='Init: invalid parameter');
  RETURN;
END_IF

// save config
_iWorkerParams := iWorkerParams;
_pMsgConfigExt := pMsgConfig;
_fPrintResolution := fPrintResolution;
_fSubPxResolution := fSubPxResolution;
_fCtSecurityReleasePos := 0;
_bSupportParallelCT := bParallelCT;
setupPosition();

setName('');

// register worker CTManager/Tracker event subject
_nTrackPosDomain := E_PosDomain.master_pos;
_iWorkerParams.pCTManager^.RegisterPosition(nPosDomain:=_nTrackPosDomain, iPositionEvent:=THIS^);

// init error source reference
_pEcSrc := ErrorCodes.fbErrCodeMngr.registerErrSource(
 nLocId := 0,
 aInstPath := InstanceName,
 aLocDescr := _name
);
IF _pEcSrc = 0 THEN LogError('could not register error source'); END_IF

bInitialized := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStart" Id="{2edcddcb-d5cc-4bb1-81a9-c6fb86b8259f}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD ABSTRACT mJobStart
VAR_INPUT
	sJobDef	: CalmarCompPrint.I_JobDefinition;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStop" Id="{440aa514-bfaa-418c-8033-255390b9e116}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD ABSTRACT mJobStop
VAR_INPUT
	sStatus	: CalmarCompPrint.I_JobStatus;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="pull" Id="{5e0f29fc-a1aa-456a-98f0-78a2b334b213}" FolderPath="CTList\">
      <Declaration><![CDATA[METHOD PRIVATE pull : BOOL
VAR_INPUT
  pRemCT : POINTER TO FB_ContainerDefGrid;
END_VAR
VAR_OUTPUT
  nRemIndex : UDINT := 0;
END_VAR
VAR
  i                : DINT;
  Index            : DINT;
  LowerIndex       : DINT := 1;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nAttachedCTs = 0 THEN LogError('Release: but no CT is attached'); RETURN; END_IF

// -- find if ct is in attached list
Index := -1;
FOR i:= TO_DINT(nLowerIndexCTList) TO TO_DINT(nLowerIndexCTList + _nAttachedCTs - 1) DO
  IF _pAttachedCTList[i] = pRemCT THEN
    Index := i;
    EXIT;     // found
  END_IF
END_FOR
IF Index = -1 THEN LogError('Release: ct inst not found in list'); RETURN; END_IF

// do stop CT callback if removing first
IF Index = TO_DINT(nLowerIndexCTList) THEN StopCT(pCtDefGrid:=pRemCT); END_IF

// compress list
IF Index >= TO_DINT(nLowerIndexCTList) AND Index < TO_DINT(nUpperIndexCTList) THEN
  MEMMOVE(              // shift all above entries down
    destAddr := ADR( _pAttachedCTList[Index] ), 
    srcAddr  := ADR( _pAttachedCTList[Index + 1] ), 
    n        := DINT_TO_UDINT(SIZEOF(_pAttachedCTList[LowerIndex]) * (UDINT_TO_DINT(_nAttachedCTs) - Index - 1 + LowerIndex))
  );
  _pAttachedCTList[nUpperIndexCTList] := 0;   // erase last(compressed) list entry
END_IF
_pAttachedCTList[_nAttachedCTs] := 0;   // erase last element

// remove
_nAttachedCTs := _nAttachedCTs - 1;   // remove one element

IF _nAttachedCTs > 0 THEN 
  // Start new HEAD
  _pAttachedCt := _pAttachedCTList[1];
  _bAttached := TRUE;
  StartCT(pCtDefGrid:=_pAttachedCt);
ELSE
  // CT list empty (no ct attached)
  _pAttachedCt := 0;
  _bAttached := 0;
END_IF

nRemIndex := Index;
pull := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="push" Id="{c3c7aaec-1980-4a48-a4a7-8390a6d54bae}" FolderPath="CTList\">
      <Declaration><![CDATA[METHOD PRIVATE push : BOOL
VAR_INPUT
  pNewCT : POINTER TO FB_ContainerDefGrid;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// checks
// - valid param
IF pNewCT = 0 THEN LogError('push: invalid pointer'); RETURN; END_IF
// - list full
IF _nAttachedCTs >= nUpperIndexCTList THEN  // list overflow no free element for processing
  LogError('Deformation processing list full, ignore new CT');
  Abort(iCT:=pNewCT^, sReason:='attach failed: too many attached');  // abort new CT (no release because not yet attached)
  RETURN;
END_IF
// - only one CT allowed
IF _nAttachedCTs > 0 AND NOT _bSupportParallelCT THEN
  LogError(Msg:='another container already attached -> ignore new (set error)');
  Abort(iCT:=pNewCt^, sReason:='attach failed: no parallel support');  // abort new CT
END_IF

// add to list
_nAttachedCTs := _nAttachedCTs + 1;
_pAttachedCTList[_nAttachedCTs] := pNewCT;

// apply head
IF _nAttachedCTs = 1 THEN
  // set HEAD
  _pAttachedCt := _pAttachedCTList[nLowerIndexCTList];  
  _bAttached := TRUE;
  
  // start callback on HEAD
  StartCT(pCtDefGrid:=_pAttachedCt);
END_IF

push := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Release" Id="{0d710157-0566-4311-84ad-ccf34b31ce11}">
      <Declaration><![CDATA[(*
  Release CT from Worker.
  :return: TRUE if CT was released, FALSE if no CT was registered 
*)
METHOD Release : BOOL
VAR_INPUT
  iCT              : I_CT;                         (*container at triggered event position*)
END_VAR
VAR
  nIdx             : UDINT;
  pCT              : POINTER TO FB_ContainerDefGrid;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// remove CT -----------------------------------------------------
// -- get real instance
pCT := getCtInst(iCT:=iCT);
IF pCT = 0 THEN LogError('Release: could not find ct instance'); RETURN; END_IF

// remove and release CT
IF pull(pRemCT:=pCT, nRemIndex=>nIdx) THEN
  LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=F_Concat4('Release CT[', TO_STRING(nIdx), '] ', pCt^.print(0)));
  Release := TRUE;  
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="setName" Id="{66618658-df51-457a-bb97-2f422320d543}">
      <Declaration><![CDATA[METHOD PRIVATE setName : BOOL
VAR_INPUT
  sName : STRING;
END_VAR
VAR
  nIdx : INT;
  bDone : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF sName = '' THEN
  // generate worker name
  _name := THIS^.InstanceName;
  WHILE NOT bDone DO
    nIdx := FIND(_name, '_');
    IF nIdx = 0 THEN bDone := TRUE; EXIT; 
    ELSE
      _name := RIGHT(_name,LEN(_name)-nIdx);
    END_IF 
  END_WHILE
ELSE
  _name := sName;  
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="setupPosition" Id="{9ff8ca00-2108-4d66-ac77-a2dd30739e0e}">
      <Declaration><![CDATA[METHOD PROTECTED setupPosition
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_nTrackOffset := F_MeterToSubPixel(fPosMeter:=fPosition, fResoSubPx:=_fPrintResolution*_fSubPxResolution);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="StartCT" Id="{28400007-7a5d-4fce-a93d-03d5259530e3}">
      <Declaration><![CDATA[METHOD PROTECTED StartCT
VAR_INPUT
 pCtDefGrid   : POINTER TO FB_ContainerDefGrid;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Override specific implementation in child class *)]]></ST>
      </Implementation>
    </Method>
    <Method Name="StopCT" Id="{cf4cd522-5869-4bb8-853b-bccf0021d001}">
      <Declaration><![CDATA[METHOD PROTECTED StopCT
VAR_INPUT
 pCtDefGrid   : POINTER TO FB_ContainerDefGrid;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Override specific implementation in child class *)]]></ST>
      </Implementation>
    </Method>
    <Method Name="work" Id="{3d2d038f-b3d5-4af3-8623-edc2cf824dd4}">
      <Declaration><![CDATA[METHOD  work
VAR
  i : UDINT;
  pCt : POINTER TO FB_ContainerDefGrid;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//Work only with attached container
IF _nAttachedCTs = 0 THEN RETURN; END_IF
  
FOR i:=nLowerIndexCTList TO nLowerIndexCTList + _nAttachedCTs - 1 DO
  pCt := _pAttachedCTList[i];

  // update CT position
  fCtPosition := pCt^.GetPos(nPosDomain:=E_PosDomain.master_pos) - _nTrackOffset; 
  
  // release CT (manually and security)
  IF _bForceRelease THEN
    LogWarning(F_Concat2('Manually realease CTId=', TO_STRING(pCt^.pCT^.iId)));
    Release(iCT:=pCt^);
  ELSIF _fCtSecurityReleasePos > 0 AND (fCtPosition > _fCtSecurityReleasePos) THEN
    LogError(F_Concat2('Security released CTId=', TO_STRING(pCt^.pCT^.iId)));
    Release(iCT:=pCt^);
  END_IF

END_FOR

]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_WorkerDefGrid">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.Abort">
      <LineId Id="10" Count="0" />
      <LineId Id="14" Count="5" />
      <LineId Id="11" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.Attach">
      <LineId Id="226" Count="1" />
      <LineId Id="172" Count="5" />
      <LineId Id="206" Count="0" />
      <LineId Id="205" Count="0" />
      <LineId Id="181" Count="1" />
      <LineId Id="207" Count="0" />
      <LineId Id="184" Count="2" />
      <LineId Id="191" Count="1" />
      <LineId Id="216" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="213" Count="2" />
      <LineId Id="195" Count="9" />
      <LineId Id="146" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.bAttached.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.fPosition.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.fPosition.Set">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.getCtInst">
      <LineId Id="40" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="14" Count="1" />
      <LineId Id="25" Count="1" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.Init">
      <LineId Id="129" Count="0" />
      <LineId Id="79" Count="7" />
      <LineId Id="119" Count="0" />
      <LineId Id="89" Count="3" />
      <LineId Id="131" Count="0" />
      <LineId Id="93" Count="15" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.mJobStart">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.mJobStop">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.pull">
      <LineId Id="114" Count="38" />
      <LineId Id="154" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.push">
      <LineId Id="17" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="5" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.Release">
      <LineId Id="45" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="74" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.setName">
      <LineId Id="3" Count="12" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.setupPosition">
      <LineId Id="3" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.StartCT">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.StopCT">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid.work">
      <LineId Id="19" Count="0" />
      <LineId Id="3" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="41" Count="10" />
      <LineId Id="39" Count="0" />
      <LineId Id="34" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>