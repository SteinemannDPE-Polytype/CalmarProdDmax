<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_PH_Grid" Id="{7d84493e-c0db-481a-b913-ca603f9217d7}" SpecialFunc="None">
    <Declaration><![CDATA[(*
  Specific printhead implementing the grid logic.
*)
FUNCTION_BLOCK FB_PH_Grid EXTENDS FB_PH IMPLEMENTS I_Correction_Grid
VAR
  // fifo queue
  fbFifo            : FB_GridPointFIFO;    // points fifo
  
  // queue status
  _bQueueBusy       : BOOL;               // point queue is not empty
  _bQueueError      : BOOL;               // point queue has an error

  // grid settings
  _bGridSet         : BOOL;               // grid is configured
  _nRows            : DINT;               // number of roi rows
  _nRowLowerBound, _nRowUpperBound : DINT;  //limites for roi rows of this ph
  _sDefGridSettings : ST_DefGridSettings;  // grid settings
  
  // checks
  _fbGetTaskIdx     : GETCURTASKINDEX;
  _taskIdx          : UDINT;
  _sTaskInfo        : PlcTaskSystemInfo;
  _lastCycle        : UDINT;
    
  // debug
  bEnSimPoints      : BOOL;               // enable grid point simulation
  bEnDebug          : BOOL;               // enable grid point history & point dump in logger
  nPointHead        : INT := 0;           // last list entry
  sPointHistory     : ARRAY[0..100] OF ST_GridPoint; // grid point history array
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// sync points fifo to CB (PHs)
syncPoints();

// debug
IF bEnSimPoints THEN simPoints(); END_IF]]></ST>
    </Implementation>
    <Property Name="bPointQueueBusy" Id="{743cb526-13a9-4a34-8340-5ce273e1a04d}">
      <Declaration><![CDATA[PROPERTY bPointQueueBusy : BOOL
]]></Declaration>
      <Get Name="Get" Id="{042e433e-239b-4c3d-b0fd-109113d4f688}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bPointQueueBusy := SEL(fbFifo.nCount>0, FALSE, TRUE);   // busy as long queue is not empty]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bPointQueueError" Id="{15f61a7e-74db-4c93-8e7b-82ebe5f7fac2}">
      <Declaration><![CDATA[PROPERTY bPointQueueError : BOOL
]]></Declaration>
      <Get Name="Get" Id="{1b0e0081-4894-40c9-9088-5c494fb1f80a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// check for errors
IF fbFifo.bError THEN
  _bQueueError := TRUE;
ELSE
  bPointQueueError := FALSE;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="convertPoint" Id="{ce218d93-eaab-4eb2-903f-9bc8545e9f37}">
      <Declaration><![CDATA[(*
  Convert a point from DefGrid point to a GridPoint for hw write.
*)
METHOD PRIVATE convertPoint : ST_GridPoint
VAR_INPUT
  sPoint : POINTER TO ST_DeformationPoint;
  nPhPosY : DINT;
END_VAR
VAR
  nRoiOffset : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _sDefGridSettings.nGridPitchY = 0 THEN F_Report_Error(ErrType:=EN_REPORT_ERROR_TYPE.Report_Error_0Pointer); RETURN; END_IF

convertPoint.dx := DINT_TO_UINT(sPoint^.dx);
convertPoint.dy := DINT_TO_UINT(sPoint^.dy);

// variant1 with absolute Node address (based on number of grid-rows
(*convertPoint.node := 
  UDINT_TO_UINT(
      DINT_TO_UDINT(sPoint^.col)*sDefGridSettings.nGridSizeY 
    + DINT_TO_UDINT(sPoint^.row)
);*)

// variant2 - calculate FPGA ROI_address (roi_buffer address of grid point)
{warning 'TODO: update constants for calculation if FPGA is ok and make CONSTANTS'}
nRoiOffset := nPhPosY / TO_DINT(_sDefGridSettings.nGridPitchY);
convertPoint.node := TO_UINT((sPoint^.col MOD GVL_Deformation.nC_GridRoiCols) * GVL_Deformation.nC_GridRoiRows + sPoint^.row - nRoiOffset);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="history" Id="{51c013f7-5b60-4957-af19-f90b1fe2cb67}">
      <Declaration><![CDATA[(*
  Keep a history of last synced points.
*)
METHOD PRIVATE history
VAR_INPUT
  pPoint  : POINTER TO ST_GridPoint;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pPoint^.node = 0 THEN nPointHead := 0; END_IF  // internal reset on point address 0

sPointHistory[nPointHead] := pPoint^;
nPointHead := (nPointHead + 1) MOD 100;]]></ST>
      </Implementation>
    </Method>
    <Method Name="init" Id="{aac88526-a64d-4341-b09a-21e8f02199be}">
      <Declaration><![CDATA[METHOD init : BOOL
VAR_INPUT
  pAdsIf        : POINTER TO ST_ADS_PH;                (*Pointer to its ads interface structure*)
  sPhDef        : ST_PH_DEF;                           (*ph definition structure*)
END_VAR
VAR
  bErr          : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.init(
    pAdsIf:=pAdsIf,
    sPhDef:=sPhDef
);

nCorrection := 0;

_fbGetTaskIdx();
_taskIdx := _fbGetTaskIdx.index;]]></ST>
      </Implementation>
    </Method>
    <Method Name="setGrid" Id="{b19c3f25-5f02-485e-a505-24a5847f95da}">
      <Declaration><![CDATA[(*
  Configure grid settings for ph.
*)
METHOD setGrid
VAR_INPUT
  sGrid : ST_DefGridSettings;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// grid settings checks
IF sGrid.nGridPitchX = 0 OR sGrid.nGridPitchY = 0 OR sGrid.nGridPoints = 0 THEN
  LogError('Invalid grid settings');
  RETURN;
END_IF

// store grid settings
_sDefGridSettings :=sGrid;

// caluclate roi row bounds
// lower row bound
_nRowLowerBound:=nPositionY / UDINT_TO_DINT(_sDefGridSettings.nGridPitchY);   // floor
_nRowLowerBound := LIMIT(0, _nRowLowerBound, UDINT_TO_DINT(_sDefGridSettings.nGridSizeY));  // limit to grid scope

// upper row bound
_nRowUpperBound:=(nPositionY + nHeadWidth) / UDINT_TO_DINT(_sDefGridSettings.nGridPitchY) + 1;
_nRowUpperBound := LIMIT(0, _nRowUpperBound, UDINT_TO_DINT(_sDefGridSettings.nGridSizeY));  // limit to grid scope

{warning 'TODO: update if RIO requirements are set by FPGA'}
// we just force to have 4 ROI rows and always charge effectively 4 row per head event if 3 would be sufficent
_nRowUpperBound := _nRowLowerBound + GVL_Deformation.nC_GridRoiRows - 1; 
// number of rows
_nRows := _nRowUpperBound - _nRowLowerBound + 1;

_bGridSet := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="simPoints" Id="{6c01aed3-a0eb-4fe3-8ba0-4a6c5b8f59ed}">
      <Declaration><![CDATA[METHOD PRIVATE simPoints
VAR_INST
  tWrPoint      : TON := (PT:=T#1S);
  RandomNumber  : DRAND;
  sGridCfg    : ST_DefGridSettings := (nGridPitchX:=1024, nGridPitchY:=1024, nGridSizeX:=100, nGridSizeY:=100, nGridPoints:=10_000, nGridImageOffsetY:=0);   // some simulation defaults
  sNewPoint   : ST_DeformationPoint;
END_VAR
VAR
  random_val  : LREAL;
  nConvErr    : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _bGridSet THEN setGrid(sGrid:=sGridCfg); END_IF

// create and write a
tWrPoint(IN:=NOT tWrPoint.Q);
IF tWrPoint.Q THEN
  RandomNumber(Seed:=12, Num=>random_val);
  sNewPoint.dx := DINT_TO_UINT(FC_LREAL_TO_DINT((random_val * 100) - 50, ADR(nConvErr)));
  RandomNumber(Seed:=12, Num=>random_val);
  sNewPoint.dy := DINT_TO_UINT(FC_LREAL_TO_DINT((random_val * 60) - 30, ADR(nConvErr)));
  sNewPoint.col := sNewPoint.index / _nRows;
  sNewPoint.row := sNewPoint.index MOD _nRows + _nRowLowerBound;
  sNewPoint.index := (sNewPoint.index + 1) MOD 20;  // just 20 points
  writeCorrectionPoint(sPoint:=sNewPoint);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="syncPoints" Id="{d34e75ef-e0c7-4871-9b57-12d9c3403c8e}">
      <Declaration><![CDATA[(*
  Sync deformation point to hardware.
*)
METHOD PRIVATE syncPoints
VAR_INPUT
END_VAR
VAR
  sPoint  : ST_GridPoint;
  bOK     : BOOL;
  nPdiVal : ULINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// manage the sending of a point per PDI

nCorrection := nCorrection AND 16#0000FFFFFFFFFFFF;  // reset correction command only

IF fbFifo.nCount > 0 THEN
  bOK := fbFifo.Pop(sGridPoint=>sPoint);
  IF bOK THEN
    nPdiVal     := UINT_TO_ULINT(sPoint.dx);
    nPdiVal     := nPdiVal OR SHL(UINT_TO_ULINT(sPoint.dy), 16);
    nPdiVal     := nPdiVal OR SHL(UINT_TO_ULINT(sPoint.node), 32);
    nCorrection := SHL(1, 48) OR nPdiVal;      //set cmd [16bit] cmd / [48bit] of grid point in PDI var
    
    //history
    IF bEnable AND bEnDebug THEN history(ADR(sPoint)); END_IF
  ELSE
    LogError('syncPoints: could not get a new GridPoint');
	END_IF
END_IF

// check for double calls within one task cycle
_sTaskInfo := TwinCAT_SystemInfoVarList._TaskInfo[_taskIdx];
IF _sTaskInfo.CycleCount = _lastCycle THEN
  LogError('syncPoints: was called twice in same task cycle');
END_IF
_lastCycle := _sTaskInfo.CycleCount;]]></ST>
      </Implementation>
    </Method>
    <Method Name="writeCorrectionPoint" Id="{a049beb6-fde3-4da4-ba01-912d4c21c5c6}">
      <Declaration><![CDATA[(*
  Write a new Deformation Point to the hardware. 
  New added points will be synchroniced with the hardware with a FIFO queue.
  :return: TRUE on success
*)
METHOD writeCorrectionPoint : BOOL
VAR_INPUT
	(* add a new deformation point*)
	sPoint	: ST_DeformationPoint;
END_VAR
VAR
  sGridPoint : ST_GridPoint;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _bGridSet THEN RETURN; END_IF

// filter points only for this head
IF sPoint.row >= _nRowLowerBound AND sPoint.row <= _nRowUpperBound THEN
  
  // convert deformation point to GridPoint for hw
  sGridPoint := convertPoint(sPoint:=ADR(sPoint), nPositionY);
  
  // add point
  writeCorrectionPoint := fbFifo.Push(sNewPoint:=sGridPoint);   // add new point

  IF bEnable AND bEnDebug THEN
    LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=
      F_Concat4(
        'Write GridPoint '
        ,F_Concat4('c:', TO_STRING(sPoint.col), ' r:', TO_STRING(sPoint.row))
        ,F_Concat2(' -> node:', TO_STRING(sGridPoint.node))
        ,F_Concat4(' dx:', TO_STRING(sPoint.dx), ' dy:', TO_STRING(sPoint.dy))
      )
    );
  END_IF

END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_PH_Grid">
      <LineId Id="9" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="97" Count="0" />
    </LineIds>
    <LineIds Name="FB_PH_Grid.bPointQueueBusy.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PH_Grid.bPointQueueError.Get">
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="1" />
      <LineId Id="8" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_PH_Grid.convertPoint">
      <LineId Id="57" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="21" Count="2" />
      <LineId Id="44" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="51" Count="0" />
    </LineIds>
    <LineIds Name="FB_PH_Grid.history">
      <LineId Id="19" Count="2" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_PH_Grid.init">
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="16" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_PH_Grid.setGrid">
      <LineId Id="40" Count="3" />
      <LineId Id="39" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="21" Count="2" />
      <LineId Id="30" Count="1" />
      <LineId Id="24" Count="2" />
      <LineId Id="56" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="FB_PH_Grid.simPoints">
      <LineId Id="39" Count="1" />
      <LineId Id="25" Count="6" />
      <LineId Id="38" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_PH_Grid.syncPoints">
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="88" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="94" Count="3" />
      <LineId Id="93" Count="0" />
    </LineIds>
    <LineIds Name="FB_PH_Grid.writeCorrectionPoint">
      <LineId Id="57" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="47" Count="5" />
      <LineId Id="54" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="43" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>