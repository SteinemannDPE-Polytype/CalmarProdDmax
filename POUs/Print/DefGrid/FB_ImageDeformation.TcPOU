<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_ImageDeformation" Id="{441e42f8-e2de-4298-af7d-148639a86403}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_ImageDeformation EXTENDS FB_PythonDeformation
VAR
  _eDeformationStep : E_DeformationStep;    // current active deformation step (handler)
  _eCameraMode      : E_CameraMode;         // active deformation mode
  _fFeatureGrid     : LREAL;                // camera feature grid [Px]
  _iDefHandler      : I_DeformationHandler; // deformation handler interface for global deformation control
  _nImgProcPoints   : DINT;                 // to calc gloabl dx/dy
  _nDxShift, _nDxSum : LREAL;               // global x grid shift
  _nDyShift, _nDySum : LREAL;               // global y grid shift
  
  // Cam points (stored locally)
  _nCamPoints        : UDINT;
  _sCamPoints        : ARRAY[0..100] OF ST_CameraPointTbl;   // received cam points
  _nCamPoint_MaxRefX : LREAL;               // max. x position of all available cam points [px]
  
  // local DefGrid table
  _sDefGridSettings  : ST_DefGridSettings;  // local copy of settings
  _sDefGridPoints    : ARRAY[0..100, 0..100] OF ST_DeformationPointTbl; // [col, row] local grid point table
  _nGridPoints       : UDINT;               // stored and available grid points
  _nGridCols         : UDINT;               // count current complete grid columns
  
  // local grid handler(s)
  _nLocalGridColsGenerated: UDINT;          // already generated "local" grid columns XYR [0..x]

  _fStartDeformPos  : LREAL;                // position [Px] where deformation started on ct
  _nUpdatedGridCol  : UDINT;                // already updated grid column
  _nUpdatedFeature  : UDINT;                // number of updated features (a distance)
  _fPrintLengthOriginal  : LREAL;           // intended image depth in [m]
  _fPrintLengthEffective : LREAL;           // effective detected printing length in [m] (not yet used, but could be used for more accureate dx calculation in the future)
  // others
  _nErrorId         : UDINT := 0;
  _sTempPoint       : ST_DeformationPointAccurate; 
END_VAR
VAR_STAT
  // sim
  eTestGridSelection : E_GridTypeSelection;
  nTestGridFactor : LREAL := 20;
END_VAR
VAR CONSTANT
  tPYTHON_TIMEOUT   : TIME  := T#500MS;     // python deformation script update response timeout  
  nMAX_COLS_DEFGRID : UDINT := 100;         // if you update this value you need to update the array variables as well (there we can't use this constant (beckhoff bug in table view))
  nMAX_ROWS_DEFGRID : UDINT := 100;         // if you update this value you need to update the array variables as well (there we can't use this constant (beckhoff bug in table view))
  nMAX_CAM_POINTS   : UDINT := 100;         // if you update this value you need to update the array variables as well (there we can't use this constant (beckhoff bug in table view))
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitialized THEN
  init();
END_IF

IF bUsePy THEN
  ExecPy();       // call python deformation handler
  
  // pull all GridPoints from FIFO and store to local table
  WHILE PopDeformationPoint(sNewPoint=>_sTempPoint) DO
    storeDeformationPoint(sPoint:=_sTempPoint);    // save point to table
  END_WHILE
END_IF
]]></ST>
    </Implementation>
    <Folder Name="local" Id="{7d9d6a73-3e32-4699-8d69-4376438515c1}" />
    <Method Name="abort" Id="{17ebfcd2-e342-43b8-8f26-960c2f17ffae}">
      <Declaration><![CDATA[METHOD abort : BOOL
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_bAborted := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="addCamPoint" Id="{09ff5949-d1e4-4f91-8ac4-9eb1cfa8f287}">
      <Declaration><![CDATA[METHOD addCamPoint : BOOL
VAR_INPUT
  sNewPoint : ST_DeformationPointAccurate;
END_VAR
VAR
  sPointPx  : ST_DeformationPoint;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF bUsePy THEN
  // push point to fifo for script
  
  addCamPoint := PushDeformationPoint(
                      sPoint:=F_EncodeDeformationPoint(sPoint:=sNewPoint, nResolution:=GVL_Deformation.nC_GridSubReso)
                 );
ELSE
  addCamPoint := TRUE;
END_IF

// store it to local table
IF addCamPoint THEN
  storeCameraPoint(sPoint:=sNewPoint); // store locally
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="bAborted" Id="{83e61a74-d85b-4c49-8637-546b50faf2c3}">
      <Declaration><![CDATA[PROPERTY bAborted : BOOL]]></Declaration>
      <Get Name="Get" Id="{ae456e92-162c-483d-a80a-32c06bf6bacb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bAborted := _bAborted;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bBusy" Id="{5d3d2a13-e08c-4e72-b575-f525aa8bfd05}">
      <Declaration><![CDATA[PROPERTY bBusy : BOOL]]></Declaration>
      <Get Name="Get" Id="{b939b996-039a-463e-9850-4e6c68257d06}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[bBusy := bPythonBusy AND NOT _bAborted;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bDone" Id="{a14a12a3-fc4c-4d8b-814b-d9f6ebba735a}">
      <Declaration><![CDATA[PROPERTY bDone : BOOL]]></Declaration>
      <Get Name="Get" Id="{80141edf-ae3b-4694-901c-b3fc59dac3a8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bDone := bPythonDeformationDone OR _bAborted OR (eStep = E_DeformationStep.nothing);
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bError" Id="{7f896cb7-602c-4167-a819-07e92cdd2594}">
      <Declaration><![CDATA[PROPERTY bError : BOOL]]></Declaration>
      <Get Name="Get" Id="{4e8b0c31-fba5-4090-9e6e-614b07d57e17}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bError := bPythonError OR _bAborted;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bUsePy" Id="{be274e9c-daae-4fc7-ace3-adfedebb5da4}">
      <Declaration><![CDATA[PROPERTY PRIVATE bUsePy : BOOL]]></Declaration>
      <Get Name="Get" Id="{6a85037d-afa2-4781-92a4-f898c5758e82}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _sDefGridSettings.eDeformationType=E_DeformationType.ScriptGrid OR _sDefGridSettings.eDeformationType = E_DeformationType.ScriptGridTrend THEN
  bUsePy := TRUE;
END_IF ]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="eCamMode" Id="{64ad927e-deb9-4865-b90c-f4a3c3286171}">
      <Declaration><![CDATA[PROPERTY eCamMode : E_CameraMode]]></Declaration>
      <Get Name="Get" Id="{c8584651-c6a0-4823-a817-290486a61a9e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eCamMode := _eCameraMode;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{b4c02abf-cf4c-4d12-9cc0-85ed454c5741}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_eCameraMode := eCamMode;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="eStep" Id="{379d0cc7-8644-4c27-9aa7-c2efed241371}">
      <Declaration><![CDATA[PROPERTY eStep : E_DeformationStep]]></Declaration>
      <Get Name="Get" Id="{ec8806cd-fcce-4453-8d6e-276afd6c5d41}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[eStep := _eDeformationStep;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{5bfa4a27-6e2e-424f-aaca-e5ba1c0724a5}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF eStep > _eDeformationStep THEN
  LogLvl(Lvl:=E_LogSeverity.Detail, Msg:=F_Concat4('Change deformation step: ', TO_STRING(_eDeformationStep), '->', TO_STRING(eStep)));
  _eDeformationStep := eStep;
END_IF]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="fFeatureGrid" Id="{dc296f3b-f34a-46dd-9901-a6dc5ca76d33}">
      <Declaration><![CDATA[(*
  Camera feature grid. Section distance where points are detected and sent as group to PLC.
*)
PROPERTY fFeatureGrid : LREAL]]></Declaration>
      <Get Name="Get" Id="{b3ad04ee-5637-4f98-8dbd-cdc79f0669e8}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fFeatureGrid := _fFeatureGrid;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{58cf2b84-951c-43f1-bd8b-02e4a360a713}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fFeatureGrid := fFeatureGrid;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="fPrintLengthEffective" Id="{531d3b45-38e9-42b1-ba7a-c48b711e0ee9}">
      <Declaration><![CDATA[PROPERTY fPrintLengthEffective : LREAL]]></Declaration>
      <Get Name="Get" Id="{28b3d40b-d0eb-4592-9b52-597177f18341}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[fPrintLengthEffective := _fPrintLengthEffective;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3275d1ad-6a13-4bab-a6da-4adca2ee0356}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fPrintLengthEffective := fPrintLengthEffective;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="getCamNeighbourPoint" Id="{d035fbd4-9bd3-4321-8aa9-a0c89957e889}">
      <Declaration><![CDATA[// get neighbour camera point
// :returns: TRUE if present
METHOD PRIVATE getCamNeighbourPoint : BOOL
VAR_INPUT
  fPos    : LREAL;   // [px]
  nOffset : DINT;    // 0=previous, 1=next
END_VAR
VAR_OUTPUT
  Pn : ST_CameraPointTbl;
END_VAR
VAR
  i : DINT;
  foundIdx : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[foundIdx := -1;
FOR i:=0 TO TO_DINT(_nCamPoints)-1 DO
  // previous search
  IF nOffset = 0 THEN
    IF _sCamPoints[i].sPoint.x_ref <= fpos THEN
      foundIdx := i;
    ELSE
      EXIT;
    END_IF
    
  // next searchs  
  ELSIF nOffset = 1 THEN
    IF _sCamPoints[i].sPoint.x_ref > fpos THEN
      foundIdx := i;
      EXIT;
    END_IF
  END_IF
END_FOR

IF foundIdx >= 0 THEN
  Pn := _sCamPoints[foundIdx];
  getCamNeighbourPoint := TRUE;  
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="getCamPointX" Id="{c0640797-3514-4276-a363-51a286e4c249}">
      <Declaration><![CDATA[// get neighbour camera point
// :returns: TRUE if present
METHOD PRIVATE getCamPointX : BOOL
VAR_INPUT
  nIdx : UDINT;    // 0=last, 1=first, 2=second
END_VAR
VAR_OUTPUT
  Pn : ST_CameraPointTbl;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF nIdx = 0 THEN
  Pn := _sCamPoints[_nCamPoints-1];  // return first cam point
  getCamPointX := TRUE;
ELSIF nIdx <= _nCamPoints THEN
  Pn := _sCamPoints[nIdx-1];
  getCamPointX := TRUE;
ELSE
  //error
  Pn := _sCamPoints[0];   // error return first as fallback 
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="getDeformationPoint" Id="{1cd9dbbd-2016-42cd-ace0-52bf27c0c8ca}">
      <Declaration><![CDATA[(*
  get a deformation point.
  :returns: TRUE if successful
*)
METHOD getDeformationPoint :  BOOL;
VAR_INPUT
  nCol : UDINT;   // col select
  nRow : UDINT;   // row select
END_VAR
VAR_OUTPUT
  sPoint : ST_DeformationPointAccurate;
END_VAR
VAR
  bWasSet  : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[getDeformationPoint := FALSE;

IF TO_UDINT(nCol) > nMAX_COLS_DEFGRID THEN LogError(F_Concat5('getDeformationPoint: point col=', TO_STRING(nCol), ' out of table > ', TO_STRING(nMAX_COLS_DEFGRID), '')); RETURN; END_IF
IF TO_UDINT(nRow) > nMAX_ROWS_DEFGRID THEN LogError(F_Concat5('getDeformationPoint: point row=', TO_STRING(nRow), ' out of table > ', TO_STRING(nMAX_ROWS_DEFGRID), '')); RETURN; END_IF

sPoint := _sDefGridPoints[nCol, nRow].sPoint;
bWasSet := _sDefGridPoints[nCol, nRow].bSet;
IF NOT bWasSet THEN LogWarning(F_Concat5('Point[c(',TO_STRING(nCol),')/r(', TO_STRING(nRow),')] was not set')); END_IF
getDeformationPoint := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="gridImgProc" Id="{cbd3657e-725f-4601-8910-5d2742ad404e}">
      <Declaration><![CDATA[METHOD PROTECTED gridImgProc
VAR_INPUT
  pNewDeformationPoint	: POINTER TO ST_DeformationPointAccurate;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pNewDeformationPoint = 0 THEN RETURN; END_IF

_nDxSum := (_nDxSum + pNewDeformationPoint^.dx);
_nDySum := (_nDySum + pNewDeformationPoint^.dy);
IF _nImgProcPoints > 0 THEN
  _nDxShift := _nDxSum / _nImgProcPoints;
  _nDyShift := _nDySum / _nImgProcPoints;
END_IF
_nImgProcPoints := _nImgProcPoints + 1;]]></ST>
      </Implementation>
    </Method>
    <Property Name="iDeformationHandler" Id="{71b06089-7517-4dac-8a1d-8ca1a521b331}">
      <Declaration><![CDATA[PROPERTY iDeformationHandler : I_DeformationHandler]]></Declaration>
      <Get Name="Get" Id="{72bae4dd-0a9b-490b-ba5f-cb51797ad7d7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[iDeformationHandler := _iDefHandler;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{c9807ef1-61f2-4084-b09d-5cf3a94e49e4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_iDefHandler := iDeformationHandler;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="init" Id="{352f33fa-22cf-4c1f-bd67-048959ae9069}">
      <Declaration><![CDATA[METHOD init
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_fbTimeout.PT := tPYTHON_TIMEOUT;
bInitialized := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Property Name="nAvailableGridPoints" Id="{149198c3-6ff5-44b4-a357-2dd695c9d30f}">
      <Declaration><![CDATA[PROPERTY nAvailableGridPoints : UDINT]]></Declaration>
      <Get Name="Get" Id="{800e78d9-d0c7-4ffa-b974-3b2e1e8ea3bd}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nAvailableGridPoints := _nGridPoints;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="nErrorId" Id="{26c3d4ed-1e57-4137-87ba-ab48878f97b6}">
      <Declaration><![CDATA[PROPERTY nErrorId : UDINT]]></Declaration>
      <Get Name="Get" Id="{f43d944b-2bb5-4a38-bd57-f637a9cf52b0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nErrorId := _nErrorId;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="nProcessId" Id="{5476e672-b6d9-48ea-b432-36ee78e45a6a}">
      <Declaration><![CDATA[PROPERTY nProcessId : DINT]]></Declaration>
      <Get Name="Get" Id="{0d35471e-3b7c-4a5f-a565-519b714e7e38}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nProcessId := nPythonId;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{6b84275b-4f0b-49f3-b571-2d43cde0cb8e}">
        <Declaration><![CDATA[
VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nPythonId := nProcessId;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="reset" Id="{ee5bcf93-4377-4066-8c4f-86beee77ad6a}">
      <Declaration><![CDATA[METHOD reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Reset();   // reset FB_PythonDeformation

_nGridPoints := 0;
_nGridCols := 0;
_nCamPoints := 0;
_nCamPoint_MaxRefX := 0;
MEMSET(destAddr:=ADR(_sDefGridPoints), fillByte:=0, n:=SIZEOF(_sDefGridPoints));
MEMSET(destAddr:=ADR(_sCamPoints), fillByte:=0, n:=SIZEOF(_sCamPoints));
MEMSET(destAddr:=ADR(_sDefGridSettings), fillByte:=0, n:=SIZEOF(_sDefGridSettings));

_eDeformationStep := E_DeformationStep.nothing;
_eCameraMode := E_CameraMode.NoCorrection;
_iDefHandler := 0;
_nImgProcPoints   := 0;
_nDxShift         := 0;
_nDyShift         := 0;
_nDxSum           := 0;
_nDySum           := 0; 

_nLocalGridColsGenerated:=0;
_fStartDeformPos:=0;
_nUpdatedGridCol := 0;
_nUpdatedFeature := 0;
_nErrorId := 0;
_tExecutionTime := T#0s;]]></ST>
      </Implementation>
    </Method>
    <Property Name="sDefGridSettings" Id="{706a51d4-fd0f-43cf-9b8a-a103d83698f4}">
      <Declaration><![CDATA[PROPERTY sDefGridSettings : ST_DefGridSettings]]></Declaration>
      <Get Name="Get" Id="{06763bcd-beaf-4dbd-8d7e-a527da25805e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sDefGridSettings := _sDefGridSettings;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{1d5f5e75-fa58-4db6-ba14-7d197267c950}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_sDefGridSettings := sDefGridSettings;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="startDeformation" Id="{123edd95-85fc-4472-8049-f2e45168ccb9}">
      <Declaration><![CDATA[METHOD startDeformation
VAR_INPUT
  fStartDefPos : LREAL;  // [Px]
  fImageLength : LREAL;  // [m] original image length
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_fStartDeformPos := fStartDefPos;
_fPrintLengthOriginal := fImageLength;
_fPrintLengthEffective := fImageLength;
_nUpdatedGridCol := 0;
_nUpdatedFeature := 0;
_nCamPoint_MaxRefX := 0;

eStep := E_DeformationStep.gridStarted;  // signal to start deformation (update process)
]]></ST>
      </Implementation>
    </Method>
    <Method Name="storeCameraPoint" Id="{a1710da7-41bc-4030-9cf2-0660503b0feb}">
      <Declaration><![CDATA[METHOD PRIVATE storeCameraPoint
VAR_INPUT
  sPoint : ST_DeformationPointAccurate;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// save point with checks and log.

//-- check table overflow
IF _nCamPoints >= nMAX_CAM_POINTS THEN LogError(F_Concat3('storeCamPoint: array overflow ', TO_STRING(_nCamPoints), ' ignore point, ')); RETURN; END_IF

//-- store point
_sCamPoints[_nCamPoints].bSet := TRUE;
_sCamPoints[_nCamPoints].sPoint := sPoint;
_sCamPoints[_nCamPoints].tTime := F_GetCurDcTaskTime64();
_nCamPoints := _nCamPoints+1;

// -- max. x pos 
IF sPoint.x_ref > _nCamPoint_MaxRefX THEN
  _nCamPoint_MaxRefX := sPoint.x_ref;  // point most far in ct
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="storeDeformationPoint" Id="{0e647bd1-6083-417d-80d8-de2ddf7717c3}">
      <Declaration><![CDATA[METHOD PRIVATE storeDeformationPoint
VAR_INPUT
  sPoint : ST_DeformationPointAccurate;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// do global point img processing
gridImgProc(pNewDeformationPoint:=ADR(sPoint));

// save point with checks and log.
//-- check table overflow
IF TO_UDINT(sPoint.col) > nMAX_COLS_DEFGRID THEN LogError(F_Concat5('point col=', TO_STRING(sPoint.col), ' exceeds max=', TO_STRING(nMAX_COLS_DEFGRID), ' ignore point')); RETURN; END_IF
IF TO_UDINT(sPoint.row) > nMAX_ROWS_DEFGRID THEN LogError(F_Concat5('point row=', TO_STRING(sPoint.row), ' exceeds max=', TO_STRING(nMAX_ROWS_DEFGRID), ' ignore point')); RETURN; END_IF
  
//-- store point
_sDefGridPoints[sPoint.col, sPoint.row].bSet := TRUE;
_sDefGridPoints[sPoint.col, sPoint.row].sPoint := sPoint;
_sDefGridPoints[sPoint.col, sPoint.row].tTime := F_GetCurDcTaskTime64();
IF sPoint.x_ref = 0 THEN _sDefGridPoints[sPoint.col, sPoint.row].sPoint.x_ref := sPoint.col * TO_DINT(_sDefGridSettings.nGridPitchX); END_IF// calc x pos of grid point (if not done by script)
IF sPoint.y_ref = 0 THEN _sDefGridPoints[sPoint.col, sPoint.row].sPoint.y_ref := sPoint.row * TO_DINT(_sDefGridSettings.nGridPitchY); END_IF// calc x pos of grid point (if not done by script)
// count grid points 
_nGridPoints := _nGridPoints + 1;
// count current complete grid columns
IF _sDefGridSettings.nGridSizeY > 0 THEN
  _nGridCols := (_nGridPoints/_sDefGridSettings.nGridSizeY);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="tExecutionTime" Id="{01c82210-a107-4ab4-992a-1483a9a2fe7a}">
      <Declaration><![CDATA[PROPERTY tExecutionTime : TIME]]></Declaration>
      <Get Name="Get" Id="{3e449f1e-51a4-4ad5-88d7-654da86443f7}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[tExecutionTime := _tExecutionTime;  // TODO: in case of local processor read other execution time]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="updateDeformation" Id="{901922ab-d785-4fe3-9cf2-c64bf886e7b2}">
      <Declaration><![CDATA[METHOD updateDeformation
VAR_INPUT
  fPos : LREAL;  // current CT position in [px]
END_VAR
VAR
  fPosRel_Deform      : LREAL;    // position relative to start deformation [px]
  fPosRel_CamFeature  : LREAL;    // theoretical feature position [feature nr](based on StartDeformation NOT real on camera)
  fPosRel_GridCol     : LREAL;    // current deformation grid number [grid nr]
  sPoint : ST_DeformationPoint;
  nCurrentCol, nCurrentFeature : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// cyclic call and update deformation script
// - parameter checks
IF eStep < E_DeformationStep.gridStarted OR bDone THEN RETURN; END_IF  // nothing to do if deformation was not started
IF _sDefGridSettings.nGridSizeX = 0 THEN RETURN; END_IF
IF fFeatureGrid = 0 THEN fFeatureGrid := 1024; END_IF         // set some valid default (prevents division crash)

// - calc relative Deformation position
fPosRel_Deform     := fPos - _fStartDeformPos;
fPosRel_CamFeature := fPosRel_Deform / _fFeatureGrid;
fPosRel_GridCol    := fPosRel_Deform / _sDefGridSettings.nGridPitchX;

// - check available cam points --> current feature
//    Is this blocking when position is retracting?
IF FLOOR(fPosRel_CamFeature) > _nUpdatedFeature   // by CameraFeature pitch (to sync with reception of cam points)
   //FLOOR(fPosRel_GridCol) > _nUpdatedGridCol    // by Grid Pitch  // AND _nUpdatedGridCol <= _sDefGridSettings.nGridSizeX
THEN

  nCurrentCol := TO_UDINT(FLOOR(fPosRel_GridCol));
  nCurrentFeature :=  TO_UDINT(FLOOR(fPosRel_CamFeature));

  // debug info
  LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=
    F_Concat6(
        F_Concat2('update at: ', TO_STRING(fPosRel_Deform)),
        F_Concat3(' feature(', TO_STRING(fPosRel_CamFeature), ')'),
        F_Concat2(' CamP: ', TO_STRING(_nCamPoints)),
        F_Concat2(' maxX: ', TO_STRING(_nCamPoint_MaxRefX)),
        F_Concat2(' GridP: ', TO_STRING(_nGridPoints)),
        F_Concat2(' at Col: ', TO_STRING(nCurrentCol))
    )
  );

  // - update Grid (py or local) with desired position
  IF bUsePy THEN
    IF _nCamPoints > 2 THEN
      UpdatePy(fPosition:=fPosRel_Deform);
      _nUpdatedGridCol := nCurrentCol;
      _nUpdatedFeature := nCurrentFeature;
    END_IF
  ELSIF _sDefGridSettings.eDeformationType = E_DeformationType.LocalMarks1D THEN
    updateLocal_1D_Marks(nGridCol:=nCurrentCol, nFeatureCt:=nCurrentFeature);
    _nUpdatedGridCol := nCurrentCol;
    _nUpdatedFeature := nCurrentFeature;
  END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateLocal_1D_Marks" Id="{fad2ef48-fad2-4c52-b1ee-769494717330}" FolderPath="local\">
      <Declaration><![CDATA[METHOD PRIVATE updateLocal_1D_Marks : BOOL
VAR_INPUT
  nGridCol : UDINT;
  nFeatureCt : UDINT;
END_VAR
VAR
  row, col : UDINT;
  ct : DINT;
  col_pos_px : LREAL;   // column position in [px]
  sTmpPoint : ST_DeformationPointAccurate;
  
  dx, dy : LREAL;
  generateGridForCol : BOOL;
  Pn0, Pn1 : ST_CameraPointTbl;
  pPx : POINTER TO ST_CameraPointTbl;
  bn0, bn1 : BOOL;
  bFirstCol, bLastCol : BOOL;
  fPointDist : LREAL;
  relativePosX : LREAL;
END_VAR
VAR_INST
  fTrig_Done : F_TRIG;
END_VAR
VAR CONSTANT
  fC_SignConversion : LREAL := -1; 
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[bFirstCol := SEL(nGridCol=0, FALSE, TRUE);
bLastCol  := SEL(nGridCol=_sDefGridSettings.nGridSizeX-1, FALSE, TRUE);

ct := 0;
FOR col:=_nLocalGridColsGenerated TO nGridCol DO      // loop over not yet gnerated columns 
  LogLvl(Lvl:=E_LogSeverity.Debug, Msg:= F_Concat2(F_Concat2('check grid for col: ', TO_STRING(col)), ''));
  
  col_pos_px := nGridCol * _sDefGridSettings.nGridPitchX;
  dx:=0; dy:=0;
  
  bn0 := getCamNeighbourPoint(fPos:=col_pos_px, nOffset:=0, Pn=>Pn0);
  bn1 := getCamNeighbourPoint(fPos:=col_pos_px, nOffset:=1, Pn=>Pn1);
  
  IF bn0 AND bn1 THEN
    // we have neighbour points --> interpolate displacement inbetween
    // dx/dy interpolation between previous and next cam point
    fPointDist := Pn1.sPoint.x_ref-Pn0.sPoint.x_ref;
    fPointDist := SEL(fPointDist=0, fPointDist, 1);    // avoid 0 division crash
    relativePosX := (col_pos_px-Pn0.sPoint.x_ref) / (fPointDist);    // relative position of col between two cam points
    dx := fC_SignConversion * (Pn0.sPoint.dx + (Pn1.sPoint.dx - Pn0.sPoint.dx) * relativePosX);
    dy := fC_SignConversion * (Pn0.sPoint.dy + (Pn1.sPoint.dy - Pn0.sPoint.dy) * relativePosX);
    generateGridForCol:=TRUE;
    
  ELSIF bFirstCol THEN
    // generate first col when we have a cam point -> deformation from first point
    IF    bn0 THEN dx:=fC_SignConversion*Pn0.sPoint.dx; dy:=fC_SignConversion*Pn0.sPoint.dy; generateGridForCol:=TRUE;
    ELSIF bn1 THEN dx:=fC_SignConversion*Pn1.sPoint.dx; dy:=fC_SignConversion*Pn1.sPoint.dy; generateGridForCol:=TRUE;
    END_IF
    
  ELSE
    // not framed by two points toward the end, purge colums if no valid cam point is given next
    IF nGridCol - _nLocalGridColsGenerated >= 3 OR bLastCol THEN 
      IF _nCamPoints > 1 THEN
        // calc deformation based on first and last point
        bn0 := getCamPointX(nIdx:=1, Pn=>Pn0);  // first
        bn0 := getCamPointX(nIdx:=0, Pn=>Pn1);  // last
        fPointDist := Pn1.sPoint.x_ref-Pn0.sPoint.x_ref;      // distance of the two points
        fPointDist := SEL(fPointDist=0, fPointDist, 1);                // avoid 0 division crash
        relativePosX := (col_pos_px-Pn0.sPoint.x_ref) / (fPointDist);    // relative position of col between two cam points
        dx := fC_SignConversion * (Pn0.sPoint.dx + (Pn1.sPoint.dx - Pn0.sPoint.dx) * relativePosX);
        dy := fC_SignConversion * (Pn0.sPoint.dy + (Pn1.sPoint.dy - Pn0.sPoint.dy) * relativePosX);
      ELSE
        // repeat first correction (we do not have more information)
        pPx := SEL(bn1, ADR(Pn0), ADR(Pn1));
        dx := fC_SignConversion * pPx^.sPoint.dx;
        dy := fC_SignConversion * pPx^.sPoint.dy;
      END_IF
      
      generateGridForCol := TRUE;
    END_IF    
  END_IF
  
  // SIMULATION: some test grid (overwrite calculation)
  IF eTestGridSelection <> E_GridTypeSelection.Default THEN
    CASE eTestGridSelection OF
      0: dx := dx; dy := dy;                                        // default usekeep calculated
      1: dx := dy := 0;                                             // no deformation on ct 
      2: dx := nTestGridFactor; dy := 0;                            // dx static (Factor)
      3: dx := 0; dy := nTestGridFactor;                            // dy static (Factor)
      4: dx := 0; dy := TO_LREAL(col) * nTestGridFactor;            // dx = factor * col
      5: dx := TO_LREAL(col) * nTestGridFactor; dy := 0;            // dy = factor * col
      6: dx := SEL(row=1, 0, nTestGridFactor ); dy := 0;            // dx row 1 = factor ( test BOF)
    END_CASE
    generateGridForCol := TRUE;
  END_IF  
  
  // generate grid for column  
  IF generateGridForCol THEN
    LogLvl(Lvl:=E_LogSeverity.Debug, Msg:= F_Concat6('generate grid for col: ', TO_STRING(col), ' dx=', TO_STRING(dx), '/dy=', TO_STRING(dy)));

    // check for cam points and generate grid
    FOR row:=0 TO _sDefGridSettings.nGridSizeY -1 DO    // all points per col
      //LogLvl(Lvl:=E_LogSeverity.Debug, Msg:= F_Concat2(F_Concat2('gen grid point c:', TO_STRING(col)), F_Concat2('/r:', TO_STRING(row))));
      
      // - calculate x/y shift and rotation based on available CamPoints
      sTmpPoint.index := TO_DINT(col * _sDefGridSettings.nGridSizeY + row);
      sTmpPoint.x_ref := col * _sDefGridSettings.nGridPitchX;
      sTmpPoint.y_ref := row * _sDefGridSettings.nGridPitchY;
      sTmpPoint.dx    := dx;
      sTmpPoint.dy    := dy;
      sTmpPoint.col   := TO_DINT(col);
      sTmpPoint.row   := TO_DINT(row);
      sTmpPoint.valid := TRUE;
      storeDeformationPoint(sPoint:=sTmpPoint);    // save point to table
    END_FOR
    
    _nLocalGridColsGenerated := _nLocalGridColsGenerated + 1;
  END_IF
  
END_FOR


// set state variables which would be updated in PyUpdate/PyExed
_tExecutionTime := T#2MS;
_nErrorId := 0;
bPythonError := FALSE;
bPythonBusy := SEL(_nGridPoints >= _sDefGridSettings.nGridPoints, TRUE, FALSE); // all points generated
//bPythonBusy := SEL(_nGridCols   >= _sDefGridSettings.nGridSizeX,  TRUE, FALSE);  // all columns generated

fTrig_Done(CLK:=bPythonBusy);
IF fTrig_Done.Q THEN
  ;
END_IF

bPythonDeformationDone := NOT bPythonBusy;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_ImageDeformation">
      <LineId Id="263" Count="2" />
      <LineId Id="282" Count="0" />
      <LineId Id="266" Count="1" />
      <LineId Id="288" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="289" Count="1" />
      <LineId Id="287" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="273" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.abort">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.addCamPoint">
      <LineId Id="45" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="68" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="69" Count="1" />
      <LineId Id="60" Count="1" />
      <LineId Id="52" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="42" Count="2" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.bAborted.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.bBusy.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.bDone.Get">
      <LineId Id="12" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.bError.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.bUsePy.Get">
      <LineId Id="13" Count="1" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.eCamMode.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.eCamMode.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.eStep.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.eStep.Set">
      <LineId Id="6" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.fFeatureGrid.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.fFeatureGrid.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.fPrintLengthEffective.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.fPrintLengthEffective.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.getCamNeighbourPoint">
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="23" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.getCamPointX">
      <LineId Id="68" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="74" Count="1" />
      <LineId Id="73" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="35" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.getDeformationPoint">
      <LineId Id="37" Count="0" />
      <LineId Id="41" Count="2" />
      <LineId Id="38" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="44" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.gridImgProc">
      <LineId Id="41" Count="1" />
      <LineId Id="30" Count="1" />
      <LineId Id="35" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.iDeformationHandler.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.iDeformationHandler.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.init">
      <LineId Id="10" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.nAvailableGridPoints.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.nErrorId.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.nProcessId.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.nProcessId.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.reset">
      <LineId Id="93" Count="20" />
      <LineId Id="115" Count="2" />
      <LineId Id="35" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.sDefGridSettings.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.sDefGridSettings.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.startDeformation">
      <LineId Id="9" Count="0" />
      <LineId Id="28" Count="1" />
      <LineId Id="22" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="15" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.storeCameraPoint">
      <LineId Id="7" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="44" Count="2" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.storeDeformationPoint">
      <LineId Id="36" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="47" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.tExecutionTime.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.updateDeformation">
      <LineId Id="313" Count="23" />
      <LineId Id="367" Count="0" />
      <LineId Id="337" Count="19" />
      <LineId Id="291" Count="0" />
    </LineIds>
    <LineIds Name="FB_ImageDeformation.updateLocal_1D_Marks">
      <LineId Id="871" Count="15" />
      <LineId Id="1036" Count="1" />
      <LineId Id="887" Count="13" />
      <LineId Id="983" Count="0" />
      <LineId Id="1000" Count="0" />
      <LineId Id="1008" Count="0" />
      <LineId Id="1010" Count="0" />
      <LineId Id="1039" Count="1" />
      <LineId Id="1002" Count="2" />
      <LineId Id="985" Count="0" />
      <LineId Id="987" Count="0" />
      <LineId Id="989" Count="0" />
      <LineId Id="991" Count="1" />
      <LineId Id="984" Count="0" />
      <LineId Id="998" Count="0" />
      <LineId Id="912" Count="52" />
      <LineId Id="1066" Count="0" />
      <LineId Id="977" Count="1" />
      <LineId Id="13" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>