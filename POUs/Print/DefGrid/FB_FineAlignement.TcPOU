<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_FineAlignement" Id="{b0fdbfcd-2a71-4ede-b938-0e28dbf7b80d}" SpecialFunc="None">
    <Declaration><![CDATA[(*
  This fb handles mechanical print unit corrections.
  - a 4p grid distortion
  - print unit bar banana correction
  NOTE: temperature extention of whole printbar is still handled in camera
*)
FUNCTION_BLOCK FB_FineAlignement EXTENDS FB_BasePrint IMPLEMENTS I_GridPointCorrection
VAR
  // config
  _fPxResolution     : LREAL; // pixel resolution
  _pAdsCam           : POINTER TO ST_ADS_CAMERA;  // camera interface PUC
  // corrections
  //-- 4 point PU deformation correction/distortion
  //    VISU setup point providing reference and correction (NOTE: persists settings internally)
  _fbPUCorrPoints    : ARRAY[1..4] OF FB_PointCorr;
  //-- banana correction
  _fT1 : LREAL;   // temperature 1
  _fT2 : LREAL;   // temperature 2
  _dx_middle : LREAL;  // correction in middle (for view only)
  _y_max : LREAL; // print unit width [mm]

  // helper
  lCtr     : UDINT;
  
  // unit test & debug
  _bUT_4p, _bUT_banana : BOOL;
  _sUTPoints_dx : ARRAY[0..nC_UT_cols, 0..nC_UT_rows] OF LREAL;
  _sUTPoints_dy : ARRAY[0..nC_UT_cols, 0..nC_UT_rows] OF LREAL;
END_VAR
VAR PERSISTENT
  //-- 4point correction
  _bEnable_4p    : BOOL := TRUE;
  _bEnablePuc_4p : BOOL := TRUE;
  //  persistence of points see: FB_PointCorr
  //-- banana correction
  _bEnable_banana : BOOL := TRUE;
  _e_max_per_deltaT : LREAL := 0.01;  // [mm/°C]  TODO: use from config
END_VAR
VAR CONSTANT
  // Unit test configuration
  nC_UT_cols : DINT := 6;   // for test only
  nC_UT_rows : DINT := 5;   // for test only
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// cyclic caluclation and view updates

//-- 4p correction
//   visu overrides (limitation rectancular point definition)
_fbPUCorrPoints[3].fX_Ref := _fbPUCorrPoints[1].fX_Ref;
_fbPUCorrPoints[4].fX_Ref := _fbPUCorrPoints[2].fX_Ref;
_fbPUCorrPoints[2].fY_Ref := _fbPUCorrPoints[1].fY_Ref;
_fbPUCorrPoints[4].fY_Ref := _fbPUCorrPoints[3].fY_Ref;
//   update CorrectionPoints view elements
FOR lCtr := 1 TO 4 DO
  _fbPUCorrPoints[lCtr](); 
END_FOR

//-- banana correction
// just calculate the dx in the middle of the PU, just for the VISU
calc_banana_correction(x_pos:=0, y_pos:=_y_max/(2*1000), fT1:=_fT1, fT2:=_fT2, dx_corr=>_dx_middle);
_dx_middle := _dx_middle * 1000; // [m] --> [mm] for visu

// Unit test
IF _bUT_4p THEN _bUT_4p := FALSE; _test_4p(); END_IF
IF _bUT_banana THEN _bUT_banana := FALSE; _test_banana(); END_IF
]]></ST>
    </Implementation>
    <Method Name="_test_4p" Id="{6f0fa0b6-cc58-4465-bff5-26ae640a97c0}">
      <Declaration><![CDATA[METHOD PRIVATE _test_4p
VAR
  sPoint : ST_DeformationPoint;
  nCol, nRow, nCrPoint : DINT;
  dx, dy : LREAL;       // correction in [m]
  dx_px, dy_px : DINT;  // correction in [px]
  nCorrectionX : ARRAY[1..4] OF REAL := [-0.25, -0.2, 0.35, 0.35];
  nCorrectionY : ARRAY[1..4] OF REAL := [-0.45, -0.3, -0.8, -0.65];
  nCorrectionPointX_PLC : ARRAY[1..4] OF REAL := [0, 1000,   0, 1000];
  nCorrectionPointY_PLC : ARRAY[1..4] OF REAL := [0,   0, 702, 702];
  nCorrectionPointX_PUC : ARRAY[1..4] OF REAL := [0, 671.99,   0, 671.99];
  nCorrectionPointY_PUC : ARRAY[1..4] OF REAL := [-0.0001666666, -0.0001666666, 754.2108, 754.2108];
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// setup test correcton points location for PLC & PUC 4p testing
FOR nCrPoint:=1 TO 4 DO
  // correction point location
  // -- PLC
  _fbPUCorrPoints[nCrPoint].fX_Ref := nCorrectionPointX_PLC[nCrPoint];
  _fbPUCorrPoints[nCrPoint].fY_Ref := nCorrectionPointY_PLC[nCrPoint];
  // -- PUC  
  _pAdsCam^.sI_CorrectionPointIndication[nCrPoint].posx := nCorrectionPointX_PUC[nCrPoint];
  _pAdsCam^.sI_CorrectionPointIndication[nCrPoint].posy := nCorrectionPointY_PUC[nCrPoint];
  
  // point correction  
  // -- PLC
  _fbPUCorrPoints[nCrPoint].fX := nCorrectionX[nCrPoint];
  _fbPUCorrPoints[nCrPoint].fY := nCorrectionY[nCrPoint];
  // -- PUC
  _pAdsCam^.sI_CorrectionPointIndication[nCrPoint].x := nCorrectionX[nCrPoint];
  _pAdsCam^.sI_CorrectionPointIndication[nCrPoint].y := nCorrectionY[nCrPoint];
END_FOR

// generate internal test grid
FOR nCol:=0 TO nC_UT_cols DO
  FOR nRow:=0 TO nC_UT_rows DO
    sPoint.col := nCol;
    sPoint.row := nRow;
    sPoint.x_ref := nCol * TO_DINT(GVL_Deformation.nC_GridPitch_X);
    sPoint.y_ref := nRow * TO_DINT(GVL_Deformation.nC_GridPitch_Y);
    sPoint.dx := 0;   // no previous deformation
    sPoint.dy := 0;   // no previous deformation
    
    // calc 4p PLC correction and apply to point
    calc_4p_correction(
        x_pos:=F_SubPixelToMeter(lPosSubPx:=sPoint.x_ref, fResSubPx:=_fPxResolution), 
        y_pos:=F_SubPixelToMeter(lPosSubPx:=sPoint.y_ref, fResSubPx:=_fPxResolution), 
        dx_corr=>dx, 
        dy_corr=>dy);
    LogInfo(
      F_Concat4(
        '4p PLC: point:', 
        F_Concat4(' x=', TO_STRING(sPoint.x_ref), '/y=', TO_STRING(sPoint.y_ref)),
        F_Concat2(' dx=', TO_STRING(dx)),
        F_Concat2(' dy=', TO_STRING(dy))
      )
    );

    // --- store in table for verification with Excel caluculation
    dx_px := F_MeterToSubPixel(fPosMeter:=dx, fResoSubPx:=_fPxResolution);
    dy_px := F_MeterToSubPixel(fPosMeter:=dy, fResoSubPx:=_fPxResolution);
    // save corrected point
    _sUTPoints_dx[nCol, nRow] := dx_px;
    _sUTPoints_dy[nCol, nRow] := dy_px;
    // print corrected point
    LogInfo(
      F_Concat4(
        F_Concat4('[c/r] ', TO_STRING(sPoint.col), '/', TO_STRING(sPoint.row)),
        F_Concat7(' dx: ', TO_STRING(sPoint.dx), '>', TO_STRING(dx_px), ' (', TO_STRING(dx), ')'),
        F_Concat7(' dy: ', TO_STRING(sPoint.dy), '>', TO_STRING(dy_px), ' (', TO_STRING(dy), ')'),
        SEL(sPoint.dx<>dx_px OR sPoint.dy<>dy_px,'',' !!!')
      )
    );
    // ---------------------------------
    
    // calc 4p PUC correction and apply to point
    calc_PUC_4p_correction(
        x_pos:=F_SubPixelToMeter(lPosSubPx:=sPoint.x_ref, fResSubPx:=_fPxResolution), 
        y_pos:=F_SubPixelToMeter(lPosSubPx:=sPoint.y_ref, fResSubPx:=_fPxResolution), 
        dx_corr=>dx, 
        dy_corr=>dy);
    LogInfo(
      F_Concat4(
        '4p PUC: point:', 
        F_Concat4(' x=', TO_STRING(sPoint.x_ref), '/y=', TO_STRING(sPoint.y_ref)),
        F_Concat2(' dx=', TO_STRING(dx)),
        F_Concat2(' dy=', TO_STRING(dy))
      )
    );

  END_FOR  
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="_test_banana" Id="{cdda5b50-a20e-4ef0-8e55-027af444ef1f}">
      <Declaration><![CDATA[METHOD PRIVATE _test_banana
VAR
  sPoint : ST_DeformationPoint;
  nCol, nRow : DINT;
  dx, dy : LREAL;       // correction in [m]
  dx_px, dy_px : LREAL;  // correction in [px]
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// generate internal grid
FOR nCol:=0 TO nC_UT_cols DO
  FOR nRow:=0 TO nC_UT_rows DO
    sPoint.col := nCol;
    sPoint.row := nRow;
    sPoint.x_ref := nCol * TO_DINT(GVL_Deformation.nC_GridPitch_X);
    sPoint.y_ref := nRow * TO_DINT(GVL_Deformation.nC_GridPitch_Y);
    sPoint.dx := 0;   // no previous deformation
    sPoint.dy := 0;   // no previous deformation
    
    // calc correction and apply to point
    calc_banana_correction(
        x_pos:=F_SubPixelToMeter(lPosSubPx:=sPoint.x_ref, fResSubPx:=_fPxResolution), 
        Y_pos:=F_SubPixelToMeter(lPosSubPx:=sPoint.y_ref, fResSubPx:=_fPxResolution),
        fT1 := 68,
        fT2 := 48, 
        dx_corr=>dx
    );
    dx_px := dx;
    dy_px := dy;
    // save corrected point (dx @y-pos)
    _sUTPoints_dx[nCol, nRow] := dx_px;
    _sUTPoints_dy[nCol, nRow] := F_SubPixelToMeter(lPosSubPx:=sPoint.y_ref, fResSubPx:=_fPxResolution)*1000;
    
    // print corrected point
    LogInfo(
      F_Concat4(
        F_Concat4('[c/r] ', TO_STRING(sPoint.col), '/', TO_STRING(sPoint.row)),
        F_Concat6(' dx: ', TO_STRING(sPoint.dx), '>', TO_STRING(TO_DINT(dx_px)), ' [', TO_STRING(dx)),
        F_Concat6('  dy: ', TO_STRING(sPoint.dy), '>', TO_STRING(TO_DINT(dy_px)), ' [', TO_STRING(dy)),
        SEL(sPoint.dx<>dx_px OR sPoint.dy<>dy_px,'',' !!!')
      )
    );
  END_FOR  
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="calc_4p_correction" Id="{c5b8318f-9300-4b60-afbb-0f066a2ad2b7}">
      <Declaration><![CDATA[(*
  Calculate grid point displacement for a distortion with 4 rectangular defined points.
  Uses 2-bilinear interpolation between the 4 rectancular reference points.
*)
METHOD PRIVATE calc_4p_correction : BOOL
VAR_INPUT
  x_pos   : LREAL;    // point x position [m]
  y_pos   : LREAL;    // point y position [m]
END_VAR
VAR_OUTPUT
  dx_corr : LREAL;    // point correction x [m]
  dy_corr : LREAL;    // point correction y [m]
END_VAR
VAR
  dx, dy : LREAL;     // difference between Calibration Points (rectangle)
  x1, x2, y1, y2 : LREAL;
  cx1, cx2, cy1, cy2 : LREAL;
  GPx, GPy : LREAL;
  CVx, CVy : LREAL;
  lErrCtr : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Grid point position
GPx := x_pos; 
GPy := y_pos;

// Interpolation in x
x1 := _fbPUCorrPoints[1].fX_Ref / 1000;    // [mm -> m]
x2 := _fbPUCorrPoints[2].fX_Ref / 1000;    // [mm -> m]
dx := x2-x1;
IF dx = 0 THEN F_Report_Error(ErrType:=EN_REPORT_ERROR_TYPE.Report_Error_0Pointer); RETURN; END_IF

cx1 := (x2-GPx)/dx * (_fbPUCorrPoints[1].fX / 1000) + (GPx-x1)/dx * (_fbPUCorrPoints[2].fX / 1000);
cx2 := (x2-GPx)/dx * (_fbPUCorrPoints[3].fX / 1000) + (GPx-x1)/dx * (_fbPUCorrPoints[4].fX / 1000);
cy1 := (x2-GPx)/dx * (_fbPUCorrPoints[1].fY / 1000) + (GPx-x1)/dx * (_fbPUCorrPoints[2].fY / 1000);
cy2 := (x2-GPx)/dx * (_fbPUCorrPoints[3].fY / 1000) + (GPx-x1)/dx * (_fbPUCorrPoints[4].fY / 1000);

// Interpolation in y
y1 := _fbPUCorrPoints[1].fY_Ref / 1000;    // [mm -> m]
y2 := _fbPUCorrPoints[3].fY_Ref / 1000;    // [mm -> m]
dy := y2-y1;
IF dy = 0 THEN F_Report_Error(ErrType:=EN_REPORT_ERROR_TYPE.Report_Error_0Pointer); RETURN; END_IF

// Calc interpolated 
CVx := (y2 - GPy)/dy * cx1 + (GPy-y1)/dy * cx2;
CVy := (y2 - GPy)/dy * cy1 + (GPy-y1)/dy * cy2;

// return accurate new correction only
dx_corr := CVx;
dy_corr := CVy;

calc_4p_correction := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="calc_banana_correction" Id="{cd11fc31-cdd1-4fff-a3a1-69aafb3db5bd}">
      <Declaration><![CDATA[(*
  Calculate grid point displacement for print unit banana deformation.
  2nd order approximation.
*)
METHOD PRIVATE calc_banana_correction : BOOL
VAR_INPUT
  x_pos   : LREAL;    // point x position [m]
  y_pos   : LREAL;    // point y position [m]
  fT1     : LREAL;    // temperature 1 [°C]
  fT2     : LREAL;    // temperature 2 [°C]
END_VAR
VAR_OUTPUT
  dx_corr : LREAL;    // point correction x [m]
END_VAR
VAR
  delta_T : LREAL;   // delta temperature
  e_max   : LREAL;   //
  a : LREAL;
  x_dash, y_dash : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _y_max = 0 THEN RETURN; END_IF

x_dash := y_pos * 1000; // [m] -> [mm]

delta_T := fT2-fT1;
e_max   := delta_T * _e_max_per_deltaT;

a := 4 * e_max /  EXPT(_y_max, 2);
y_dash := a * EXPT(x_dash - (_y_max / 2), 2) - e_max;

// correction value
dx_corr := (y_dash / 1000);  // [mm] -> [m]

calc_banana_correction := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="calc_PUC_4p_correction" Id="{49285f29-32e6-41ef-a994-fe07d41d686f}">
      <Declaration><![CDATA[(*
  Calculate grid point displacement for a distortion with 4 rectangular defined points.
  Uses 2-bilinear interpolation between the 4 rectancular reference points.
*)
METHOD PRIVATE calc_PUC_4p_correction : BOOL
VAR_INPUT
  x_pos   : LREAL;    // point x position [m]
  y_pos   : LREAL;    // point y position [m]
END_VAR
VAR_OUTPUT
  dx_corr : LREAL;    // point correction x [m]
  dy_corr : LREAL;    // point correction y [m]
END_VAR
VAR
  dx, dy : LREAL;     // difference between Calibration Points (rectangle)
  x1, x2, y1, y2 : LREAL;
  cx1, cx2, cy1, cy2 : LREAL;
  GPx, GPy : LREAL;
  CVx, CVy : LREAL;
  lErrCtr : UDINT;
END_VAR
VAR CONSTANT
  bC_InvertValX : BOOL := TRUE;
  bC_InvertValY : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Grid point position
GPx := x_pos; 
GPy := y_pos;

// Interpolation in x
x1 := _pAdsCam^.sI_CorrectionPointIndication[1].posx / 1000;    // [mm -> m]
x2 := _pAdsCam^.sI_CorrectionPointIndication[2].posx / 1000;    // [mm -> m]
dx := x2-x1;
IF dx = 0 THEN F_Report_Error(ErrType:=EN_REPORT_ERROR_TYPE.Report_Error_0Pointer); RETURN; END_IF

// NOTE: x is inverted (compare to fX / fY method of FB_PointCorr)
cx1 := (x2-GPx)/dx * ((_pAdsCam^.sI_CorrectionPointIndication[1].x * -1) / 1000) + (GPx-x1)/dx * ((_pAdsCam^.sI_CorrectionPointIndication[2].x * -1) / 1000);
cx2 := (x2-GPx)/dx * ((_pAdsCam^.sI_CorrectionPointIndication[3].x * -1) / 1000) + (GPx-x1)/dx * ((_pAdsCam^.sI_CorrectionPointIndication[4].x * -1) / 1000);
cy1 := (x2-GPx)/dx * ((_pAdsCam^.sI_CorrectionPointIndication[1].y) / 1000) + (GPx-x1)/dx * ((_pAdsCam^.sI_CorrectionPointIndication[2].y) / 1000);
cy2 := (x2-GPx)/dx * ((_pAdsCam^.sI_CorrectionPointIndication[3].y) / 1000) + (GPx-x1)/dx * ((_pAdsCam^.sI_CorrectionPointIndication[4].y) / 1000);

// Interpolation in y
y1 := _pAdsCam^.sI_CorrectionPointIndication[1].posy / 1000;    // [mm -> m]
y2 := _pAdsCam^.sI_CorrectionPointIndication[3].posy / 1000;    // [mm -> m]
dy := y2-y1;
IF dy = 0 THEN F_Report_Error(ErrType:=EN_REPORT_ERROR_TYPE.Report_Error_0Pointer); RETURN; END_IF

// Calc interpolated 
CVx := (y2 - GPy)/dy * cx1 + (GPy-y1)/dy * cx2;
CVy := (y2 - GPy)/dy * cy1 + (GPy-y1)/dy * cy2;

// return accurate new correction only
dx_corr := CVx;
dy_corr := CVy;

calc_PUC_4p_correction := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="fT_PL1" Id="{b286c81c-0aff-4511-94c9-d4cc9bd4439b}">
      <Declaration><![CDATA[PROPERTY fT_PL1 : LREAL]]></Declaration>
      <Set Name="Set" Id="{c98c4823-db0a-4cb5-8e5c-1cb8271580d0}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fT1 := fT_PL1;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="fT_PL2" Id="{54ff08d7-dae5-4a96-a73a-97aa019a8e38}">
      <Declaration><![CDATA[PROPERTY fT_PL2 : LREAL]]></Declaration>
      <Set Name="Set" Id="{1684f327-46b0-49b3-a6db-fbee77699606}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_fT2 := fT_PL2;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="init" Id="{22d51a6a-e008-40d7-a511-92f228aee50f}">
      <Declaration><![CDATA[METHOD init : BOOL
VAR_INPUT
  pAdsCam        : POINTER TO ST_ADS_CAMERA;  // camera interface PUC
  fPxReso        : LREAL;   // pixel resolution
  fPuWidth       : LREAL;   // Print unit width [m]
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_fPxResolution := fPxReso;
_y_max         := fPuWidth * 1000;  // -> [mm]
_pAdsCam       := pAdsCam;
IF _pAdsCam = 0 THEN LogError('missing _pAdsCam, ads interface unknown, call worker specific init before'); END_IF

// PU Deformation
_fbPUCorrPoints[1].init(aName:='P1', aUnit:='mm', fX_Min:=-5, fX_Max:=5, fY_Min:=-5, fY_Max:=5, fIncrStep:=0.05, 
                        bButnInvertX:=TRUE, bButnInvertY:=TRUE, bValInvertX:=TRUE, bValInvertY:=FALSE);
_fbPUCorrPoints[2].init(aName:='P2', aUnit:='mm', fX_Min:=-5, fX_Max:=5, fY_Min:=-5, fY_Max:=5, fIncrStep:=0.05,
                        bButnInvertX:=TRUE, bButnInvertY:=TRUE, bValInvertX:=TRUE, bValInvertY:=FALSE);
_fbPUCorrPoints[3].init(aName:='P3', aUnit:='mm', fX_Min:=-5, fX_Max:=5, fY_Min:=-5, fY_Max:=5, fIncrStep:=0.05,
                        bButnInvertX:=TRUE, bButnInvertY:=TRUE, bValInvertX:=TRUE, bValInvertY:=FALSE);
_fbPUCorrPoints[4].init(aName:='P4', aUnit:='mm', fX_Min:=-5, fX_Max:=5, fY_Min:=-5, fY_Max:=5, fIncrStep:=0.05,
                        bButnInvertX:=TRUE, bButnInvertY:=TRUE, bValInvertX:=TRUE, bValInvertY:=FALSE);

]]></ST>
      </Implementation>
    </Method>
    <Method Name="updateCorrection" Id="{67567b6c-ad9f-4c43-b042-ce1ae67d99c3}">
      <Declaration><![CDATA[(*
  Apply fine-alignement corrections to DefGrid point
*)
METHOD updateCorrection : BOOL
VAR_INPUT
  pPoint : POINTER TO ST_DeformationPointAccurate;
END_VAR
VAR
  x_pos, dx_corr, dx_tmp : LREAL; // [m]
  y_pos, dy_corr, dy_tmp : LREAL; // [m]
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// grid point position
x_pos := F_SubPixelToMeter(lPosSubPx:=FC_LREAL_TO_DINT(pPoint^.x_ref), fResSubPx:=_fPxResolution);  // [px -> m] 
y_pos := F_SubPixelToMeter(lPosSubPx:=FC_LREAL_TO_DINT(pPoint^.y_ref), fResSubPx:=_fPxResolution);  // [px -> m]
dx_corr := 0;
dy_corr := 0;

// calc - 4 point sheet deformation (PU and machine mechanical distortions)
IF _bEnable_4p THEN
  calc_4p_correction(x_pos:=x_pos, y_pos:=y_pos, dx_corr=>dx_tmp, dy_corr=>dy_tmp);
  dx_corr := dx_tmp + dx_corr;
  dy_corr := dy_tmp + dy_corr;
END_IF

IF _bEnablePuc_4p THEN  (*PUC 4P correction used*)
  calc_PUC_4p_correction(x_pos:=x_pos, y_pos:=y_pos, dx_corr=>dx_tmp, dy_corr=>dy_tmp);
  dx_corr := dx_tmp + dx_corr;
  dy_corr := dy_tmp + dy_corr;
END_IF

// calc - banana correction
IF _bEnable_banana THEN
  calc_banana_correction(x_pos:=x_pos, y_pos:=y_pos, fT1:=_fT1, fT2:=_fT2, dx_corr=>dx_tmp);
  dx_corr := dx_tmp + dx_corr;
END_IF
// apply new correction to deformation correction 
pPoint^.dx := pPoint^.dx + F_MeterToSubPixelReal(fPosMeter:=dx_corr, fResoSubPx:=_fPxResolution);
pPoint^.dy := pPoint^.dy + F_MeterToSubPixelReal(fPosMeter:=dy_corr, fResoSubPx:=_fPxResolution);

updateCorrection := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_FineAlignement">
      <LineId Id="106" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="107" Count="0" />
      <LineId Id="69" Count="4" />
      <LineId Id="183" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="77" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="232" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="80" Count="2" />
      <LineId Id="113" Count="0" />
      <LineId Id="48" Count="0" />
    </LineIds>
    <LineIds Name="FB_FineAlignement._test_4p">
      <LineId Id="212" Count="76" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_FineAlignement._test_banana">
      <LineId Id="99" Count="8" />
      <LineId Id="143" Count="0" />
      <LineId Id="109" Count="1" />
      <LineId Id="124" Count="1" />
      <LineId Id="146" Count="1" />
      <LineId Id="126" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="111" Count="2" />
      <LineId Id="145" Count="0" />
      <LineId Id="114" Count="9" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_FineAlignement.calc_4p_correction">
      <LineId Id="96" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="16" Count="3" />
      <LineId Id="36" Count="0" />
      <LineId Id="20" Count="9" />
      <LineId Id="38" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="FB_FineAlignement.calc_banana_correction">
      <LineId Id="137" Count="1" />
      <LineId Id="106" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="FB_FineAlignement.calc_PUC_4p_correction">
      <LineId Id="96" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="130" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="126" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="167" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="139" Count="3" />
      <LineId Id="25" Count="1" />
      <LineId Id="128" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="FB_FineAlignement.fT_PL1.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FineAlignement.fT_PL2.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_FineAlignement.init">
      <LineId Id="23" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="30" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="25" Count="0" />
    </LineIds>
    <LineIds Name="FB_FineAlignement.updateCorrection">
      <LineId Id="38" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="50" Count="1" />
      <LineId Id="11" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="95" Count="2" />
      <LineId Id="99" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="77" Count="2" />
      <LineId Id="73" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="36" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>