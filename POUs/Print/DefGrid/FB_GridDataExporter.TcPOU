<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_GridDataExporter" Id="{a6e16905-996c-4000-bbd3-5d1efe3b1cb5}" SpecialFunc="None">
    <Declaration><![CDATA[(*Converts data to exportable formats*)
FUNCTION_BLOCK FB_GridDataExporter EXTENDS T_NamedBase
VAR_INPUT
  sOutputDir          : T_MaxString;    // output folder path (without \ at the end)
  sFileName           : T_MaxString;    // file name
  pFbImageDeformation : POINTER TO FB_ImageDeformation;
  nSelectGrid         : UDINT;          // 0=deformation calculated, 1=streamed grid
END_VAR
VAR_OUTPUT
  bBusy : BOOL;
END_VAR
VAR 
  // - file handling
  bSave, bLoad, bDump : BOOL;                   // commands
  fbSysFile           : FB_File_Basic_SysFile;  // config file access
  
  // - json handling
  fbJson              : FB_JsonSaxWriter;       // config writer (build json string from data)
  fbJsonRd            : FB_JsonDomParser;       // config parse on read/(edit) (parse json string into data)
  
  // - exported string
  sDoc                : STRING(nC_MaxStringSz); // big string holding all config file
  
  // helper
  sFileFormat         : STRING;        // selected file format 
  sOutputPath         : T_MaxString;   // file path to read/write
  bInitialized        : BOOL;
END_VAR
VAR CONSTANT
  nC_MaxStringSz      : UDINT := 10_000;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[// self setup -----------------------------
// - init
IF NOT bInitialized THEN Init(); RETURN; END_IF

// check & fix parameter
IF pFbImageDeformation = 0 THEN RETURN; END_IF

   IF bDump THEN bDump := NOT DumpGrid(); 
ELSIF bSave THEN bSave := FileSave();
ELSIF bLoad THEN bLoad := FileLoad();
END_IF

bBusy := bSave OR bLoad OR bDump;]]></ST>
    </Implementation>
    <Method Name="dumpCsv" Id="{4233e376-28e1-486f-b1d0-619ce0b279c5}">
      <Declaration><![CDATA[METHOD PRIVATE dumpCsv : BOOL
VAR_OUTPUT
  nSz : UDINT;
END_VAR
VAR
  i, k : UDINT := 0;
  nCamPoints : UDINT;
  sCamPoint : ST_CameraPointTbl;
  sGridPoint : ST_DeformationPointAccurate;
  nCols, nRows, nGridPoints : UDINT;
  sGridSettings : ST_DefGridSettings;
  tempStr : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nCamPoints :=pFbImageDeformation^.nAvailableCamPoints;
nGridPoints := pFbImageDeformation^.nAvailableGridPoints;
sGridSettings := pFbImageDeformation^.sDefGridSettings;
nCols := sGridSettings.nGridSizeX;
nRows := sGridSettings.nGridSizeY;

// build export csv string ----------------------------------
// reset string
MEMSET(destAddr:=ADR(sDoc), fillByte:=0, n:=SIZEOF(sDoc));

// grid  (dx/dy)
//    col0    col1    col2
// |  0/0  |  1/0  |  2/0  | ...  |  row0
// |  0/1  |  1/1  |  2/1  | ...  |  row1
FOR i:=0 TO nRows-1 DO
  FOR k:=0 TO nCols-1 DO
    // get deformation point
    pFbImageDeformation^.getDeformationPoint(nCol:=k, nRow:=i, nSel:=nSelectGrid, sPoint=>sGridPoint, bWasSet=>);
    tempStr := F_Concat3(
      F_Concat2('dx:', TO_STRING(sGridPoint.dx)),
      F_Concat2('/dy:', TO_STRING(sGridPoint.dy)),
      F_Concat2(',', '')
    );
    CONCAT2(pSrcString1:=ADR(sDoc), pSrcString2:=ADR(tempStr), pDstString:=ADR(sDoc), nDstSize:=SIZEOF(sDoc));  // point dx/dy
  END_FOR
  tempStr := '$n';
  CONCAT2(pSrcString1:=ADR(sDoc), pSrcString2:=ADR(tempStr), pDstString:=ADR(sDoc), nDstSize:=SIZEOF(sDoc));  // newline
END_FOR

tempStr := '$n';
CONCAT2(pSrcString1:=ADR(sDoc), pSrcString2:=ADR(tempStr), pDstString:=ADR(sDoc), nDstSize:=SIZEOF(sDoc));

// cam
FOR k:=1 TO nCamPoints DO
  pFbImageDeformation^.getCamPointX(nIdx:=k, Pn=>sCamPoint);
  tempStr := F_Concat5(
    F_Concat2('x_ref:', TO_STRING(sCamPoint.sPoint.x_ref)), 
    F_Concat2('/y_ref:', TO_STRING(sCamPoint.sPoint.y_ref)), 
    F_Concat2('-dx:', TO_STRING(sCamPoint.sPoint.dx)), 
    F_Concat2('/dy:', TO_STRING(sCamPoint.sPoint.dy)),
    F_Concat2(',', '')
  );
  CONCAT2(pSrcString1:=ADR(sDoc), pSrcString2:=ADR(tempStr), pDstString:=ADR(sDoc), nDstSize:=SIZEOF(sDoc));
END_FOR

tempStr := '$n';
CONCAT2(pSrcString1:=ADR(sDoc), pSrcString2:=ADR(tempStr), pDstString:=ADR(sDoc), nDstSize:=SIZEOF(sDoc));

nSz := LEN2(pSTRING:=ADR(sDoc));
dumpCsv := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="DumpGrid" Id="{de6113b8-c508-4943-a855-5bc858b3b061}">
      <Declaration><![CDATA[METHOD PRIVATE DumpGrid : BOOL 
VAR_OUTPUT
  nSz : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF    sFileFormat = 'csv'  THEN DumpGrid := dumpCsv(nSz=>nSz);
ELSE                            DumpGrid := dumpJson(nSz=>nSz);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="dumpJson" Id="{97cfe1c3-c8ec-4fe7-b0f0-77e52207b625}">
      <Declaration><![CDATA[METHOD PRIVATE dumpJson : BOOL
VAR_OUTPUT
  nSz : UDINT;
END_VAR
VAR
  i, k : UDINT := 0;
  nCamPoints : UDINT;
  sCamPoint : ST_CameraPointTbl;
  sGridPoint : ST_DeformationPointAccurate;
  nCols, nRows, nGridPoints : UDINT;
  sGridSettings : ST_DefGridSettings;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[nCamPoints :=pFbImageDeformation^.nAvailableCamPoints;
nGridPoints := pFbImageDeformation^.nAvailableGridPoints;
sGridSettings := pFbImageDeformation^.sDefGridSettings;
nCols := sGridSettings.nGridSizeX;
nRows := sGridSettings.nGridSizeY;

// build big json string ----------------------------------
fbJson.ResetDocument();
fbJson.StartObject();
// {
    fbJson.AddKey(key:='Grid');
    fbJson.StartObject();
      fbJson.AddKey(key:='NumberOfGridPoints');
      fbJson.AddUdint(value:=nGridPoints);
      fbJson.AddKey(key:='GridPoints');
      fbJson.StartArray();
      FOR i:=1 TO nRows DO
        fbJson.StartArray();
        FOR k:=1 TO nCols DO
          fbJson.StartObject();
          pFbImageDeformation^.getDeformationPoint(nCol:=k-1, nRow:=i-1, nSel:=nSelectGrid, sPoint=>sGridPoint, bWasSet=>);
          fbJson.AddKey(key:='col');
          fbJson.AddDint(value:=sGridPoint.col);
          fbJson.AddKey(key:='row');
          fbJson.AddDint(value:=sGridPoint.row);
          fbJson.AddKey(key:='x_ref');
          fbJson.AddLreal(value:=sGridPoint.x_ref);
          fbJson.AddKey(key:='y_ref');
          fbJson.AddLreal(value:=sGridPoint.y_ref);
          fbJson.AddKey(key:='dx');
          fbJson.AddLreal(value:=sGridPoint.dx);
          fbJson.AddKey(key:='dy');
          fbJson.AddLreal(value:=sGridPoint.dy);
          fbJson.AddKey(key:='valid');
          fbJson.AddBool(value:=sGridPoint.valid);
          fbJson.EndObject();
        END_FOR
        fbJson.EndArray();
      END_FOR
      fbJson.EndArray();
    fbJson.EndObject();
    
    
    fbJson.AddKey(key:='Cam');
    fbJson.StartObject();
      fbJson.AddKey(key:='NumberOfCamPoints');
      fbJson.AddUdint(value:=nCamPoints);
      fbJson.AddKey(key:='CamPoints');
      fbJson.StartArray();
      FOR k:=1 TO nCamPoints DO
        pFbImageDeformation^.getCamPointX(nIdx:=k, Pn=>sCamPoint);
        fbJson.StartObject();
        fbJson.AddKey(key:='x_ref');
        fbJson.AddLreal(value:=sCamPoint.sPoint.x_ref);
        fbJson.AddKey(key:='y_ref');
        fbJson.AddLreal(value:=sCamPoint.sPoint.x_ref);
        fbJson.AddKey(key:='dx');
        fbJson.AddLreal(value:=sCamPoint.sPoint.dx);
        fbJson.AddKey(key:='dy');
        fbJson.AddLreal(value:=sCamPoint.sPoint.dy);
        fbJson.AddKey(key:='valid');
        fbJson.AddBool(value:=sCamPoint.sPoint.valid);
        fbJson.EndObject();
      END_FOR    
      fbJson.EndArray();
    fbJson.EndObject();
   
    // ]
fbJson.EndObject();
// '}'

fbJson.CopyDocument(sDoc, SIZEOF(sDoc));
// document is now in big string -----------------------------

nSz := LEN2(pSTRING:=ADR(sDoc));
dumpJson := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FileLoad" Id="{4cd360ab-51fe-4f58-a31a-78f496b6e5e6}">
      <Declaration><![CDATA[(*
  Load Simulation configuration file and apply settings / modes / config to each FB_Sim.
  :return: TRUE as long busy
*)
METHOD PRIVATE FileLoad : BOOL
VAR_OUTPUT
  nError : UDINT;
END_VAR
VAR_INST
  nState : UDINT := 0;
  eof : BOOL;
  sz : UDINT := 0;
  errCode : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nState OF
  0:  // idle
    LogLvl(Lvl:=E_LogSeverity.Detail, 'Load file');
    IF sOutputPath <> '' THEN
      sDoc := '';
      nState := nState + 1; // start immediately
    ELSE
      nState := 4;   // go to parse only
    END_IF
    errCode := 0;

    
  1:  // opening file
    IF NOT fbSysFile.Open(SName:=sOutputPath, eMode:=E_FileMode.rd, bBinary:=FALSE) THEN
      IF fbSysFile.nErrId <> 0 THEN 
        errCode := fbSysFile.nErrId;
        nState := 99;
      ELSE
			  nState := nState + 1;
      END_IF
		END_IF
    
  2:  // reading file
    IF NOT fbSysFile.Read(pStr:=ADR(sDoc), nSize:=SIZEOF(sDoc), nRdBytes=>sz, bEOF=>eof) THEN
      IF fbSysFile.nErrId <> 0 THEN 
        errCode := fbSysFile.nErrId;
        nState := 99;
      ELSIF NOT eof THEN
        LogError('File could not be loaded fully');
        nState := nState + 1;
      ELSE
			  nState := nState + 1;
      END_IF
		END_IF
    
  3:  // closing file
    LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=F_Concat4('Loaded file, size=', TO_STRING(sz), ' file=', sOutputPath));
    IF NOT fbSysFile.Close() THEN
      IF fbSysFile.nErrId <> 0 THEN 
        errCode := fbSysFile.nErrId;
        nState := 99;
      ELSE
			  nState := nState + 1;
      END_IF
		END_IF
    
  4:  // parsing file
    //parseJson();
    nState := nState + 1;
    
  5:  // done
    nState := 0;
    
  99: // error
    LogError(F_Concat2('Load config stopped with error', TO_STRING(errCode)));
    nState := 0;
ELSE
  ;
END_CASE

// return values
nError := errCode;
FileLoad := nState <> 0;   // busy]]></ST>
      </Implementation>
    </Method>
    <Method Name="FileSave" Id="{163aa65e-e284-4ad9-ba70-5d4737ab8950}">
      <Declaration><![CDATA[METHOD PRIVATE FileSave : BOOL
VAR_OUTPUT
  nError : UDINT;
END_VAR
VAR_INST
  nState : UDINT := 0;
  errCode : UDINT;
  nSz : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE nState OF
  0:  // idle
    LogLvl(Lvl:=E_LogSeverity.Detail, Msg:=F_concat2('Saving file: ', sOutputPath));
    errCode := 0;
    nState := nState + 1;
      
  1:  // parsing file
    DumpGrid(nSz=>nSz);
    IF sOutputPath <> '' THEN
      nState := nState + 1;
    ELSE
      nState := 5;   // done (no file to write)
    END_IF
    
  2:  // opening file
    IF NOT   fbSysFile.Open(sName:=sOutputPath, eMode:=E_FileMode.wr, bBinary:=FALSE) THEN
      IF fbSysFile.nErrId <> 0 THEN 
        errCode := fbSysFile.nErrId;
        nState := 99;
      ELSE
			  nState := nState + 1;
      END_IF
		END_IF
    
  3:  // reading file
    IF NOT fbSysFile.Write(pStr:=ADR(sDoc), nSize:=nSz+1) THEN
      IF fbSysFile.nErrId <> 0 THEN 
        errCode := fbSysFile.nErrId;
        nState := 99;
      ELSE
			  nState := nState + 1;
      END_IF
		END_IF
    
  4:  // closing file
    LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=F_Concat2('Saved file=', sOutputPath));
    IF NOT fbSysFile.Close() THEN
      IF fbSysFile.nErrId <> 0 THEN 
        errCode := fbSysFile.nErrId;
        nState := 99;
      ELSE
			  nState := nState + 1;
      END_IF
		END_IF
    
  5:  // done
    nState := 0;
    
  99: // error
    LogError(F_Concat2('Save file stopped with error', TO_STRING(errCode)));
    nState := 0;
ELSE
  ;
END_CASE

// return values
nError := errCode;
FileSave := nState <> 0;   // busy
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{0b3b4c19-d57a-460d-a755-c549681d340e}">
      <Declaration><![CDATA[METHOD PRIVATE Init : BOOL]]></Declaration>
      <Implementation>
        <ST><![CDATA[LogLevel := E_LogSeverity.Info;

Init:= bInitialized := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="parseJson" Id="{1f3da447-b504-4923-bfa9-b2d2ec7f6cf1}">
      <Declaration><![CDATA[(*
  Parse json sting into data.
  :return: TRUE on success
*)
METHOD PRIVATE parseJson : BOOL
VAR
    // parser helper variables
  bHasMember  : BOOL;
  jsonRoot    : SJsonValue;   // full doc reference
  jsonModulAry, jsonIteratorModul, jsonIteratorEndModul, jsonModul : SJsonValue;  // handling module array
  jsonModeAry, jsonIteratorMode, jsonIteratorEndMode, jsonMode : SJsonValue;      // handling mode array
  jsonProp    : SJsonValue;   // effective single entry
  arySz       : UDINT;
  
  module      : T_MaxString;
  mode        : ST_SimModeDef;
  enable      : BOOL;
  active_mode : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// interpret new data ------------------------------
jsonRoot := fbJsonRd.ParseDocument(sJson:=jsonDoc);
bHasMember := fbJsonRd.HasMember(jsonRoot, 'modules');
IF (bHasMember) THEN
  // moules array
  bHasMember := FALSE;
  jsonModulAry := fbJsonRd.FindMember(jsonRoot, 'modules');
  arySz := fbJsonRd.GetArraySize(jsonModulAry);
  jsonIteratorModul := fbJsonRd.ArrayBegin(jsonModulAry);
  jsonIteratorEndModul := fbJsonRd.ArrayEnd(jsonModulAry);
  WHILE jsonIteratorModul <> jsonIteratorEndModul DO
    // for each module
    jsonModul := fbJsonRd.GetArrayValue(jsonIteratorModul);
    jsonProp := fbJsonRd.FindMember(jsonModul, 'module');
    module := fbJsonRd.GetString(jsonProp);   // simulation module name
    jsonProp := fbJsonRd.FindMember(jsonModul, 'sim_enable');
    enable := fbJsonRd.GetBool(jsonProp);   // simulation enable
    jsonProp := fbJsonRd.FindMember(jsonModul, 'active_mode');
    active_mode := fbJsonRd.GetString(jsonProp);   // simulation active mode
    // mode array
    jsonModeAry := fbJsonRd.FindMember(jsonModul, 'modes');
    arySz := fbJsonRd.GetArraySize(jsonModeAry);
    jsonIteratorMode := fbJsonRd.ArrayBegin(jsonModeAry);
    jsonIteratorEndMode := fbJsonRd.ArrayEnd(jsonModeAry);
    WHILE jsonIteratorMode <> jsonIteratorEndMode DO
      // for each mode
      jsonMode := fbJsonRd.GetArrayValue(jsonIteratorMode);
      mode.aMode := fbJsonRd.GetString(jsonIteratorMode);       // get mode name
      jsonProp := fbJsonRd.FindMember(jsonMode, mode.aMode);
      fbJsonrd.CopyJson(jsonProp, mode.sCfg, SIZEOF(mode.sCfg));    // get config data (raw json)
      
      // --- setup module ---
      setupSimModule(sModule:=module, sMode:=mode, enable:=enable, active_mode:=active_mode);
      // --------------------
      
      jsonIteratorMode := fbJsonRd.NextArray(jsonIteratorMode);
		END_WHILE
    // next modules
    jsonIteratorModul := fbJsonRd.NextArray(jsonIteratorModul);
  END_WHILE
END_IF

parseJson := TRUE;    // TODO: check for parsing errors]]></ST>
      </Implementation>
    </Method>
    <Method Name="startExport" Id="{d8940ba5-d237-4a7b-aef8-04b7114250d0}">
      <Declaration><![CDATA[METHOD startExport
VAR
  sFileEnding : STRING;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF pFbImageDeformation = 0 THEN RETURN; END_IF

sFileEnding := F_FileGetExtension(aPath:=sFileName);
IF     sFileEnding = 'csv'  THEN sFileFormat := 'csv';
ELSIF  sFileEnding = 'json' THEN sFileFormat := 'json';  
END_IF

sOutputPath := F_Concat3(sOutputDir, '\', sFileName);

bSave := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_GridDataExporter">
      <LineId Id="684" Count="2" />
      <LineId Id="809" Count="1" />
      <LineId Id="693" Count="0" />
      <LineId Id="687" Count="0" />
      <LineId Id="778" Count="0" />
      <LineId Id="688" Count="1" />
      <LineId Id="695" Count="0" />
      <LineId Id="691" Count="0" />
      <LineId Id="652" Count="0" />
    </LineIds>
    <LineIds Name="FB_GridDataExporter.dumpCsv">
      <LineId Id="197" Count="6" />
      <LineId Id="275" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="292" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="213" Count="1" />
      <LineId Id="277" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="296" Count="1" />
      <LineId Id="308" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="289" Count="1" />
      <LineId Id="288" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="238" Count="0" />
      <LineId Id="246" Count="1" />
      <LineId Id="259" Count="0" />
      <LineId Id="302" Count="1" />
      <LineId Id="299" Count="1" />
      <LineId Id="309" Count="0" />
      <LineId Id="301" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="306" Count="1" />
      <LineId Id="305" Count="0" />
      <LineId Id="270" Count="1" />
      <LineId Id="50" Count="0" />
      <LineId Id="295" Count="0" />
    </LineIds>
    <LineIds Name="FB_GridDataExporter.DumpGrid">
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_GridDataExporter.dumpJson">
      <LineId Id="85" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="140" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="7" Count="4" />
      <LineId Id="108" Count="4" />
      <LineId Id="144" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="151" Count="0" />
      <LineId Id="136" Count="2" />
      <LineId Id="135" Count="0" />
      <LineId Id="116" Count="11" />
      <LineId Id="149" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="129" Count="1" />
      <LineId Id="61" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="86" Count="1" />
      <LineId Id="71" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="75" Count="1" />
      <LineId Id="94" Count="1" />
      <LineId Id="100" Count="3" />
      <LineId Id="105" Count="1" />
      <LineId Id="104" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="44" Count="2" />
      <LineId Id="57" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="FB_GridDataExporter.FileLoad">
      <LineId Id="412" Count="61" />
      <LineId Id="143" Count="0" />
    </LineIds>
    <LineIds Name="FB_GridDataExporter.FileSave">
      <LineId Id="298" Count="6" />
      <LineId Id="361" Count="0" />
      <LineId Id="306" Count="49" />
      <LineId Id="117" Count="0" />
    </LineIds>
    <LineIds Name="FB_GridDataExporter.Init">
      <LineId Id="96" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="97" Count="1" />
    </LineIds>
    <LineIds Name="FB_GridDataExporter.parseJson">
      <LineId Id="6" Count="39" />
      <LineId Id="5" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="69" Count="0" />
    </LineIds>
    <LineIds Name="FB_GridDataExporter.startExport">
      <LineId Id="10" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>