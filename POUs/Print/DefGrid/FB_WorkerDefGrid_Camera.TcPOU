<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_WorkerDefGrid_Camera" Id="{6056a89a-8aeb-47d0-8a92-08f600f3d0b4}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_WorkerDefGrid_Camera EXTENDS FB_WorkerDefGrid IMPLEMENTS I_CameraSink
VAR
  // references
  _pAdsCam        : POINTER TO FB_ADS_CAMERA;
  _iParamMediator : I_ParamMediator;
  _fPrintUnitWidth : LREAL;
  
  // camera list
  _iCamList       : ARRAY[1..nMAXCAM] OF I_Camera; 
  _sCamName       : ARRAY[1..5] OF STRING;
  _nRegisteredCam : UDINT;    // number registered cameras
  _iActiveCam     : I_Camera; // active selected camera interface

  // cam status
  _bCamValid      : BOOL;
  _bCamReady      : BOOL;    // Camera no error
  _bConnectionOk  : BOOL;    //
  _bLineCamType   : BOOL;    // TRUE if it's a LineCamera
  _bSetInitCam    : BOOL;    // set initial camera
  _bCamStarted    : BOOL;    // Camera started
  
  // cam point status
  _bTeachOk       : BOOL;    // Teach successful
  _nTeachedPoints : UDINT;   // Teached points for this job
  _nScannedPoints : UDINT;   // Scanned points on current sheet
  _nAddedPoint    : UDINT;   // point sent to image deformation on ct
  _nCamBufferPoints : UDINT;  // cam point input stream buffer (allows jittering the Attach of CT)
  _CamBufferPoints : ARRAY[1..GVL_Camera.cMaxNbMarks] OF ST_DeformationPointAccurate;
  
  // deformation status
  _eDeformationType            : E_DeformationType;
  _eDeformStep                 : E_DeformationStep;   // status deformation of ct
  _nCamDetected_X0             : DINT;   // detected sheet/repeat position [SubPx]              

  // Messages
  _pMsgConfig                  : POINTER TO ST_MSG_CONFIG;
  bCamNotAvailable             : BOOL;
  fbMsg_CamNotAvailable        : FB_MESSAGE;
  bCamModeNotSupported         : BOOL;
  fbMsg_CamModeNotSupported    : FB_MESSAGE;
  fbMsg_CamNoConnection        : FB_MESSAGE;
  
END_VAR

VAR PERSISTENT
  _fFeatureGrid   : LREAL := 2048;  // feature grid witdh (feature pich in x of cam frames), TODO: could be a normal var now
  _nActiveCam     : UDINT := 1;     // active camera selection
END_VAR

VAR CONSTANT
  nMAXCAM : UDINT := 5;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="I_CameraSink" Id="{9ec3d051-264b-49d1-b711-6f2c7c383bca}" />
    <Folder Name="I_PrintStatusClient" Id="{1c674285-cbe4-4e1b-ab1f-c86c3f21aeed}" />
    <Method Name="ActivateCamera" Id="{99a01e14-fa02-42f4-a663-cfcdcb61b4bd}">
      <Declaration><![CDATA[METHOD PRIVATE ActivateCamera : BOOL
VAR_INPUT
  iCam : I_Camera;
END_VAR
VAR
  i : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iCam = 0 THEN F_Report_Error(ErrType:=EN_REPORT_ERROR_TYPE.Report_Error_0Pointer); RETURN; END_IF

IF _iActiveCam <> 0 THEN // Remove existing links
  _iActiveCam.DeactivateCam(iSink := THIS^);
END_IF

IF iCam.ActivateCam(iCameraSink := THIS^) THEN
  // get and set array index of registered cameras 
  FOR i :=1 TO _nRegisteredCam DO
    IF iCam = _iCamList[i] THEN
      _nActiveCam := i;              // set array index for visu/drop down
      EXIT; // select first found cam
    END_IF
  END_FOR
  _iActiveCam := iCam;        // set new cam
  ActivateCamera:=TRUE;
ELSE
  ActivateCamera:=FALSE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddCamPoint" Id="{f453464a-4078-41ca-a01d-17dc87f686bd}" FolderPath="I_CameraSink\">
      <Declaration><![CDATA[METHOD AddCamPoint : BOOL
VAR_INPUT
	sDeformationPoint	: ST_DeformationPointAccurate;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nCamBufferPoints >= GVL_Camera.cMaxNbMarks THEN LogError('AddCamPoint: CamPoint buffer is full (overflow), ignore point'); RETURN; END_IF

// add to internal buffer
_nCamBufferPoints := _nCamBufferPoints + 1;
_CamBufferPoints[_nCamBufferPoints] := sDeformationPoint; 

AddCamPoint := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddTeachPoint" Id="{f2606cab-e071-41ba-b4be-aa219442a713}" FolderPath="I_CameraSink\">
      <Declaration><![CDATA[METHOD AddTeachPoint : BOOL
VAR_INPUT
	sTeachPoint	: ST_DeformationPointAccurate;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// ignore the teach points for now

AddTeachPoint := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Attach" Id="{af64d5ac-9c9c-46b2-994b-9271d2dee30d}">
      <Declaration><![CDATA[METHOD PROTECTED  Attach : BOOL
VAR_INPUT
  iCT              : I_CT;                         (*container at triggered event position*)
END_VAR
VAR
  bDeformErr : BOOL;
  eDeformStep : E_DeformationStep;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Attach := FALSE;
IF SUPER^.Attach(iCT:=iCT) THEN
  // OK, attached (enabled, was ok to be attached)
  IF _pNewAttached = 0 THEN RETURN; END_IF
  
  // Additional worker checks
  bDeformErr := _pNewAttached^.getDeformationStatus(eDStep=>eDeformStep);   // get latest status 
  // - deformation started? and no deformation error so far
  IF bDeformErr OR eDeformStep = E_DeformationStep.nothing THEN
    Release(iCT:=iCT);  // nothing to do anymore

  // - job is valid?
  ELSIF iCT.pJob = 0 OR NOT _bJobActive THEN
    _pNewAttached^.AbortDeformation(sReason:='No valid job', Src:=_pEcSrc^, bHideLog:=TRUE);
    Release(iCT:=iCT);

  // - camera ready
  ELSIF (NOT _bCamValid OR NOT _bCamReady) THEN  // check if cam is ready
    _pNewAttached^.AbortDeformation(sReason:='Camera invalid or not ready for attach', Src:=_pEcSrc^, bHideLog:=FALSE);
    Release(iCT:=iCT);

  // OK attach
  ELSE
    // start cam on ct
    LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=F_Concat4('Start Camera with mode: ', TO_STRING(_iActiveCam.eCameraMode), ' on CT ', _pNewAttached^.print(0)));
    _pNewAttached^.StartCamera(eCameraMode:=_iActiveCam.eCameraMode, fFeatureGrid:=_fFeatureGrid, bResetDeformation:=TRUE);
  
    Attach := TRUE;
	END_IF
  
ELSE
  // parent attach failed case
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Property Name="bCamOk" Id="{5ecde9b0-3187-4838-9771-10aabc571882}">
      <Declaration><![CDATA[PROPERTY bCamOk : BOOL]]></Declaration>
      <Get Name="Get" Id="{a8d145ae-a852-4e60-a712-39a8f1889f94}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bCamOk := _bCamValid;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bConnError" Id="{134a7455-f42f-4d23-9774-a052257145a6}">
      <Declaration><![CDATA[PROPERTY bConnError : BOOL]]></Declaration>
      <Get Name="Get" Id="{923e802f-8818-4054-aa36-ae56db26c1db}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[// TODO: propose the communication error on a better way.
bConnError := NOT _bConnectionOk;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bLineCamActive" Id="{76835a52-9212-491e-85d8-29398d3bbb8a}">
      <Declaration><![CDATA[PROPERTY bLineCamActive : BOOL]]></Declaration>
      <Get Name="Get" Id="{dfd3a19d-9364-487f-af97-eece4f64fd7b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bLineCamActive := _bLineCamType;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="CamDone" Id="{dc314c49-d032-45fe-9f30-26d4dc97edc1}" FolderPath="I_CameraSink\">
      <Declaration><![CDATA[(*
  Event cam done "detecting points", sheet/repeate done.
  Called after last point will be streamed to same CT.
*)
METHOD CamDone : BOOL
(*VAR_INPUT
  nDetectedLength : LREAL; // [m]
END_VAR*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nAttachedCTs=0 OR NOT _bCamStarted OR _eDeformStep < E_DeformationStep.cameraStarted THEN
  // ignore done event if not started
  RETURN;
END_IF

// last point was received, we can dump the buffer and release the Container
streamPoints();   // stream all buffered points

LogLvl(Lvl:=E_LogSeverity.Debug, Msg:='CamDone');
Release(_pAttachedCt^);   // release head container

_bCamStarted := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CamStarted" Id="{909d4056-0090-41d1-b186-5c0194c8eb85}" FolderPath="I_CameraSink\">
      <Declaration><![CDATA[(*
  Event cam started "detecting points".
  Is called before streaming cam points.
*)
METHOD CamStarted
VAR_INPUT
  nX0 : DINT; // detected start position
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// erase rx buffer
_nCamBufferPoints := 0;
MEMSET(destAddr:=ADR(_CamBufferPoints[1]), fillByte:=0, n:=SIZEOF(_CamBufferPoints));

// save x0 for sheet lenght calculation
_nCamDetected_X0 := nX0;

_bCamStarted := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="fCameraToPrintOffset" Id="{c7f93a14-f1d1-4c31-a277-d18b12fc9117}">
      <Declaration><![CDATA[PROPERTY fCameraToPrintOffset : LREAL]]></Declaration>
      <Get Name="Get" Id="{7463415f-08fd-4759-a1b6-38cdc37fe30e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _iActiveCam <> 0 THEN
  fCameraToPrintOffset := _iActiveCam.fCameraToPrintOffset;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="fDetectToCamOffset" Id="{65907cba-8221-4545-9cde-7be24c978514}">
      <Declaration><![CDATA[PROPERTY fDetectToCamOffset : LREAL]]></Declaration>
      <Get Name="Get" Id="{b606aab6-d61a-48fb-b789-a7a91f4dddeb}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[IF _iActiveCam <> 0 THEN
  fDetectToCamOffset := _iActiveCam.fDetectToCameraOffset;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Init" Id="{476974fc-f01a-47ef-80b5-8dcae46aef5e}">
      <Declaration><![CDATA[METHOD Init
VAR_INPUT
  pMsgConfig : POINTER TO ST_MSG_CONFIG;         // message config
  fPrintResolution : LREAL := 1;                 // print(head) resolution in [dpi]
  fSubPxResolution : LREAL := 1;                 // SubPixel resolution [SubPx], resolution factor (fI_PrintResolution*fI_SubPxResolution=>Output resolution)
  bParallelCT : BOOL;                            // Support parallel processing of CTs
END_VAR
VAR
  lCtr : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.Init(pMsgConfig:=pMsgConfig, fPrintResolution:=fPrintResolution, fSubPxResolution:=fSubPxResolution, bParallelCT:=bParallelCT);

IF pMsgConfig = 0 THEN LogError('Init: invalid message config given'); END_IF 

(*Messaging*)
_pMsgConfig := pMsgConfig;

fbMsg_CamNotAvailable.pI_MsgConfig := _pMsgConfig;
fbMsg_CamNotAvailable.iI_MsgLocation := TO_INT(ePr_BLK_CAMERA);
fbMsg_CamNotAvailable.iI_MsgNumber := eC_DMAX_CAM_NOTAVAIL;

fbMsg_CamModeNotSupported.pI_MsgConfig := _pMsgConfig;
fbMsg_CamModeNotSupported.iI_MsgLocation := TO_INT(ePr_BLK_CAMERA);
fbMsg_CamModeNotSupported.iI_MsgNumber := eC_DMAX_CAM_MODE_NOTSUPPORTED; // camera not available

fbMsg_CamNoConnection.pI_MsgConfig := _pMsgConfig;
fbMsg_CamNoConnection.iI_MsgLocation := TO_INT(ePr_BLK_CAMERA);
fbMsg_CamNoConnection.iI_MsgNumber := eCMa_TCPIP_COMM_ERROR;    // tcpip connection error

_bConnectionOk := TRUE;
_bSetInitCam := TRUE; // request a default camera
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitWorkerCamera" Id="{d420bbaf-dc4a-4caf-9bae-af7a97686b3a}">
      <Declaration><![CDATA[METHOD InitWorkerCamera
VAR_INPUT
  pAdsIf  : POINTER TO FB_ADS_CAMERA;
  iDefGridParamMediator : I_ParamMediator;
  fFeatureGrid : LREAL;   // feature grid with 
  fPrintUnitWidth   : LREAL;     // print unit width [m]
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitialized THEN LogError('Base Worker not initialized! call init() before'); RETURN; END_IF
IF pAdsIf = 0 THEN bInitialized := FALSE; LogError('Invalid parameter, no valid ads interface camera'); RETURN; END_IF
IF iDefGridParamMediator = 0 THEN bInitialized := FALSE; LogError('Invalid parameter, no valid param mediator'); RETURN; END_IF

_pAdsCam := pAdsIf;
_iParamMediator := iDefGridParamMediator;
_fPrintUnitWidth := fPrintUnitWidth;
_fFeatureGrid := fFeatureGrid;

_bCamStarted := FALSE;
// done by worker (always when cam activated)
//_bCamValid := _bCamReady := _bConnectionOk := FALSE;
//_nTeachedPoints := _nScannedPoints := 0;]]></ST>
      </Implementation>
    </Method>
    <Method Name="is_linecam" Id="{75d58c77-ff64-480b-987c-b901e93de9a9}">
      <Declaration><![CDATA[METHOD PRIVATE is_linecam : BOOL
VAR_INPUT
  sCamName : STRING;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[is_linecam := SEL(FIND(F_ToLCase(sCamName), 'linecam') > 0, FALSE, TRUE);  // is it a LineCamera?]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStart" Id="{333f8056-01ee-443a-9254-a4a08a486903}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD   mJobStart
VAR_INPUT
	sJobDef	: CalmarCompPrint.I_JobDefinition;
END_VAR
VAR
  iNewCam : I_Camera;
  pCorrPointsInd : POINTER TO ARRAY[1..4] OF ST_CORRECTION_POINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _pAdsCam <> 0 THEN

  bCamNotAvailable := FALSE;
  bCamModeNotSupported := FALSE;

  // activate matching camera
  iNewCam := selectCamera(eNewCam:=_pAdsCam^.eCameraDevice);    // get camera settings from ADS
  IF NOT ActivateCamera(iCam:=iNewCam) THEN
    LogError(F_Concat2('Could not activate camera: ', TO_STRING(_pAdsCam^.eCameraDevice)));
    bCamNotAvailable := TRUE;
  ELSE
    // config camera from job
    _iActiveCam.fSubstrateLength := sJobDef.fImageDepth  / 1000;//sJobDef.fSubstrateDepth;      // [m]
    _iActiveCam.fSubstrateWidth  := sJobDef.fImageDepth  / 1000;//sJobDef.fSubstrateWidth;      // [m]
    _iActiveCam.fImageLength     := sJobDef.fImageDepth  / 1000;  // [mm] -> [m]
    _iActiveCam.fImageWidth      := sJobDef.fImageWidth  / 1000;  // [mm] -> [m]
    _iActiveCam.fFrameLength     := _fFeatureGrid;                // [px]
    bCamModeNotSupported := NOT _iActiveCam.setCameraMode(eCameraMode := _pAdsCam^.eCameraMode);     // set camera mode
    _iActiveCam.bEnableTrigger   := TRUE;    
    _iActiveCam.bManualTeach     := FALSE;
    _iActiveCam.mJobStart();

    // set deformation type based on camera
    _eDeformationType := selectDeformationType(_iActiveCam);
    
    // check settings
    IF _iActiveCam.fSubstrateLength = 0 THEN LogError('mJobStart() invalid SubstrateLength'); END_IF
    IF _iActiveCam.fSubstrateWidth = 0 THEN LogError('mJobStart() invalid SubstrateWidth'); END_IF
    IF _iActiveCam.fImageLength = 0 THEN LogError('mJobStart() invalid ImageLength'); END_IF
    IF _iActiveCam.fImageWidth = 0 THEN LogError('mJobStart() invalid ImageWidth'); END_IF
    
    // special case
    _bLineCamType := is_linecam(_iActiveCam.sName);  // is it a LineCamera?
  END_IF
  
  // set correction ref points
  pCorrPointsInd := _pAdsCam^.pCorrectionPointsIndication;
  IF pCorrPointsInd <> 0  THEN
    pCorrPointsInd^[1].posx := 0;
    pCorrPointsInd^[1].posy := LREAL_TO_REAL(((_fPrintUnitWidth * 1000) - sJobDef.fImageWidth) / 2);
    pCorrPointsInd^[2].posx := LREAL_TO_REAL(sJobDef.fImageDepth);
    pCorrPointsInd^[2].posy := LREAL_TO_REAL(((_fPrintUnitWidth * 1000) - sJobDef.fImageWidth) / 2);
    pCorrPointsInd^[3].posx := 0;
    pCorrPointsInd^[3].posy := LREAL_TO_REAL((((_fPrintUnitWidth * 1000) - sJobDef.fImageWidth) / 2) + sJobDef.fImageWidth);
    pCorrPointsInd^[4].posx := LREAL_TO_REAL(sJobDef.fImageDepth);
    pCorrPointsInd^[4].posy := LREAL_TO_REAL((((_fPrintUnitWidth * 1000) - sJobDef.fImageWidth) / 2) + sJobDef.fImageWidth);
  END_IF
END_IF

_bJobActive := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStop" Id="{113ca763-e1d2-471f-992c-fa941c7af403}" FolderPath="I_PrintStatusClient\">
      <Declaration><![CDATA[METHOD  mJobStop
VAR_INPUT
	sStatus	: CalmarCompPrint.I_JobStatus;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_bJobActive := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterCamera" Id="{b220f8fd-cae6-44e9-b212-d3281862fb7a}">
      <Declaration><![CDATA[METHOD RegisterCamera : BOOL
VAR_INPUT
  iNewCam : I_Camera;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nRegisteredCam < nMAXCAM AND iNewCam <> 0 THEN
  // configure message interface
  iNewCam.setMsgInterface(pMsgConfig:=_pMsgConfig);     // set message interface
  // add to internal list
  _nRegisteredCam := _nRegisteredCam + 1;
  _iCamList[_nRegisteredCam] := iNewCam;
  _sCamName[_nRegisteredCam] := iNewCam.sName;
  RegisterCamera := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="reviewState" Id="{202e01c9-d11c-44dc-96a6-afdbd379bab6}">
      <Declaration><![CDATA[METHOD PRIVATE reviewState : BOOL
VAR
  bModeLowerThanRequested       : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// review all camera states and set messages accordingly
IF _bJobActive AND _iActiveCam <> 0 THEN

  // -> mode less than desired
  IF _pAdsCam^.eCameraMode < _iActiveCam.eCameraMode THEN
    bModeLowerThanRequested := TRUE;
  END_IF

ELSE
  ;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="sCameraGridSettings" Id="{a50fda04-430c-4b45-a5d1-808b5d907b05}">
      <Declaration><![CDATA[PROPERTY sCameraGridSettings : ST_CameraGridSettings]]></Declaration>
      <Get Name="Get" Id="{a97a3e24-418c-4e49-a9d0-b9786579a0f4}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sCameraGridSettings.bValid := _bCamValid;
IF _bCamValid THEN
  sCameraGridSettings.eCameraMode := SEL(_iActiveCam<>0, E_CameraMode.NoCorrection, _iActiveCam.eCameraMode);
  sCameraGridSettings.eDeformationType := _eDeformationType;
  sCameraGridSettings.fGridFeaturePitch := _fFeatureGrid;
  sCameraGridSettings.fDetectToCam := _iActiveCam.fDetectToCameraOffset;
END_IF]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="selectCamera" Id="{68d1de2e-ca32-4101-91d2-cde38cfd0124}">
      <Declaration><![CDATA[(*
  Select a registered camera from the requested device type.
*)
METHOD PRIVATE selectCamera : I_Camera
VAR_INPUT
  eNewCam  : E_CameraDevice;      // requested camera type
END_VAR
VAR
  bFound : BOOL;
  i : UDINT;
  sOld, sNew : STRING :='';
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// select related camera (choose first matching)
bFound := FALSE;
FOR i :=1 TO _nRegisteredCam DO
  IF eNewCam = _iCamList[i].eDeviceType THEN
    // found
    selectCamera  := _iCamList[i]; // select new cam
    bFound := TRUE;
    EXIT; // select first found cam
	END_IF
END_FOR

IF NOT bFound THEN
  IF _iActiveCam <> 0 THEN sOld := _iActiveCam.sName; END_IF
  IF _pAdsCam <> 0 THEN sNew := TO_STRING(_pAdsCam^.eCameraDevice); END_IF
  
  LogError(F_Concat4('Unavailable camera selected=', sNew, ', use cam=', sOld));
  selectCamera  := _iActiveCam; // return camera to before
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="selectDeformationType" Id="{9c418b5a-fd52-4940-86d3-822ae28f8d03}">
      <Declaration><![CDATA[(*
  Select deformation type (mode) based on selected camera device and camera mode.
*)
METHOD selectDeformationType : E_DeformationType
VAR_INPUT
  iCam : I_Camera;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF    ( iCam.eCameraMode = E_CameraMode.Auto OR 
        iCam.eCameraMode = E_CameraMode.Live OR 
        iCam.eCameraMode = E_CameraMode.Trend
      ) AND ( 
        iCam.eDeviceType = E_CameraDevice.PrintMark
      )
THEN
  // local plc generated deformation, based on print marks
  selectDeformationType := E_DeformationType.LocalMarks1D;
  
ELSIF ( iCam.eCameraMode = E_CameraMode.Auto OR 
        iCam.eCameraMode = E_CameraMode.Live OR 
        iCam.eCameraMode = E_CameraMode.Trend 
      ) AND (
        iCam.eDeviceType = E_CameraDevice.Scanner OR 
        iCam.eDeviceType = E_CameraDevice.ScannerWithoutBackground
      ) 
THEN
  // live deformation done by py script
  IF iCam.eCameraMode = E_CameraMode.Trend THEN
    selectDeformationType := E_DeformationType.ScriptGridTrend;
  ELSE
    selectDeformationType := E_DeformationType.ScriptGrid;
	END_IF
  
ELSE
  // default no deformation
  selectDeformationType := E_DeformationType.NoDeformation;
END_IF ]]></ST>
      </Implementation>
    </Method>
    <Method Name="setManualTeach" Id="{2e7801cf-e1ac-475d-9d4e-5dbbc1b969bc}">
      <Declaration><![CDATA[METHOD setManualTeach
VAR_INPUT
  eCameraDevice    : E_CameraDevice;  
  fSubstrateLength : LREAL;   // teach substrate length
  fSubstrateWidth  : LREAL;   // teach substrate width
END_VAR
VAR
  iNewCam : I_Camera;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// activate Camera

iNewCam := selectCamera(eNewCam:=eCameraDevice);    // Scanner
IF NOT ActivateCamera(iCam:=iNewCam) THEN
  LogError(F_Concat2('Could not activate camera: ', TO_STRING(eCameraDevice)));
ELSE
  // config camera from manual teach
  _iActiveCam.fSubstrateLength := fSubstrateLength;
  _iActiveCam.fSubstrateWidth  := fSubstrateWidth;
  _iActiveCam.fImageLength     := fSubstrateLength;
  _iActiveCam.fImageWidth      := fSubstrateWidth;
  _iActiveCam.setCameraMode(eCameraMode :=E_CameraMode.Auto);     // set camera mode
  _iActiveCam.bEnableTrigger   := TRUE;   // enables trigger in CameraTrigger
  _iActiveCam.bManualTeach     := TRUE;   // enables manual trigger mode in CameraTrigger
  
  // special case
  _bLineCamType := is_linecam(_iActiveCam.sName);  // is it a LineCamera?
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="setupPosition" Id="{758d7f65-61cd-4fd0-a0df-54323761386e}">
      <Declaration><![CDATA[METHOD setupPosition
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _pAttachedCt <> 0 THEN RETURN; END_IF    // Update only without attached container

fPosition := fDetectToCamOffset  + _fPmPosition;]]></ST>
      </Implementation>
    </Method>
    <Method Name="streamPoints" Id="{e6587db5-c53f-4607-886b-a01751f01b92}">
      <Declaration><![CDATA[METHOD PRIVATE streamPoints
VAR
  i : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _nAttachedCTs=0 OR NOT _bCamStarted OR _eDeformStep < E_DeformationStep.cameraStarted THEN
  RETURN;
END_IF


// stream buffered points
_nAddedPoint := _pAttachedCt^.nRegisteredCameraPoints;

WHILE _nAddedPoint < _nCamBufferPoints DO
  
  // apply detected X0 position
  IF _nAddedPoint = 0 THEN 
    _pAttachedCt^.nPosPrint_X0 := _nCamDetected_X0;   // apply X0 (in print position domain)
	END_IF
  // apply cam point to CT
  IF _pAttachedCt^.AddCamPoint(sPoint:=_CamBufferPoints[_nAddedPoint+1]) THEN 
    //cameraImgProc(newDeformationPoint:=iDeformationPoint);  //Update image processing
  ELSE
    LogError(Msg:='addCamPoint failed, add to CT error');
  END_IF;
  
  // added
  _nAddedPoint :=_nAddedPoint+1;
END_WHILE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="work" Id="{51a4cd28-adfd-4791-8e23-e9bc638f5539}">
      <Declaration><![CDATA[METHOD  work
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _iParamMediator = 0 THEN RETURN; END_IF

SUPER^.work();


//-----------------------------------------------------------
//- automatic worker setup & control
IF _bSetInitCam AND _iActiveCam = 0 THEN    // try to set a default camera at start
  ActivateCamera(selectCamera(eNewCam:=E_CameraDevice.SheetDetect));
  _bSetInitCam := FALSE;
  _bCamValid := TRUE;

ELSIF _iActiveCam <> 0 THEN                 // a camera is activated
  
  // --- cyclic call always when cam is active ---
  _bCamValid := TRUE;
  
  //-- update status
  _bCamReady := _iActiveCam.GetCamStatus(
                              bConnectionOK => _bConnectionOk, 
                              bTeachOk => _bTeachOk, 
                              nTeachedPoints => _nTeachedPoints, 
                              nScannedPoints => _nScannedPoints,
                              //bCamStarted => _bCamStarted,   // we use done event from I_CameraSink (TODO: review with LineCam!)
                              //bCamDone => _bCamDone
                            );
  // -- worker position setup
  setupPosition();
ELSE
  _bCamValid := FALSE;                    // invalid camera
END_IF


// -----------------------------------------------------------
// Work only with attached container
IF _pAttachedCt <> 0 THEN
  {warning 'TODO: use StartCT() method for erasing DeformationState? '}  

  // we have a HEAD container
  bError := _pAttachedCt^.getDeformationStatus(eDStep => _eDeformStep);
  
    IF _eDeformStep > E_DeformationStep.nothing AND _bCamReady AND _bTeachOk THEN      // start only if previous started
      (*done during attach: 
      IF _eDeformStep < E_DeformationStep.cameraStarted THEN
        // start cam on ct
        LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=F_Concat2('Start Camera with mode: ', TO_STRING(_iActiveCam.eCameraMode)));
        _pAttachedCt^.StartCamera(eCameraMode:=_iActiveCam.eCameraMode, fFeatureGrid:=_fFeatureGrid);
      *)
			IF _eDeformStep >= E_DeformationStep.cameraStarted AND _bCamStarted THEN
        // run update on ct
        // stream points
        streamPoints();
        // superview abort cases
      END_IF
      
      // NOTE: Release() is done in CamDone() method
    ELSE
      IF _bCamStarted THEN
        // error on camera while started
        LogError('Abort Camera while it was started');
			END_IF
      // release because cam not ready or pior worker not done its job
      Release(_pAttachedCt^);   // release head container
		END_IF

END_IF

// call messages
fbMsg_CamNotAvailable    (bI_Status:=bCamNotAvailable);
fbMsg_CamModeNotSupported(bI_Status:=bCamModeNotSupported);
fbMsg_CamNoConnection    (bI_Status:=bConnError);
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_WorkerDefGrid_Camera">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.ActivateCamera">
      <LineId Id="92" Count="1" />
      <LineId Id="54" Count="4" />
      <LineId Id="111" Count="0" />
      <LineId Id="100" Count="1" />
      <LineId Id="104" Count="0" />
      <LineId Id="106" Count="1" />
      <LineId Id="99" Count="0" />
      <LineId Id="59" Count="5" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.AddCamPoint">
      <LineId Id="66" Count="2" />
      <LineId Id="64" Count="1" />
      <LineId Id="63" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.AddTeachPoint">
      <LineId Id="8" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.Attach">
      <LineId Id="233" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="215" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="268" Count="0" />
      <LineId Id="262" Count="0" />
      <LineId Id="273" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="254" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="280" Count="0" />
      <LineId Id="275" Count="4" />
      <LineId Id="259" Count="0" />
      <LineId Id="258" Count="0" />
      <LineId Id="255" Count="1" />
      <LineId Id="253" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="234" Count="0" />
      <LineId Id="313" Count="1" />
      <LineId Id="311" Count="1" />
      <LineId Id="235" Count="0" />
      <LineId Id="219" Count="1" />
      <LineId Id="197" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.bCamOk.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.bConnError.Get">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.bLineCamActive.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.CamDone">
      <LineId Id="32" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="15" Count="1" />
      <LineId Id="43" Count="0" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.CamStarted">
      <LineId Id="28" Count="7" />
      <LineId Id="17" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.fCameraToPrintOffset.Get">
      <LineId Id="5" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.fDetectToCamOffset.Get">
      <LineId Id="5" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.Init">
      <LineId Id="3" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="112" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="62" Count="4" />
      <LineId Id="100" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="101" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="39" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.InitWorkerCamera">
      <LineId Id="20" Count="0" />
      <LineId Id="17" Count="1" />
      <LineId Id="16" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="40" Count="0" />
      <LineId Id="38" Count="1" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.is_linecam">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.mJobStart">
      <LineId Id="228" Count="20" />
      <LineId Id="282" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="283" Count="0" />
      <LineId Id="249" Count="24" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.mJobStop">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.RegisterCamera">
      <LineId Id="48" Count="1" />
      <LineId Id="60" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="51" Count="2" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.reviewState">
      <LineId Id="5" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="16" Count="1" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.sCameraGridSettings.Get">
      <LineId Id="26" Count="3" />
      <LineId Id="35" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.selectCamera">
      <LineId Id="6" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="26" Count="1" />
      <LineId Id="29" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="16" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.selectDeformationType">
      <LineId Id="5" Count="0" />
      <LineId Id="21" Count="1" />
      <LineId Id="32" Count="2" />
      <LineId Id="24" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="25" Count="6" />
      <LineId Id="38" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="36" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.setManualTeach">
      <LineId Id="6" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="7" Count="4" />
      <LineId Id="13" Count="5" />
      <LineId Id="28" Count="0" />
      <LineId Id="20" Count="2" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.setupPosition">
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="13" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.streamPoints">
      <LineId Id="64" Count="23" />
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Camera.work">
      <LineId Id="341" Count="0" />
      <LineId Id="362" Count="0" />
      <LineId Id="434" Count="1" />
      <LineId Id="347" Count="2" />
      <LineId Id="121" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="497" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="423" Count="0" />
      <LineId Id="425" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="457" Count="0" />
      <LineId Id="393" Count="7" />
      <LineId Id="444" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="122" Count="1" />
      <LineId Id="499" Count="0" />
      <LineId Id="344" Count="0" />
      <LineId Id="343" Count="0" />
      <LineId Id="136" Count="0" />
      <LineId Id="385" Count="0" />
      <LineId Id="510" Count="1" />
      <LineId Id="461" Count="0" />
      <LineId Id="471" Count="0" />
      <LineId Id="463" Count="0" />
      <LineId Id="467" Count="0" />
      <LineId Id="474" Count="0" />
      <LineId Id="506" Count="0" />
      <LineId Id="481" Count="0" />
      <LineId Id="477" Count="1" />
      <LineId Id="489" Count="0" />
      <LineId Id="476" Count="0" />
      <LineId Id="479" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="487" Count="0" />
      <LineId Id="485" Count="0" />
      <LineId Id="480" Count="0" />
      <LineId Id="507" Count="1" />
      <LineId Id="472" Count="0" />
      <LineId Id="501" Count="1" />
      <LineId Id="504" Count="0" />
      <LineId Id="503" Count="0" />
      <LineId Id="488" Count="0" />
      <LineId Id="486" Count="0" />
      <LineId Id="473" Count="0" />
      <LineId Id="152" Count="0" />
      <LineId Id="138" Count="0" />
      <LineId Id="310" Count="0" />
      <LineId Id="37" Count="0" />
      <LineId Id="311" Count="0" />
      <LineId Id="315" Count="0" />
      <LineId Id="317" Count="0" />
      <LineId Id="316" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>