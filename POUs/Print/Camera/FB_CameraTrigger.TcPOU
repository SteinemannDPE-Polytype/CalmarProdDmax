<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_CameraTrigger" Id="{47bc5e7e-2d41-45be-96cc-2ea3e7019dd7}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_CameraTrigger EXTENDS FB_Commons IMPLEMENTS I_CameraTrigger, I_StartPosDetect
(*************************************************************************************************)
(*  FILENAME:    FB_CameraTrigger                                                                *)
(*  PROJECT:     CALMAR PUPLC                                                                    *)
(*  COPYRIGHT:   All rights reserved (c) Wifag//Polytype, Fribourg/Switzerland (2016)            *)
(*  ENVIRONMENT: TwinCAT PLC                                                                     *)
(*  VERSION:     <version>                                                                       *)
(*************************************************************************************************)
(*  DESCRIPTION:                                                                   <description> *)
(*    Generate timestamp trigger output based on timestamp sensor input. Two variants            *)
(*    exist, a timebased approach where the trigger time is calculated at the time the sensor    *)
(*    event occurs, and a second approach where the sensor event time is translated to a sensor  *)
(*    event position, and a trigger is generated when the calculated trigger position has almost *)
(*    been reached. The second approach has the advantage that is is less susceptible to speed   *)
(*    variations.                                                                                *)
(*                                                                                </description> *)
(*************************************************************************************************)

{library public}
VAR_INPUT
  bI_HwEnable                             : BOOL;            // relase (enable SheetDetect) from machine
  bI_AutomaticMode                        : BOOL;            // machine is in automatic mode
  (* - (EL1252) StartPosition detect sensor*)
  bI_Sensor_State                   AT%I* : BOOL;            // Sensor signal
  tI_Sensor_TimeStampPos            AT%I* : T_DCTIME64;      // Sensor last detection timestamp
  (* - (EL1252) Camera started feedback trigger/signal*)
  bI_TriggerFeedback_State          AT%I* : BOOL;           // Sensor signal
  tI_TriggerFeedback_TimeStampPos   AT%I* : T_DCTIME64;     // Sensor last detection timestamp

  (*System signals*)
  iI_CurrentPos                   : DINT;                   // Current position in [SubPx]*)
  fI_ConveyorSpeed                : LREAL;                  // Current speed of substrate in [m/s]*)
  
  (*Debug & Test*)
  bI_ManualTrigger                : BOOL;                   // Manual start trigger
END_VAR

VAR_OUTPUT
  (*Link to EL2252*)
  ObTrigger                 AT%Q* : BOOL;                   // EL2252 Output1 - TRUE=start camer
  OtTriggerStartTime        AT%Q* : T_DCTIME64;             // EL2252 Timestamp - where to set outputs
  OnTriggerCommand          AT%Q* : BYTE;                   // EL2252 Command - activation timestamp ouput
END_VAR

(*{library private}*)
VAR
  bInitOk                         : BOOL;           // initialized
  bSpeedValid                     : BOOL;           // speed is valid
  bTriggerEnabled                 : BOOL;           // detection & trigger is enabled
  bTriggerArmed                   : BOOL;           // trigger is armed
  bCamValid                       : BOOL;           // camera is valid
  bTriggerOk                      : BOOL;
  rT_Sensor                       : R_TRIG;        // rising edge trigger sensor
  
  (*configuration*)
  _nResolution                    : INT := 1;       // Printhead Resolution [e.g. 600] x Subpixel Resolution [e.g. 32]*)
  _bUsePositionTrigger            : BOOL;           // FALSE: Calculate time with speed and position distance@sensor event, TRUE: Calculate sensor event position, launch trigger based on position
  _bUseCameraTrigger              : BOOL;           // (cam specific setting) Generate camera trigger output
  _bUseCameraTriggerFeedback      : BOOL;           // (cam specific setting) Evaluate camera triggered feedback
  _bCamManualTeachMode            : BOOL;           // cam in manual teach mode
  _tMemTriggerFeedback_TimeStampPos : T_DCTIME64;
  _nSubstrateLength               : DINT;           // Substrate length in pulse [SubPx]
  _fSubstrateLength               : LREAL;          // Substrate length in [m]
  _fTriggerDistance               : LREAL;          // Distance between Sensor and Trigger [m]
  _fTriggerLength                 : LREAL := 10;    // Length of trigger signal in ms, min. 3 bus cycles
  
  iActiveCam	                    : I_CameraTriggerDevice;  // active camera interface
  
  bSheetDetected                  : BOOL;
  bInhibitTrigger                 : BOOL;            (*inhibit trigger signals, TRUE=inhibit*)
  bReleaseInhibitTrigger          : BOOL;            (*condition to release inhibit trigger*)

  eState                          : BYTE;            (*State*)
  tSensor_TimeStamp               : T_DCTIME64;      (*Sensor last detection timestamp*)
  tTriggerFeedback_TimeStamp      : T_DCTIME64;      (*Trigger feedback last detection timestamp*)
  tCurrentTime                    : T_DCTIME64;      (*Current system dc time [64bit]*)
  tTrigger_EventTime              : T_DCTIME64;      (*Trigger event timestamp*)

  _bManualStart                   : BOOL;
  fDeltaDistance                  : LREAL;           (*Distance that the substrate moved between the detection and the treatment of the information [m]*)
  _nX0                            : DINT;            (*Detected X0 position of CT [SubPx] by sensor*)
  _nCamStartPos                   : DINT;            (*Camera start position*)
  _nCamStartedPos                 : DINT;            (*Camera started position [SubPx]*)
  
  tCurrentTimeStamp               : T_DCTIME64;      (* Get Current Timestamp *)
  tLastTimeStamp                  : T_DCTIME64;      (* Get Current Timestamp *)
  fCycleTime                      : LREAL;           (* Current calculated cycle time [s]*)

  fRemDist                        : LREAL;           (*Remaining distance until trigger occurs [m]*)
  fPreTriggerPosition             : LREAL;           (*Margin between effective trigger position and generation of timestamp*)

  (*Debug*)
  _bVerbose                       : BOOL;
END_VAR

VAR CONSTANT
  fC_MIN_CONVEYOR_SPEED           : LREAL := 0.01;
  fC_PreTrigFactor                : LREAL := 3.0;
  fC_SheetLengthMargin            : LREAL := 0.01;   (*Added 10 mm margin for substrate length in case of print quality strips at the end of sheet in case of start with edge*)
  fC_MaxCameraFeedbackTimeout     : LREAL := 28.0;   (*[ns] Max. timeout waiting for camera trigger feedback signal*)

  (*State*)
  cL_IDLE                         : BYTE := 0;       (*Idle state, no trigger active*)
  cL_SENSOREVENT                  : BYTE := 1;       (*Sensor started trigger generation*)
  cL_WAITALMOSTSTART              : BYTE := 2;       (*Wait timestamp calculation critera*)
  cL_WAITSTART                    : BYTE := 3;       (*Wait for trigger generation critera*)
  cL_WAITFEEDBACK                 : BYTE := 4;       (*Wait on feedback from trigger*)
  cL_TRIGACTIVE                   : BYTE := 5;       (*Trigger set*)
  cL_WAITSTOP                     : BYTE := 6;       (*Trigger reset*)

  (*EL2252 Command*)
  nC_EL2252Cmd_INACTIVE           : BYTE := 0;
  nC_EL2252Cmd_ACTIVE             : BYTE := 3;
END_VAR
// TODO: convert all LREAL_TO_ULINT to save functions with range overflow check (add to CalmarCommons) to prevent crashes]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF NOT bInitOk THEN RETURN; END_IF;

// General calculations
bSpeedValid   := fI_ConveyorSpeed > fC_MIN_CONVEYOR_SPEED;    // speed valid (ignore trigger if not moving)
bCamValid     := SEL(iActiveCam<>0, FALSE, TRUE);             // camera valid (ignore trigger otherwise)
tCurrentTime  := F_GetCurDcTaskTime64();                      // current dc time (most accurate time stamp we have)
fCycleTime    := (TO_LREAL(tCurrentTime) - TO_LREAL(tLastTimeStamp)) * 1E-9;  tLastTimeStamp  := tCurrentTime;  // calculate cycle time of this block
bSheetDetected:= FALSE;                                       // Set to true below just for one cycle
bTriggerEnabled := bSpeedValid AND bI_HwEnable AND (bI_AutomaticMode OR _bCamManualTeachMode);
bTriggerArmed :=  NOT bInhibitTrigger AND bTriggerEnabled;
rT_Sensor(CLK:=bI_Sensor_State);

// apply parameter
IF bCamValid THEN    // save dynamic changable settings
  _fTriggerDistance := iActiveCam.fTriggerDistance;
  _fTriggerLength   := iActiveCam.fTriggerPulseLength;
END_IF

// - Release inhibit trigger
bReleaseInhibitTrigger := bInhibitTrigger AND (iI_CurrentPos - (_nX0 + _nSubstrateLength)) > 0;
IF bReleaseInhibitTrigger THEN bInhibitTrigger := FALSE; END_IF

// Reset trigger if deactivated - should improve hanging triggers
IF NOT bTriggerEnabled AND eState > cL_IDLE THEN
  Reset();
  RETURN;
END_IF


(*State Machine ----------------------------------------------------------------*)
CASE eState OF
  cL_IDLE:     (*Not started, waiting for start trigger*)
  
    IF bTriggerArmed THEN (*ignore trigger else*)
 
      IF rT_Sensor.Q AND (bCamValid OR _bCamManualTeachMode) THEN      (*Start launched*)
        eState            := cL_SENSOREVENT;
        tSensor_TimeStamp := tI_Sensor_TimeStampPos;
        _bManualStart := FALSE;
        IF _bCamManualTeachMode THEN LogWarning('StartTrigger in manual teach mode'); END_IF
      ELSIF (bI_ManualTrigger AND bCamValid) THEN  (*Manual start launched*)
        eState            := cL_SENSOREVENT;
        tSensor_TimeStamp := tCurrentTime;
        _bManualStart := TRUE;
      ELSIF (rT_Sensor.Q OR bI_ManualTrigger) AND NOT bCamValid THEN   (*Trigger without active camera*)
        LogWarning('No camera or start device active, ignore trigger');
      END_IF;
      
    END_IF
    
    OnTriggerCommand := nC_EL2252Cmd_INACTIVE;
    ObTrigger        := FALSE;

  cL_SENSOREVENT:     (*Not started*)
    IF NOT bSpeedValid THEN 
      Reset();        // ignore trigger if not moving anymore (avoid zero division)
    ELSE
      (*Distance in [m] that the substrate has traveled between the sensor detection (time) current plc cycle*)
      fDeltaDistance     := UINT64_TO_LREAL(UInt64Sub64(ULINT_TO_ULARGE(tCurrentTime), ULINT_TO_ULARGE(tSensor_TimeStamp))) * 1E-9 * fI_ConveyorSpeed;
      (*Position where the sheet has been detected in [SubPx]*)
      _nX0               := iI_CurrentPos - F_MeterToSubPixel(fPosMeter:=fDeltaDistance, fResoSubPx:=_nResolution);
      
      IF _bUsePositionTrigger OR NOT _bUseCameraTrigger THEN
        eState             := cL_WAITALMOSTSTART;
      ELSE
        eState             := cL_WAITSTART;
        tTrigger_EventTime := (tSensor_TimeStamp + LREAL_TO_ULINT(_fTriggerDistance / fI_ConveyorSpeed * 1E9));
      END_IF;
      
      OnTriggerCommand := nC_EL2252Cmd_INACTIVE;
      ObTrigger         := TRUE;
      bInhibitTrigger   := TRUE;
      bSheetDetected    := TRUE;
      
    END_IF

  cL_WAITALMOSTSTART: (*Only active when bI_UsePositionTrigger=TRUE: wait until Start position almost reached, then set timestamp*)
    (*Remaining distance in [m], converted to REAL to avoid integer wrap problems*)
    fRemDist             := _fTriggerDistance + (DINT_TO_REAL(_nX0) - DINT_TO_REAL(iI_CurrentPos))*0.0254 / INT_TO_REAL(_nResolution);
    fPreTriggerPosition  := fC_PreTrigFactor * fCycleTime * fI_ConveyorSpeed;

    IF fRemDist < fPreTriggerPosition THEN
      eState             := cL_WAITSTART;
      tTrigger_EventTime := (tSensor_TimeStamp + LREAL_TO_ULINT(fRemDist / fI_ConveyorSpeed * 1E9));    // division save because we are moving to reach this position
      IF _bUseCameraTrigger AND NOT _bManualStart THEN
        OnTriggerCommand := nC_EL2252Cmd_ACTIVE;  (*Arm EL2252*)
      END_IF
      LogTsDiff(aIdent:= 'WAITALMOSTSTART: ', t1:=tTrigger_EventTime, t2:=tCurrentTime);
    ELSE
      eState           := cL_WAITALMOSTSTART;
      OnTriggerCommand := nC_EL2252Cmd_INACTIVE;
    END_IF;
    ObTrigger          := TRUE;

  cL_WAITSTART:       (*Wait until start time reached*)
    bTriggerOk := TRUE;
    IF (tTrigger_EventTime < tCurrentTime) THEN (* StartTime elapsed *)
      // position reached
      IF _bUseCameraTriggerFeedback THEN
        eState         := cL_WAITFEEDBACK;
      ELSE
        eState         := cL_TRIGACTIVE;
        iActiveCam.CamTrigger(bOk:=bTriggerOk, nPos:=iI_CurrentPos, nPosDeviation:=0);
      END_IF

      OnTriggerCommand := nC_EL2252Cmd_INACTIVE; (*Disarm already command to EL2252, trigger generated*)
    ELSE
      // position not yet reached
      eState           := cL_WAITSTART;
      IF _bUseCameraTrigger AND NOT _bManualStart THEN
        OnTriggerCommand := nC_EL2252Cmd_ACTIVE;  (*Arm EL2252*)
      END_IF
    END_IF;

    ObTrigger      := TRUE;  
    
  cL_WAITFEEDBACK:
    IF _bManualStart THEN //Simulate feedback in case of manual start
      tTriggerFeedback_TimeStamp:= tTrigger_EventTime + LREAL_TO_ULINT(1000.0 * 1E3); //Trigger event plus 1000ns
    ELSE
      IF tI_TriggerFeedback_TimeStampPos = _tMemTriggerFeedback_TimeStampPos AND tCurrentTime > (tTrigger_EventTime + LREAL_TO_ULINT(fC_MaxCameraFeedbackTimeout * 1E3)) THEN
        // feedback was not received in next plc cycle (timeout jitter in camera max. 28us)
        LogError(F_Concat3('No Camera trigger feedback received (timeout), after ', TO_STRING(TO_LREAL(tCurrentTime-tTrigger_EventTime)/1E6), 'ms'));
        bTriggerOk := FALSE;
        tTriggerFeedback_TimeStamp:= tTrigger_EventTime + LREAL_TO_ULINT(fC_MaxCameraFeedbackTimeout * 1E3);
      ELSE
        tTriggerFeedback_TimeStamp:= tI_TriggerFeedback_TimeStampPos;
			END_IF
    END_IF
    
  (*feedback signal is a very short trigger that the PLC sometimes cannot register, therefore we use the timestamp*)
    IF (tTriggerFeedback_TimeStamp <> _tMemTriggerFeedback_TimeStampPos) AND (tTriggerFeedback_TimeStamp > 0) OR _bManualStart THEN
      eState          := cL_TRIGACTIVE;
      // start position requested
      fDeltaDistance  := UINT64_TO_LREAL(UInt64Sub64(ULINT_TO_ULARGE(tCurrentTime), ULINT_TO_ULARGE(tTrigger_EventTime))) * 1E-9 * fI_ConveyorSpeed;
      _nCamStartPos   := _nX0 +   F_MeterToSubPixel(fPosMeter:=_fTriggerDistance, fResoSubPx:=_nResolution);
      
      // effective started position
      fDeltaDistance  := UINT64_TO_LREAL(UInt64Sub64(ULINT_TO_ULARGE(tCurrentTime), ULINT_TO_ULARGE(tTriggerFeedback_TimeStamp))) * 1E-9 * fI_ConveyorSpeed;
      _nCamStartedPos := iI_CurrentPos - F_MeterToSubPixel(fPosMeter:=fDeltaDistance, fResoSubPx:=_nResolution);
      IF _bManualStart THEN iActiveCam.CamTrigger(bOk:=bTriggerOk, nPos:=_nCamStartPos, nPosDeviation:=0);
      ELSE                  iActiveCam.CamTrigger(bOk:=bTriggerOk, nPos:=_nCamStartPos, nPosDeviation:=-_nCamStartedPos+_nCamStartPos); END_IF  (*!!!!   sign inverted*)
    ELSE
     eState           := cL_WAITFEEDBACK;
    END_IF    
    
  cL_TRIGACTIVE:   (*Trigger high*)
    eState         := cL_WAITSTOP;
    
    // calculate end timestamp of trigger (end of trigger active signal)
    tTrigger_EventTime := (tTrigger_EventTime + LREAL_TO_ULINT(_fTriggerLength * 1E6));
    
    OnTriggerCommand := nC_EL2252Cmd_INACTIVE;
    ObTrigger        := FALSE;
    
  cL_WAITSTOP:  (*Wait until trigger time has elapsed*)
    IF (tTrigger_EventTime < tCurrentTime) THEN (* StopTime elapsed *)
      eState           := cL_IDLE;
      OnTriggerCommand := nC_EL2252Cmd_INACTIVE; (*Disarm EL2252, trigger generated*)
      iActiveCam.CamTriggerDone();
    ELSE
      eState           := cL_WAITSTOP;
      IF _bUseCameraTrigger THEN
        OnTriggerCommand := nC_EL2252Cmd_ACTIVE;  (*Arm EL2252*)
      END_IF
    END_IF;

    ObTrigger        := FALSE;

  ELSE  (*Default*)
    eState           := cL_IDLE;
    ObTrigger        := FALSE;
    OnTriggerCommand := nC_EL2252Cmd_INACTIVE;
END_CASE;

OtTriggerStartTime := tTrigger_EventTime;  // set output

_tMemTriggerFeedback_TimeStampPos := tI_TriggerFeedback_TimeStampPos;
]]></ST>
    </Implementation>
    <Folder Name="I_CameraTrigger" Id="{7ab2c00d-c252-46d1-aef8-bb2f16d70605}" />
    <Folder Name="I_StartPosDetect" Id="{c2d6a5aa-7e33-4d73-adbe-d2ef476aecce}" />
    <Property Name="bManualTeach" Id="{be65e27e-2353-45ae-a59f-493486ebc6b7}" FolderPath="I_CameraTrigger\">
      <Declaration><![CDATA[PROPERTY bManualTeach : BOOL
]]></Declaration>
      <Get Name="Get" Id="{165e03a2-9b40-49d2-96d5-cf6c3afc504e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bManualTeach := _bCamManualTeachMode;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{9eeb14e1-cab3-4b2f-a26c-35c5dfb6270d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_bCamManualTeachMode := bManualTeach;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="bStartTrig" Id="{c57106c6-b833-4147-91ae-b104af7861e0}" FolderPath="I_StartPosDetect\">
      <Declaration><![CDATA[(*
  A new container detected on X0.
  NOTE: a pulse only
*)
PROPERTY bStartTrig : BOOL
]]></Declaration>
      <Get Name="Get" Id="{2d2cc879-e5fd-4e67-a210-e0116993e540}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bStartTrig := bSheetDetected;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="bValid" Id="{8b6b81d3-ea0a-409e-8b92-7512dfe544b8}" FolderPath="I_StartPosDetect\">
      <Declaration><![CDATA[(*
  A valid container detected.
*)
PROPERTY bValid : BOOL
]]></Declaration>
      <Get Name="Get" Id="{f5c7cec1-98dd-4df1-adc7-a8dc54b5d098}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[bValid := bSheetDetected AND NOT _bCamManualTeachMode AND bCamValid;  // in manual teach the ct is "present" should not be printed
]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Disable" Id="{b02780b6-05e9-418f-b223-f6c75fbd5a3a}" FolderPath="I_CameraTrigger\">
      <Declaration><![CDATA[METHOD Disable : BOOL
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF eState = cL_IDLE THEN
  iActiveCam := 0;
  Disable := TRUE;
ELSE  
  Disable := FALSE;
  LogError('disable failed: trigger busy -> reset trigger');
  Reset();
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Enable" Id="{26ed9d4d-13d8-4aa0-937e-fe8372b7737f}" FolderPath="I_CameraTrigger\">
      <Declaration><![CDATA[METHOD Enable : BOOL
VAR_INPUT
	iCam	                    : I_CameraTriggerDevice;
  bUseCameraTrigger         : BOOL; //Generate camera trigger
  bUseCameraTriggerFeedback : BOOL; //Use feedback as trigger?
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iCam = 0 THEN
  Enable := FALSE;
  LogError('setCam failed: invalid reference');
ELSIF eState <> cL_IDLE THEN
  Enable := FALSE;
  LogError('enable failed: trigger busy');
ELSE
  iActiveCam := iCam;
  Enable     := TRUE;

  // save constant settings
  _bUseCameraTrigger := bUseCameraTrigger;
  _bUseCameraTriggerFeedback := bUseCameraTriggerFeedback;
END_IF;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Init" Id="{6590ee5c-b418-41a2-a136-da091705927c}">
      <Declaration><![CDATA[METHOD Init
VAR_INPUT
  nResolution                   : INT := 1;        (*Printhead Resolution [e.g. 600] x Subpixel Resolution [e.g. 32]*)
  bUsePositionTrigger           : BOOL;            (*FALSE: Calculate time with speed and position distance@sensor evont*)
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*zero divisions*)
IF nResolution = 0 THEN 
  bInitOk :=FALSE;
  RETURN; 
END_IF;

_nResolution:=nResolution;
_bUsePositionTrigger :=bUsePositionTrigger;


bInitOk :=TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="LogTsDiff" Id="{4f7897cf-74a6-4ccf-9bea-ff76c8118697}">
      <Declaration><![CDATA[(*
  Log timestamp difference (if verbose active).
  t1-t2 
*)
METHOD LogTsDiff : BOOL
VAR_INPUT
  aIdent : STRING;
  t1 : T_DCTIME64;
  t2 : T_DCTIME64;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _bVerbose THEN
  LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=
       F_Concat7(aIdent, 
                 't1: ', TO_STRING(t1), 
                 ' t2: ', TO_STRING(t2), 
                 ' t1-t2 [ms]: ', TO_STRING((TO_LREAL(t1)-TO_LREAL(t2))*1E-6)
       )
  );
END_IF]]></ST>
      </Implementation>
    </Method>
    <Property Name="nStartPositionX0" Id="{037ffc53-c1e7-4a3c-b1f3-28d3ac51fc5c}" FolderPath="I_StartPosDetect\">
      <Declaration><![CDATA[(*
  Detected start position X0 (absolute) in [SubPx].
*)
PROPERTY nStartPositionX0 : DINT
]]></Declaration>
      <Get Name="Get" Id="{f02907f9-b5c7-4d8d-a547-1994b9a49883}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[nStartPositionX0 := _nX0;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Reset" Id="{fb5c6827-436b-47e7-9d12-19557dc21689}">
      <Declaration><![CDATA[METHOD Reset
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[eState              := cL_IDLE;      // reset state
OtTriggerStartTime  := F_GetCurDcTaskTime64();  // now
ObTrigger           := FALSE;        // set output = 0
OnTriggerCommand    := nC_EL2252Cmd_ACTIVE;    // activate command
bInhibitTrigger     := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetSubstrateLength" Id="{e3a47706-73b1-4e53-941e-e5803ef8e452}" FolderPath="I_CameraTrigger\">
      <Declaration><![CDATA[METHOD SetSubstrateLength
VAR_INPUT
  fSubstrateLength : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitOk THEN RETURN;END_IF;

(*Added 10 mm margin for substrate length in case of print quality strips at the end of sheet in case of start with edge*)
_fSubstrateLength := fSubstrateLength + fC_SheetLengthMargin;
_nSubstrateLength := F_MeterToSubPixel(fPosMeter:=_fSubstrateLength, fResoSubPx:=_nResolution);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CameraTrigger">
      <LineId Id="4740" Count="10" />
      <LineId Id="4921" Count="0" />
      <LineId Id="4751" Count="4" />
      <LineId Id="4922" Count="0" />
      <LineId Id="4924" Count="2" />
      <LineId Id="4929" Count="3" />
      <LineId Id="4935" Count="0" />
      <LineId Id="4923" Count="0" />
      <LineId Id="4756" Count="148" />
      <LineId Id="4934" Count="0" />
      <LineId Id="4906" Count="0" />
      <LineId Id="1688" Count="0" />
    </LineIds>
    <LineIds Name="FB_CameraTrigger.bManualTeach.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CameraTrigger.bManualTeach.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CameraTrigger.bStartTrig.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CameraTrigger.bValid.Get">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_CameraTrigger.Disable">
      <LineId Id="7" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_CameraTrigger.Enable">
      <LineId Id="104" Count="12" />
      <LineId Id="70" Count="0" />
    </LineIds>
    <LineIds Name="FB_CameraTrigger.Init">
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_CameraTrigger.LogTsDiff">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="11" Count="1" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_CameraTrigger.nStartPositionX0.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CameraTrigger.Reset">
      <LineId Id="6" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_CameraTrigger.SetSubstrateLength">
      <LineId Id="8" Count="1" />
      <LineId Id="6" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>