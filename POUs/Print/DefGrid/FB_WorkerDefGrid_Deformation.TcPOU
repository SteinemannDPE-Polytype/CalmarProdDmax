<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="FB_WorkerDefGrid_Deformation" Id="{8683d501-d2f8-4b2f-9f84-75930406cf79}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_WorkerDefGrid_Deformation EXTENDS FB_WorkerDefGrid
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
  //Worker specific configuration
  _nPrintUnitWidth            : UDINT;  // default print unit width [px]  
  _nImageWidthPx              : UDINT;  // size of the image (width)
  _nImageDepthPx              : UDINT;  // size of the image (depth)

  // - current CTs
  _nMultiAttachedCTs          : UDINT;
  _pMultiAttachedCTs          : ARRAY[nLowerIndexCTList..nUpperIndexCTList] OF POINTER TO FB_ContainerDefGrid;
  
  // -
  _bNewJob                    : BOOL;   // new job started 

  //Deformation status
  _nDeformationProcPoints     : ARRAY[nLowerIndexCTList..nUpperIndexCTList] OF UDINT;  // available grid points on ct
  _nDeformationProcCols       : ARRAY[nLowerIndexCTList..nUpperIndexCTList] OF UDINT;  // number of already generated grid columns
  _eDeformStep                : ARRAY[nLowerIndexCTList..nUpperIndexCTList] OF E_DeformationStep;   // status deformation of ct
  _bDeformationError          : ARRAY[nLowerIndexCTList..nUpperIndexCTList] OF BOOL;   // status deformation of ct
  _bDeformationBusy           : ARRAY[nLowerIndexCTList..nUpperIndexCTList] OF BOOL;   // status deformation of ct
  _bDeformationDone           : ARRAY[nLowerIndexCTList..nUpperIndexCTList] OF BOOL;   // status deformation of ct
  _nDeformationErrorId        : ARRAY[nLowerIndexCTList..nUpperIndexCTList] OF UDINT;  // status deformation of ct
  _tDeformationExecutionTime  : ARRAY[nLowerIndexCTList..nUpperIndexCTList] OF TIME;   // status deformation of ct
  _bAbortRequestPy            : ARRAY[nLowerIndexCTList..nUpperIndexCTList] OF BOOL;   // status deformation of ct
END_VAR

VAR PERSISTENT
  _sDeformationGridSettings : ST_DefGridSettings := (
                                  nGridPitchX:=GVL_Deformation.nC_GridPitch_X, 
                                  nGridPitchY:=GVL_Deformation.nC_GridPitch_Y
                              );
END_VAR
VAR CONSTANT
  nLowerIndexCTList : UDINT := 1;
  nUpperIndexCTList : UDINT := 4; 
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="Attach" Id="{a936541d-6851-4f2e-b80f-a82721b46cf9}">
      <Declaration><![CDATA[METHOD PROTECTED  Attach : BOOL
VAR_INPUT
  iCT              : I_CT;                         (*container at triggered event position*)
END_VAR
VAR
  i : UDINT;
  pCt :  POINTER TO FB_ContainerDefGrid;
  bDeformErr : BOOL;
  eDeformStep : E_DeformationStep;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Attach := FALSE;
// error handling
IF iCT = 0 THEN LogError(Msg:='attach failed -> not ct given'); RETURN; END_IF
IF _nMultiAttachedCTs >= nUpperIndexCTList THEN 
  // no free element for processing
  LogError('Deformation processing list full, ignore new CT');
  Abort(iCT:=iCT, sReason:='attach failed');  // abort new CT (no release because not yet attached)
  RETURN;
END_IF
IF NOT bEnable AND _nMultiAttachedCTs > 0 THEN 
  // release current processing
  FOR i := nLowerIndexCTList TO nLowerIndexCTList + _nMultiAttachedCTs - 1 DO
    Release(iCT:=_pMultiAttachedCTs[i]^);
	END_FOR
  RETURN;
END_IF
IF getCtInst(iCT:=iCT, pCT=>pCt) = 0 THEN
  // no ct instance found
  RETURN;
END_IF


// - add CT to list ---------------------------------------------------------------
IF _nMultiAttachedCTs = 0 THEN // register first to parent as well
  IF NOT SUPER^.Attach(iCT:=iCT) THEN
    RETURN;
	END_IF
END_IF
_nMultiAttachedCTs := _nMultiAttachedCTs + 1;
_pMultiAttachedCTs[_nMultiAttachedCTs] := pCt;

bDeformErr := pCt^.getDeformationStatus(eDStep=>eDeformStep);   // get latest status 

// - Additional worker checks
  
// - deformation started? and no deformation error so far
IF bDeformErr OR eDeformStep = E_DeformationStep.nothing THEN
  Release(iCT:=iCT);  // nothing to do anymore

  // - job is valid?
ELSIF pCt^.pJob = 0 OR NOT _bJobActive THEN
  pCt^.AbortDeformation(sReason:='No valid job', Src:=_pEcSrc^);
  Release(iCT:=iCT);
  
// - did camera start?  
(*ELSIF eDeformStep < E_DeformationStep.cameraStarted THEN
  pCt^.AbortDeformation(sReason:='Prio steps did not start', Src:=_pEcSrc^);
  Release(iCT:=iCT);
*)
  
// - OK attach
ELSE
  IF eDeformStep < E_DeformationStep.cameraStarted THEN LogWarning('Sub-optimal timing, camera did not yet start'); END_IF
  LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=F_Concat4('Attach CT[', TO_STRING(_nMultiAttachedCTs), '] ', pCt^.print(0)));
  pCt^.sDefGridSettings := _sDeformationGridSettings;   // apply settings on container
  pCt^.StartDeformation();
  Attach := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitWorkerDeformation" Id="{ca5ccc6c-1e73-4750-be64-2b40d202a999}">
      <Declaration><![CDATA[METHOD InitWorkerDeformation : BOOL
VAR_INPUT
  nPrintUnitWidth : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT bInitialized THEN LogError('Base Worker not initialized! call init() before'); RETURN; END_IF

// worker specific init

_nPrintUnitWidth := nPrintUnitWidth;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStart" Id="{e676fb94-806c-46a7-b5f1-6dd04c7a3400}">
      <Declaration><![CDATA[METHOD mJobStart
VAR_INPUT
	sJobDef	: CalmarCompPrint.I_JobDefinition;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// check and init invalid settings
IF _pParamMediator = 0 THEN LogError('no parameter mediator'); RETURN; END_IF
IF _sDeformationGridSettings.nGridPitchX = 0 THEN _sDeformationGridSettings.nGridPitchX:=GVL_Deformation.nC_GridPitch_X; LogError(F_Concat2('nGridPitchX not configured, set default=', TO_STRING(GVL_Deformation.nC_GridPitch_X))); END_IF
IF _sDeformationGridSettings.nGridPitchY = 0 THEN _sDeformationGridSettings.nGridPitchY:=GVL_Deformation.nC_GridPitch_Y; LogError(F_Concat2('nGridPitchY not configured, set default=', TO_STRING(GVL_Deformation.nC_GridPitch_X))); END_IF
IF _nPrintUnitWidth = 0 THEN LogError('_nPrintUnitWidth not configured'); END_IF
IF fPosition = 0 THEN fPosition := _pParamMediator^.fDetectToCamera + 0.05; LogWarning('Initialized Worker position'); END_IF

// configuration
// calculate deformation  settings
// - save image y-offset (centered)
// - save image size
_nImageWidthPx := DINT_TO_UDINT(F_MeterToSubPixel(fPosMeter:=sJobDef.fImageWidth/1000, fResoSubPx:=_fPrintResolution));
_nImageDepthPx := DINT_TO_UDINT(F_MeterToSubPixel(fPosMeter:=sJobDef.fImageDepth/1000, fResoSubPx:=_fPrintResolution));
_sDeformationGridSettings.nGridImageOffsetY := LIMIT(0, ((_nPrintUnitWidth - _nImageWidthPx)) / 2, (_nPrintUnitWidth));  // TODO: if you can get this value from PUC use the other one to have a consistent image shift value 

// - calc grid size and number of points
(*
  Use image width / depth in px divide by GridPitch in X/Y to do a ceil(always next bigger integer).
  +1 -> Because Grid starts at 0 until the calculated numbers we have one point more [0, 1, 2, 3] = 4 points (not 3) 
*)
IF _sDeformationGridSettings.nGridPitchX > 0 AND _sDeformationGridSettings.nGridPitchY > 0 THEN
  _sDeformationGridSettings.nGridSizeX := F_Ceil(val:=UDINT_TO_LREAL(_nImageDepthPx)/_sDeformationGridSettings.nGridPitchX) + 1;
  _sDeformationGridSettings.nGridSizeY := F_Ceil(val:=UDINT_TO_LREAL(_nImageWidthPx + _sDeformationGridSettings.nGridImageOffsetY)/_sDeformationGridSettings.nGridPitchY) + 1;
END_IF
_sDeformationGridSettings.nGridPoints :=  _sDeformationGridSettings.nGridSizeX * _sDeformationGridSettings.nGridSizeY;

_bJobActive := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="mJobStop" Id="{b219a4fc-0309-4cdc-a5da-ab1269df4177}">
      <Declaration><![CDATA[METHOD  mJobStop
VAR_INPUT
	sStatus	: CalmarCompPrint.I_JobStatus;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_bJobActive := FALSE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Release" Id="{d95ae4fb-f525-4db5-9ae6-37cc0187a3eb}">
      <Declaration><![CDATA[(*
  Release CT from Worker.
  :return: TRUE if CT was released, FALSE if no CT was registered 
*)
METHOD Release : BOOL
VAR_INPUT
  iCT              : I_CT;                         (*container at triggered event position*)
END_VAR
VAR
  i                : DINT;
  Index            : DINT;
  LowerIndex       : DINT := 1;
  pCT              : POINTER TO FB_ContainerDefGrid;
  eStep            : E_DeformationStep;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF iCT = 0 OR _nMultiAttachedCTs = 0 THEN RETURN; END_IF

// remove CT -----------------------------------------------------
// -- remove from list
//  --- search ct in list
pCT := getCtInst(iCT:=iCT);
IF pCT = 0 THEN RETURN; END_IF

// release from deformation module
IF _pParamMediator <> 0 THEN
  pCt^.getDeformationStatus(eDStep => estep);
  IF estep >= E_DeformationStep.createdScriptContainer THEN
    pCt^.StopScript(iCT:=iCT);
    //_pParamMediator^.ReleaseDeformationCT(iCT:=iCT);
  END_IF
END_IF
// find if ct is in attached list
Index := -1;
FOR i:= TO_DINT(nLowerIndexCTList) TO TO_DINT(nLowerIndexCTList + _nMultiAttachedCTs) DO
  IF _pMultiAttachedCTs[i] = pCT THEN
    Index := i;
    EXIT;     // found
  END_IF
END_FOR

LogLvl(Lvl:=E_LogSeverity.Debug, Msg:=F_Concat4('Release CT[', TO_STRING(_nMultiAttachedCTs), '] ', pCt^.print(0)));  

// if found compress list
IF Index >= TO_DINT(nLowerIndexCTList) AND Index < TO_DINT(nUpperIndexCTList) THEN
  MEMMOVE(              // shift all above entries down
    destAddr := ADR( _pMultiAttachedCTs[Index] ), 
    srcAddr  := ADR( _pMultiAttachedCTs[Index + 1] ), 
    n        := DINT_TO_UDINT(SIZEOF(_pMultiAttachedCTs[LowerIndex]) * (UDINT_TO_DINT(_nMultiAttachedCTs) - Index - 1 + LowerIndex))
  );
  _pMultiAttachedCTs[nUpperIndexCTList] := 0;   // erase last(compressed) list entry
END_IF
// on last ct, remove it from parent
IF _nMultiAttachedCTs = 1 THEN
  SUPER^.Release(iCT:=iCT);       // when it was the last
END_IF

_nMultiAttachedCTs := _nMultiAttachedCTs - 1;]]></ST>
      </Implementation>
    </Method>
    <Property Name="sDeformationGridSettings" Id="{a6a325bf-1bf6-4de3-a446-119ecaf0ad62}">
      <Declaration><![CDATA[PROPERTY sDeformationGridSettings : ST_DefGridSettings]]></Declaration>
      <Get Name="Get" Id="{10a87355-402f-4b61-a1a4-0e7241dc1608}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[sDeformationGridSettings := _sDeformationGridSettings;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="work" Id="{9d84abdd-b080-4ea5-b34b-481b6fa9d0e0}">
      <Declaration><![CDATA[METHOD  work
VAR
  i : UDINT;
  sCamSettings : ST_CameraGridSettings;
  pCT : POINTER TO FB_ContainerDefGrid;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// OVERRIDES SUPER^.work() completely

IF _pParamMediator = 0 THEN RETURN; END_IF

//-----------------------------------------------------------
//- automatic worker setup & control
//-- update camera and grid settings from current camera
sCamSettings := _pParamMediator^.sCameraGridSettings;
//-- enable / disable worker based on mode
IF sCamSettings.eCameraMode > E_CameraMode.NoCorrection THEN  
  bEnable := TRUE;    // enable this worker
ELSE 
  bEnable := FALSE;   // disable this worker
END_IF



//-----------------------------------------------------------
// Work only with attached container
FOR i := nLowerIndexCTList TO nLowerIndexCTList + _nMultiAttachedCTs - 1 DO
  //Get information from container
  pCt := _pMultiAttachedCTs[i];
  
  //override SUPER^.work();
  // update CT position
  fCtPosition := pCt^.GetPos(nPosDomain:=E_PosDomain.master_pos) - _nTrackOffset; 
  
  // get status
  _bDeformationError[i] := pCt^.getDeformationStatus(eDStep => _eDeformStep[i], 
                            bBusy => _bDeformationBusy[i],
                            bDone => _bDeformationDone[i],
                            nErrorId => _nDeformationErrorId[i], 
                            tExecutionTime => _tDeformationExecutionTime[i],
                            bAbortRequestPy => _bAbortRequestPy[i]);
  _nDeformationProcPoints[i] := pCt^.nAvailableGridPoints;
  _nDeformationProcCols[i]   := pCt^.nAvailableGridCols;
     
  //Release container when all points have been processed or error
  IF _bDeformationDone[i] OR _bDeformationError[i] THEN
    // tag CT with error if deformation had an error
    IF _bDeformationError[i] THEN 
      pCt^.setError(ErrDef:=EC_DefGrid.ecDefGrid_DefGridError, Src:=_pEcSrc^); 
    END_IF
    IF _bAbortRequestPy[i] THEN
      pCt^.AbortDeformation(sReason:='Abort requested by Py', Src:=_pEcSrc^);
    END_IF
    LogLvl(Lvl:=E_LogSeverity.Detail, Msg:=F_Concat4('Done with: CamP=',  TO_STRING(pCT^.nRegisteredCameraPoints), ' GridP=', TO_STRING(pCt^.nAvailableGridPoints)));
    Release(pCt^);
  ELSIF _bAbortRequestPy[i] THEN
    pCt^.AbortDeformation(sReason:='Abort requested by Py', Src:=_pEcSrc^);
	END_IF
    // release CT (manually and security)
  IF _bForceRelease THEN
    pCt^.AbortDeformation(sReason:='Manually realease CT', Src:=_pEcSrc^);
    Release(iCT:=_pAttachedCt^);
  (*can be attached longer because of parallel processing
    ELSIF _fCtSecurityReleasePos > 0 AND (fCtPosition > _fCtSecurityReleasePos) THEN
    LogError(F_Concat2('Security released CTId=', TO_STRING(_pAttachedCt^.pCT^.iId)));
    pCt^.AbortDeformation(sReason:='Security released CT', Src:=_pEcSrc^);
    Release(iCT:=_pAttachedCt^);
  *)
  END_IF
  
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_WorkerDefGrid_Deformation">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Deformation.Attach">
      <LineId Id="63" Count="0" />
      <LineId Id="191" Count="0" />
      <LineId Id="170" Count="0" />
      <LineId Id="160" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="175" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="182" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="186" Count="1" />
      <LineId Id="192" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="209" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="167" Count="1" />
      <LineId Id="195" Count="1" />
      <LineId Id="169" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="157" Count="0" />
      <LineId Id="95" Count="1" />
      <LineId Id="32" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="109" Count="3" />
      <LineId Id="135" Count="4" />
      <LineId Id="131" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="133" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="214" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Deformation.InitWorkerDeformation">
      <LineId Id="9" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Deformation.mJobStart">
      <LineId Id="45" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="1" />
      <LineId Id="90" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="83" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="52" Count="0" />
      <LineId Id="51" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Deformation.mJobStop">
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Deformation.Release">
      <LineId Id="39" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="97" Count="1" />
      <LineId Id="92" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="73" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="119" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="47" Count="3" />
      <LineId Id="45" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="67" Count="3" />
      <LineId Id="66" Count="0" />
      <LineId Id="57" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Deformation.sDeformationGridSettings.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_WorkerDefGrid_Deformation.work">
      <LineId Id="287" Count="1" />
      <LineId Id="168" Count="13" />
      <LineId Id="183" Count="2" />
      <LineId Id="227" Count="0" />
      <LineId Id="229" Count="0" />
      <LineId Id="261" Count="1" />
      <LineId Id="272" Count="0" />
      <LineId Id="270" Count="1" />
      <LineId Id="264" Count="0" />
      <LineId Id="263" Count="0" />
      <LineId Id="230" Count="4" />
      <LineId Id="297" Count="0" />
      <LineId Id="235" Count="0" />
      <LineId Id="253" Count="0" />
      <LineId Id="244" Count="1" />
      <LineId Id="298" Count="0" />
      <LineId Id="247" Count="1" />
      <LineId Id="273" Count="1" />
      <LineId Id="307" Count="2" />
      <LineId Id="291" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="305" Count="1" />
      <LineId Id="251" Count="0" />
      <LineId Id="276" Count="1" />
      <LineId Id="284" Count="0" />
      <LineId Id="279" Count="1" />
      <LineId Id="289" Count="0" />
      <LineId Id="281" Count="0" />
      <LineId Id="286" Count="0" />
      <LineId Id="282" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="275" Count="0" />
      <LineId Id="252" Count="0" />
      <LineId Id="224" Count="0" />
      <LineId Id="6" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>